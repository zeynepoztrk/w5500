
w5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005168  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  08005338  08005338  00006338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005710  08005710  000070b0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005710  08005710  00006710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005718  08005718  000070b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005718  08005718  00006718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800571c  0800571c  0000671c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b0  20000000  08005720  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  200000b0  080057d0  000070b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  080057d0  00007364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000070b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2dc  00000000  00000000  000070e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002618  00000000  00000000  000143bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  000169d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000094e  00000000  00000000  00017600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002324c  00000000  00000000  00017f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f302  00000000  00000000  0003b19a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d06a4  00000000  00000000  0004a49c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011ab40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038fc  00000000  00000000  0011ab84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  0011e480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005320 	.word	0x08005320

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b4 	.word	0x200000b4
 800020c:	08005320 	.word	0x08005320

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b988 	b.w	80005f8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	468e      	mov	lr, r1
 8000308:	4604      	mov	r4, r0
 800030a:	4688      	mov	r8, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d962      	bls.n	80003dc <__udivmoddi4+0xdc>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	b14e      	cbz	r6, 8000330 <__udivmoddi4+0x30>
 800031c:	f1c6 0320 	rsb	r3, r6, #32
 8000320:	fa01 f806 	lsl.w	r8, r1, r6
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	40b7      	lsls	r7, r6
 800032a:	ea43 0808 	orr.w	r8, r3, r8
 800032e:	40b4      	lsls	r4, r6
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	fbb8 f1fe 	udiv	r1, r8, lr
 800033c:	0c23      	lsrs	r3, r4, #16
 800033e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000342:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000346:	fb01 f20c 	mul.w	r2, r1, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x62>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f101 30ff 	add.w	r0, r1, #4294967295
 8000354:	f080 80ea 	bcs.w	800052c <__udivmoddi4+0x22c>
 8000358:	429a      	cmp	r2, r3
 800035a:	f240 80e7 	bls.w	800052c <__udivmoddi4+0x22c>
 800035e:	3902      	subs	r1, #2
 8000360:	443b      	add	r3, r7
 8000362:	1a9a      	subs	r2, r3, r2
 8000364:	b2a3      	uxth	r3, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000372:	fb00 fc0c 	mul.w	ip, r0, ip
 8000376:	459c      	cmp	ip, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x8e>
 800037a:	18fb      	adds	r3, r7, r3
 800037c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000380:	f080 80d6 	bcs.w	8000530 <__udivmoddi4+0x230>
 8000384:	459c      	cmp	ip, r3
 8000386:	f240 80d3 	bls.w	8000530 <__udivmoddi4+0x230>
 800038a:	443b      	add	r3, r7
 800038c:	3802      	subs	r0, #2
 800038e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000392:	eba3 030c 	sub.w	r3, r3, ip
 8000396:	2100      	movs	r1, #0
 8000398:	b11d      	cbz	r5, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40f3      	lsrs	r3, r6
 800039c:	2200      	movs	r2, #0
 800039e:	e9c5 3200 	strd	r3, r2, [r5]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d905      	bls.n	80003b6 <__udivmoddi4+0xb6>
 80003aa:	b10d      	cbz	r5, 80003b0 <__udivmoddi4+0xb0>
 80003ac:	e9c5 0100 	strd	r0, r1, [r5]
 80003b0:	2100      	movs	r1, #0
 80003b2:	4608      	mov	r0, r1
 80003b4:	e7f5      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003b6:	fab3 f183 	clz	r1, r3
 80003ba:	2900      	cmp	r1, #0
 80003bc:	d146      	bne.n	800044c <__udivmoddi4+0x14c>
 80003be:	4573      	cmp	r3, lr
 80003c0:	d302      	bcc.n	80003c8 <__udivmoddi4+0xc8>
 80003c2:	4282      	cmp	r2, r0
 80003c4:	f200 8105 	bhi.w	80005d2 <__udivmoddi4+0x2d2>
 80003c8:	1a84      	subs	r4, r0, r2
 80003ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ce:	2001      	movs	r0, #1
 80003d0:	4690      	mov	r8, r2
 80003d2:	2d00      	cmp	r5, #0
 80003d4:	d0e5      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003d6:	e9c5 4800 	strd	r4, r8, [r5]
 80003da:	e7e2      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f000 8090 	beq.w	8000502 <__udivmoddi4+0x202>
 80003e2:	fab2 f682 	clz	r6, r2
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f040 80a4 	bne.w	8000534 <__udivmoddi4+0x234>
 80003ec:	1a8a      	subs	r2, r1, r2
 80003ee:	0c03      	lsrs	r3, r0, #16
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	b280      	uxth	r0, r0
 80003f6:	b2bc      	uxth	r4, r7
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000406:	fb04 f20c 	mul.w	r2, r4, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x11e>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x11c>
 8000416:	429a      	cmp	r2, r3
 8000418:	f200 80e0 	bhi.w	80005dc <__udivmoddi4+0x2dc>
 800041c:	46c4      	mov	ip, r8
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	fbb3 f2fe 	udiv	r2, r3, lr
 8000424:	fb0e 3312 	mls	r3, lr, r2, r3
 8000428:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800042c:	fb02 f404 	mul.w	r4, r2, r4
 8000430:	429c      	cmp	r4, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x144>
 8000434:	18fb      	adds	r3, r7, r3
 8000436:	f102 30ff 	add.w	r0, r2, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x142>
 800043c:	429c      	cmp	r4, r3
 800043e:	f200 80ca 	bhi.w	80005d6 <__udivmoddi4+0x2d6>
 8000442:	4602      	mov	r2, r0
 8000444:	1b1b      	subs	r3, r3, r4
 8000446:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800044a:	e7a5      	b.n	8000398 <__udivmoddi4+0x98>
 800044c:	f1c1 0620 	rsb	r6, r1, #32
 8000450:	408b      	lsls	r3, r1
 8000452:	fa22 f706 	lsr.w	r7, r2, r6
 8000456:	431f      	orrs	r7, r3
 8000458:	fa0e f401 	lsl.w	r4, lr, r1
 800045c:	fa20 f306 	lsr.w	r3, r0, r6
 8000460:	fa2e fe06 	lsr.w	lr, lr, r6
 8000464:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000468:	4323      	orrs	r3, r4
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	fa1f fc87 	uxth.w	ip, r7
 8000472:	fbbe f0f9 	udiv	r0, lr, r9
 8000476:	0c1c      	lsrs	r4, r3, #16
 8000478:	fb09 ee10 	mls	lr, r9, r0, lr
 800047c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000480:	fb00 fe0c 	mul.w	lr, r0, ip
 8000484:	45a6      	cmp	lr, r4
 8000486:	fa02 f201 	lsl.w	r2, r2, r1
 800048a:	d909      	bls.n	80004a0 <__udivmoddi4+0x1a0>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000492:	f080 809c 	bcs.w	80005ce <__udivmoddi4+0x2ce>
 8000496:	45a6      	cmp	lr, r4
 8000498:	f240 8099 	bls.w	80005ce <__udivmoddi4+0x2ce>
 800049c:	3802      	subs	r0, #2
 800049e:	443c      	add	r4, r7
 80004a0:	eba4 040e 	sub.w	r4, r4, lr
 80004a4:	fa1f fe83 	uxth.w	lr, r3
 80004a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ac:	fb09 4413 	mls	r4, r9, r3, r4
 80004b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b8:	45a4      	cmp	ip, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x1ce>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f103 3eff 	add.w	lr, r3, #4294967295
 80004c2:	f080 8082 	bcs.w	80005ca <__udivmoddi4+0x2ca>
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d97f      	bls.n	80005ca <__udivmoddi4+0x2ca>
 80004ca:	3b02      	subs	r3, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004d2:	eba4 040c 	sub.w	r4, r4, ip
 80004d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004da:	4564      	cmp	r4, ip
 80004dc:	4673      	mov	r3, lr
 80004de:	46e1      	mov	r9, ip
 80004e0:	d362      	bcc.n	80005a8 <__udivmoddi4+0x2a8>
 80004e2:	d05f      	beq.n	80005a4 <__udivmoddi4+0x2a4>
 80004e4:	b15d      	cbz	r5, 80004fe <__udivmoddi4+0x1fe>
 80004e6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ea:	eb64 0409 	sbc.w	r4, r4, r9
 80004ee:	fa04 f606 	lsl.w	r6, r4, r6
 80004f2:	fa22 f301 	lsr.w	r3, r2, r1
 80004f6:	431e      	orrs	r6, r3
 80004f8:	40cc      	lsrs	r4, r1
 80004fa:	e9c5 6400 	strd	r6, r4, [r5]
 80004fe:	2100      	movs	r1, #0
 8000500:	e74f      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000502:	fbb1 fcf2 	udiv	ip, r1, r2
 8000506:	0c01      	lsrs	r1, r0, #16
 8000508:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800050c:	b280      	uxth	r0, r0
 800050e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000512:	463b      	mov	r3, r7
 8000514:	4638      	mov	r0, r7
 8000516:	463c      	mov	r4, r7
 8000518:	46b8      	mov	r8, r7
 800051a:	46be      	mov	lr, r7
 800051c:	2620      	movs	r6, #32
 800051e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000522:	eba2 0208 	sub.w	r2, r2, r8
 8000526:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052a:	e766      	b.n	80003fa <__udivmoddi4+0xfa>
 800052c:	4601      	mov	r1, r0
 800052e:	e718      	b.n	8000362 <__udivmoddi4+0x62>
 8000530:	4610      	mov	r0, r2
 8000532:	e72c      	b.n	800038e <__udivmoddi4+0x8e>
 8000534:	f1c6 0220 	rsb	r2, r6, #32
 8000538:	fa2e f302 	lsr.w	r3, lr, r2
 800053c:	40b7      	lsls	r7, r6
 800053e:	40b1      	lsls	r1, r6
 8000540:	fa20 f202 	lsr.w	r2, r0, r2
 8000544:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000548:	430a      	orrs	r2, r1
 800054a:	fbb3 f8fe 	udiv	r8, r3, lr
 800054e:	b2bc      	uxth	r4, r7
 8000550:	fb0e 3318 	mls	r3, lr, r8, r3
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb08 f904 	mul.w	r9, r8, r4
 800055e:	40b0      	lsls	r0, r6
 8000560:	4589      	cmp	r9, r1
 8000562:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000566:	b280      	uxth	r0, r0
 8000568:	d93e      	bls.n	80005e8 <__udivmoddi4+0x2e8>
 800056a:	1879      	adds	r1, r7, r1
 800056c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000570:	d201      	bcs.n	8000576 <__udivmoddi4+0x276>
 8000572:	4589      	cmp	r9, r1
 8000574:	d81f      	bhi.n	80005b6 <__udivmoddi4+0x2b6>
 8000576:	eba1 0109 	sub.w	r1, r1, r9
 800057a:	fbb1 f9fe 	udiv	r9, r1, lr
 800057e:	fb09 f804 	mul.w	r8, r9, r4
 8000582:	fb0e 1119 	mls	r1, lr, r9, r1
 8000586:	b292      	uxth	r2, r2
 8000588:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800058c:	4542      	cmp	r2, r8
 800058e:	d229      	bcs.n	80005e4 <__udivmoddi4+0x2e4>
 8000590:	18ba      	adds	r2, r7, r2
 8000592:	f109 31ff 	add.w	r1, r9, #4294967295
 8000596:	d2c4      	bcs.n	8000522 <__udivmoddi4+0x222>
 8000598:	4542      	cmp	r2, r8
 800059a:	d2c2      	bcs.n	8000522 <__udivmoddi4+0x222>
 800059c:	f1a9 0102 	sub.w	r1, r9, #2
 80005a0:	443a      	add	r2, r7
 80005a2:	e7be      	b.n	8000522 <__udivmoddi4+0x222>
 80005a4:	45f0      	cmp	r8, lr
 80005a6:	d29d      	bcs.n	80004e4 <__udivmoddi4+0x1e4>
 80005a8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b0:	3801      	subs	r0, #1
 80005b2:	46e1      	mov	r9, ip
 80005b4:	e796      	b.n	80004e4 <__udivmoddi4+0x1e4>
 80005b6:	eba7 0909 	sub.w	r9, r7, r9
 80005ba:	4449      	add	r1, r9
 80005bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c4:	fb09 f804 	mul.w	r8, r9, r4
 80005c8:	e7db      	b.n	8000582 <__udivmoddi4+0x282>
 80005ca:	4673      	mov	r3, lr
 80005cc:	e77f      	b.n	80004ce <__udivmoddi4+0x1ce>
 80005ce:	4650      	mov	r0, sl
 80005d0:	e766      	b.n	80004a0 <__udivmoddi4+0x1a0>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e6fd      	b.n	80003d2 <__udivmoddi4+0xd2>
 80005d6:	443b      	add	r3, r7
 80005d8:	3a02      	subs	r2, #2
 80005da:	e733      	b.n	8000444 <__udivmoddi4+0x144>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	443b      	add	r3, r7
 80005e2:	e71c      	b.n	800041e <__udivmoddi4+0x11e>
 80005e4:	4649      	mov	r1, r9
 80005e6:	e79c      	b.n	8000522 <__udivmoddi4+0x222>
 80005e8:	eba1 0109 	sub.w	r1, r1, r9
 80005ec:	46c4      	mov	ip, r8
 80005ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f2:	fb09 f804 	mul.w	r8, r9, r4
 80005f6:	e7c4      	b.n	8000582 <__udivmoddi4+0x282>

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	@ 0x28
 8000600:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	613b      	str	r3, [r7, #16]
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <MX_GPIO_Init+0xd0>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	4a2c      	ldr	r2, [pc, #176]	@ (80006cc <MX_GPIO_Init+0xd0>)
 800061c:	f043 0304 	orr.w	r3, r3, #4
 8000620:	6313      	str	r3, [r2, #48]	@ 0x30
 8000622:	4b2a      	ldr	r3, [pc, #168]	@ (80006cc <MX_GPIO_Init+0xd0>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	f003 0304 	and.w	r3, r3, #4
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	4b26      	ldr	r3, [pc, #152]	@ (80006cc <MX_GPIO_Init+0xd0>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	4a25      	ldr	r2, [pc, #148]	@ (80006cc <MX_GPIO_Init+0xd0>)
 8000638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800063c:	6313      	str	r3, [r2, #48]	@ 0x30
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <MX_GPIO_Init+0xd0>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	4b1f      	ldr	r3, [pc, #124]	@ (80006cc <MX_GPIO_Init+0xd0>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	4a1e      	ldr	r2, [pc, #120]	@ (80006cc <MX_GPIO_Init+0xd0>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6313      	str	r3, [r2, #48]	@ 0x30
 800065a:	4b1c      	ldr	r3, [pc, #112]	@ (80006cc <MX_GPIO_Init+0xd0>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <MX_GPIO_Init+0xd0>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	4a17      	ldr	r2, [pc, #92]	@ (80006cc <MX_GPIO_Init+0xd0>)
 8000670:	f043 0302 	orr.w	r3, r3, #2
 8000674:	6313      	str	r3, [r2, #48]	@ 0x30
 8000676:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <MX_GPIO_Init+0xd0>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	f003 0302 	and.w	r3, r3, #2
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RESET_Pin|CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	2123      	movs	r1, #35	@ 0x23
 8000686:	4812      	ldr	r0, [pc, #72]	@ (80006d0 <MX_GPIO_Init+0xd4>)
 8000688:	f002 fcaa 	bl	8002fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800068c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000692:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	4619      	mov	r1, r3
 80006a2:	480c      	ldr	r0, [pc, #48]	@ (80006d4 <MX_GPIO_Init+0xd8>)
 80006a4:	f002 fb08 	bl	8002cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin CS_Pin LD2_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|CS_Pin|LD2_Pin;
 80006a8:	2323      	movs	r3, #35	@ 0x23
 80006aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	2301      	movs	r3, #1
 80006ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	2300      	movs	r3, #0
 80006b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4619      	mov	r1, r3
 80006be:	4804      	ldr	r0, [pc, #16]	@ (80006d0 <MX_GPIO_Init+0xd4>)
 80006c0:	f002 fafa 	bl	8002cb8 <HAL_GPIO_Init>

}
 80006c4:	bf00      	nop
 80006c6:	3728      	adds	r7, #40	@ 0x28
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40020000 	.word	0x40020000
 80006d4:	40020800 	.word	0x40020800

080006d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006de:	f002 f96f 	bl	80029c0 <HAL_Init>

  /* USER CODE BEGIN Init */
  setbuf(stdout, NULL);//disable printf() buffering, output immediately to port.
 80006e2:	4b60      	ldr	r3, [pc, #384]	@ (8000864 <main+0x18c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f003 fefa 	bl	80044e4 <setbuf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f0:	f000 f8e8 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f4:	f7ff ff82 	bl	80005fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006f8:	f000 fba2 	bl	8000e40 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80006fc:	f000 f9e6 	bl	8000acc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  printf("A Simple TCP Echo Server Application using W5500!\r\n");
 8000700:	4859      	ldr	r0, [pc, #356]	@ (8000868 <main+0x190>)
 8000702:	f003 fee7 	bl	80044d4 <puts>

  //Configure network parameters like IP address etc
    ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 8000706:	4959      	ldr	r1, [pc, #356]	@ (800086c <main+0x194>)
 8000708:	2000      	movs	r0, #0
 800070a:	f001 fd2d 	bl	8002168 <ctlnetwork>
    //so that user can use any model w5500 board
    //else the PINs on the board configure it, which may
    //lead to different configurations in different boards.
    wiz_PhyConf phyconf;

    phyconf.by=PHY_CONFBY_SW;
 800070e:	2301      	movs	r3, #1
 8000710:	713b      	strb	r3, [r7, #4]
    phyconf.duplex=PHY_DUPLEX_FULL;
 8000712:	2301      	movs	r3, #1
 8000714:	71fb      	strb	r3, [r7, #7]
    phyconf.speed=PHY_SPEED_10;//10MBps Ethernet link speed
 8000716:	2300      	movs	r3, #0
 8000718:	71bb      	strb	r3, [r7, #6]
    phyconf.mode=PHY_MODE_AUTONEGO;//best to go with auto-negotiation
 800071a:	2301      	movs	r3, #1
 800071c:	717b      	strb	r3, [r7, #5]

    ctlwizchip(CW_SET_PHYCONF, (void*) &phyconf);//PHY Configuration Command
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	4619      	mov	r1, r3
 8000722:	2012      	movs	r0, #18
 8000724:	f001 fc30 	bl	8001f88 <ctlwizchip>
    //*** End Phy Configuration

    PHYStatusCheck();
 8000728:	f000 f960 	bl	80009ec <PHYStatusCheck>
    PrintPHYConf();
 800072c:	f000 f984 	bl	8000a38 <PrintPHYConf>
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     //The above code are common to all projects
     //TCP Echo Server Code begins from here
     //We will listen on socket ID:1 and TCP Port Would be 5000

     printf("\r\n*****************SIMPLE TCP ECHO SERVER******************\r\n");
 8000730:	484f      	ldr	r0, [pc, #316]	@ (8000870 <main+0x198>)
 8000732:	f003 fecf 	bl	80044d4 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("\r\nInitializing server socket\r\n");
 8000736:	484f      	ldr	r0, [pc, #316]	@ (8000874 <main+0x19c>)
 8000738:	f003 fecc 	bl	80044d4 <puts>

	  	  //Parameters in order socket_id, protocol TCP or UDP, Port number, Flags=0
	  	  //Return value is socket ID on success
	  	  if(socket(1,Sn_MR_TCP,LISTEN_PORT,0)!=1)
 800073c:	2300      	movs	r3, #0
 800073e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000742:	2101      	movs	r1, #1
 8000744:	2001      	movs	r0, #1
 8000746:	f000 fe8d 	bl	8001464 <socket>
 800074a:	4603      	mov	r3, r0
 800074c:	2b01      	cmp	r3, #1
 800074e:	d004      	beq.n	800075a <main+0x82>
	  	  {
	  		  //error
	  		  printf("Cannot create Socket!\r\n");
 8000750:	4849      	ldr	r0, [pc, #292]	@ (8000878 <main+0x1a0>)
 8000752:	f003 febf 	bl	80044d4 <puts>
	  		  while(1);//halt here
 8000756:	bf00      	nop
 8000758:	e7fd      	b.n	8000756 <main+0x7e>
	  	  }

	  	  //success
	  	  printf("Socket Created Successfully ! \r\n");
 800075a:	4848      	ldr	r0, [pc, #288]	@ (800087c <main+0x1a4>)
 800075c:	f003 feba 	bl	80044d4 <puts>

	  	  uint8_t socket_io_mode=SOCK_IO_BLOCK;
 8000760:	2300      	movs	r3, #0
 8000762:	70fb      	strb	r3, [r7, #3]

	  	  ctlsocket(1, CS_SET_IOMODE , &socket_io_mode);//set blocking IO mode
 8000764:	1cfb      	adds	r3, r7, #3
 8000766:	461a      	mov	r2, r3
 8000768:	2100      	movs	r1, #0
 800076a:	2001      	movs	r0, #1
 800076c:	f001 fafe 	bl	8001d6c <ctlsocket>

	  	  printf("Start listening on port %d ! \r\n",LISTEN_PORT);
 8000770:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000774:	4842      	ldr	r0, [pc, #264]	@ (8000880 <main+0x1a8>)
 8000776:	f003 fe45 	bl	8004404 <iprintf>
	  	  printf("Waiting for a client connection. \r\n");
 800077a:	4842      	ldr	r0, [pc, #264]	@ (8000884 <main+0x1ac>)
 800077c:	f003 feaa 	bl	80044d4 <puts>

	  	  //Make it a passive socket (i.e. listen for connection)
	  	  if(listen(1)!=SOCK_OK)//our socket id is 1 (w5500 have 8 sockets from 0-7)
 8000780:	2001      	movs	r0, #1
 8000782:	f001 f811 	bl	80017a8 <listen>
 8000786:	4603      	mov	r3, r0
 8000788:	2b01      	cmp	r3, #1
 800078a:	d006      	beq.n	800079a <main+0xc2>
	  	  {
	  		  //error
	  		  printf("Cannot listen on port %d",LISTEN_PORT);
 800078c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000790:	483d      	ldr	r0, [pc, #244]	@ (8000888 <main+0x1b0>)
 8000792:	f003 fe37 	bl	8004404 <iprintf>

	  		  while(1);
 8000796:	bf00      	nop
 8000798:	e7fd      	b.n	8000796 <main+0xbe>

	  	  }

	  	  uint8_t sr=0x00;//socket status register
 800079a:	2300      	movs	r3, #0
 800079c:	73fb      	strb	r3, [r7, #15]

	  	  do
	  	  {
	  		  sr=getSn_SR(1);//read status reg (SR of socket 1)
 800079e:	f44f 704a 	mov.w	r0, #808	@ 0x328
 80007a2:	f000 fbbf 	bl	8000f24 <WIZCHIP_READ>
 80007a6:	4603      	mov	r3, r0
 80007a8:	73fb      	strb	r3, [r7, #15]
	  	  }while (sr!=0x17 && sr!=0x00);
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	2b17      	cmp	r3, #23
 80007ae:	d002      	beq.n	80007b6 <main+0xde>
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1f3      	bne.n	800079e <main+0xc6>

	  	  if(sr==0x00)
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d104      	bne.n	80007c6 <main+0xee>
	  	  {
	  		  printf("Some error occurred on server socket. Please restart.\r\n");
 80007bc:	4833      	ldr	r0, [pc, #204]	@ (800088c <main+0x1b4>)
 80007be:	f003 fe89 	bl	80044d4 <puts>
	  		  while(1);
 80007c2:	bf00      	nop
 80007c4:	e7fd      	b.n	80007c2 <main+0xea>
	  	  }

	  	  if(sr==0x17)
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
 80007c8:	2b17      	cmp	r3, #23
 80007ca:	d1b4      	bne.n	8000736 <main+0x5e>
	  	  {
	  		  //we come here only when a client has connected.
	  		  //Now we can read data from the socket
	  		  printf("A client connected!\r\n");
 80007cc:	4830      	ldr	r0, [pc, #192]	@ (8000890 <main+0x1b8>)
 80007ce:	f003 fe81 	bl	80044d4 <puts>
	  		  printf("Waiting for Client Data ...!\r\n");
 80007d2:	4830      	ldr	r0, [pc, #192]	@ (8000894 <main+0x1bc>)
 80007d4:	f003 fe7e 	bl	80044d4 <puts>

	  		  while(1)
	  		  {
	  			  int len=recv(1, receive_buff, RECEIVE_BUFF_SIZE);
 80007d8:	2280      	movs	r2, #128	@ 0x80
 80007da:	492f      	ldr	r1, [pc, #188]	@ (8000898 <main+0x1c0>)
 80007dc:	2001      	movs	r0, #1
 80007de:	f001 fa13 	bl	8001c08 <recv>
 80007e2:	60b8      	str	r0, [r7, #8]

	  			  if(len==SOCKERR_SOCKSTATUS)
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	f113 0f07 	cmn.w	r3, #7
 80007ea:	d106      	bne.n	80007fa <main+0x122>
	  			  {
	  				  //client has disconnected
	  				  printf("Client has disconnected\r\n");
 80007ec:	482b      	ldr	r0, [pc, #172]	@ (800089c <main+0x1c4>)
 80007ee:	f003 fe71 	bl	80044d4 <puts>
	  				  printf("*** SESSION OVER ***\r\n\r\n");
 80007f2:	482b      	ldr	r0, [pc, #172]	@ (80008a0 <main+0x1c8>)
 80007f4:	f003 fe6e 	bl	80044d4 <puts>
	  				  break;
 80007f8:	e033      	b.n	8000862 <main+0x18a>
	  			  }

	  			  receive_buff[len]='\0';
 80007fa:	4a27      	ldr	r2, [pc, #156]	@ (8000898 <main+0x1c0>)
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	4413      	add	r3, r2
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]

	  			  printf("Received %d bytes from client\r\n",len);
 8000804:	68b9      	ldr	r1, [r7, #8]
 8000806:	4827      	ldr	r0, [pc, #156]	@ (80008a4 <main+0x1cc>)
 8000808:	f003 fdfc 	bl	8004404 <iprintf>
	  			  printf("Data Received: %s", receive_buff);
 800080c:	4922      	ldr	r1, [pc, #136]	@ (8000898 <main+0x1c0>)
 800080e:	4826      	ldr	r0, [pc, #152]	@ (80008a8 <main+0x1d0>)
 8000810:	f003 fdf8 	bl	8004404 <iprintf>

	  			  //Echo the data back encloused in a [] pair
	  			  send(1,(uint8_t*)"[",1);//starting sq bracket
 8000814:	2201      	movs	r2, #1
 8000816:	4925      	ldr	r1, [pc, #148]	@ (80008ac <main+0x1d4>)
 8000818:	2001      	movs	r0, #1
 800081a:	f001 f8a1 	bl	8001960 <send>
	  			  send(1,receive_buff,len);// the data
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	b29b      	uxth	r3, r3
 8000822:	461a      	mov	r2, r3
 8000824:	491c      	ldr	r1, [pc, #112]	@ (8000898 <main+0x1c0>)
 8000826:	2001      	movs	r0, #1
 8000828:	f001 f89a 	bl	8001960 <send>
	  			  send(1,(uint8_t*)"]",1);//closing sq bracket
 800082c:	2201      	movs	r2, #1
 800082e:	4920      	ldr	r1, [pc, #128]	@ (80008b0 <main+0x1d8>)
 8000830:	2001      	movs	r0, #1
 8000832:	f001 f895 	bl	8001960 <send>

	  			  printf("\r\nECHO sent back to client\r\n");
 8000836:	481f      	ldr	r0, [pc, #124]	@ (80008b4 <main+0x1dc>)
 8000838:	f003 fe4c 	bl	80044d4 <puts>

	  			  //Look for quit message and quit if received
	  			  if(strcmp((char*)receive_buff,"QUIT")==0)
 800083c:	491e      	ldr	r1, [pc, #120]	@ (80008b8 <main+0x1e0>)
 800083e:	4816      	ldr	r0, [pc, #88]	@ (8000898 <main+0x1c0>)
 8000840:	f7ff fce6 	bl	8000210 <strcmp>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d1c6      	bne.n	80007d8 <main+0x100>
	  			  {
	  				  printf("Received QUIT command from client\r\n");
 800084a:	481c      	ldr	r0, [pc, #112]	@ (80008bc <main+0x1e4>)
 800084c:	f003 fe42 	bl	80044d4 <puts>
	  				  printf("Disconnecting ... \r\n");
 8000850:	481b      	ldr	r0, [pc, #108]	@ (80008c0 <main+0x1e8>)
 8000852:	f003 fe3f 	bl	80044d4 <puts>
	  				  printf("*** SESSION OVER ***\r\n\r\n");
 8000856:	4812      	ldr	r0, [pc, #72]	@ (80008a0 <main+0x1c8>)
 8000858:	f003 fe3c 	bl	80044d4 <puts>
	  				  disconnect(1);//disconnect from the clinet
 800085c:	2001      	movs	r0, #1
 800085e:	f000 fffd 	bl	800185c <disconnect>
  {
 8000862:	e768      	b.n	8000736 <main+0x5e>
 8000864:	20000060 	.word	0x20000060
 8000868:	08005338 	.word	0x08005338
 800086c:	20000000 	.word	0x20000000
 8000870:	0800536c 	.word	0x0800536c
 8000874:	080053ac 	.word	0x080053ac
 8000878:	080053cc 	.word	0x080053cc
 800087c:	080053e4 	.word	0x080053e4
 8000880:	08005404 	.word	0x08005404
 8000884:	08005424 	.word	0x08005424
 8000888:	08005448 	.word	0x08005448
 800088c:	08005464 	.word	0x08005464
 8000890:	0800549c 	.word	0x0800549c
 8000894:	080054b4 	.word	0x080054b4
 8000898:	200000cc 	.word	0x200000cc
 800089c:	080054d4 	.word	0x080054d4
 80008a0:	080054f0 	.word	0x080054f0
 80008a4:	08005508 	.word	0x08005508
 80008a8:	08005528 	.word	0x08005528
 80008ac:	0800553c 	.word	0x0800553c
 80008b0:	08005540 	.word	0x08005540
 80008b4:	08005544 	.word	0x08005544
 80008b8:	08005560 	.word	0x08005560
 80008bc:	08005568 	.word	0x08005568
 80008c0:	0800558c 	.word	0x0800558c

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b094      	sub	sp, #80	@ 0x50
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	2234      	movs	r2, #52	@ 0x34
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f003 ff9a 	bl	800480c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	4b29      	ldr	r3, [pc, #164]	@ (8000994 <SystemClock_Config+0xd0>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f0:	4a28      	ldr	r2, [pc, #160]	@ (8000994 <SystemClock_Config+0xd0>)
 80008f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f8:	4b26      	ldr	r3, [pc, #152]	@ (8000994 <SystemClock_Config+0xd0>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000904:	2300      	movs	r3, #0
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	4b23      	ldr	r3, [pc, #140]	@ (8000998 <SystemClock_Config+0xd4>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000910:	4a21      	ldr	r2, [pc, #132]	@ (8000998 <SystemClock_Config+0xd4>)
 8000912:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	4b1f      	ldr	r3, [pc, #124]	@ (8000998 <SystemClock_Config+0xd4>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000924:	2301      	movs	r3, #1
 8000926:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000928:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800092c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092e:	2302      	movs	r3, #2
 8000930:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000932:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000936:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000938:	2308      	movs	r3, #8
 800093a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 800093c:	23c0      	movs	r3, #192	@ 0xc0
 800093e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000940:	2302      	movs	r3, #2
 8000942:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000944:	2302      	movs	r3, #2
 8000946:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000948:	2302      	movs	r3, #2
 800094a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4618      	mov	r0, r3
 8000952:	f002 fea9 	bl	80036a8 <HAL_RCC_OscConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800095c:	f000 f8b0 	bl	8000ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000960:	230f      	movs	r3, #15
 8000962:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000964:	2302      	movs	r3, #2
 8000966:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000968:	2380      	movs	r3, #128	@ 0x80
 800096a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800096c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000970:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000976:	f107 0308 	add.w	r3, r7, #8
 800097a:	2101      	movs	r1, #1
 800097c:	4618      	mov	r0, r3
 800097e:	f002 fb49 	bl	8003014 <HAL_RCC_ClockConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000988:	f000 f89a 	bl	8000ac0 <Error_Handler>
  }
}
 800098c:	bf00      	nop
 800098e:	3750      	adds	r7, #80	@ 0x50
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40023800 	.word	0x40023800
 8000998:	40007000 	.word	0x40007000

0800099c <UWriteData>:

/* USER CODE BEGIN 4 */

void UWriteData(const char data)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
	while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==RESET);
 80009a6:	bf00      	nop
 80009a8:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <UWriteData+0x30>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009b2:	2b80      	cmp	r3, #128	@ 0x80
 80009b4:	d1f8      	bne.n	80009a8 <UWriteData+0xc>

	huart2.Instance->DR=data;
 80009b6:	4b05      	ldr	r3, [pc, #20]	@ (80009cc <UWriteData+0x30>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	79fa      	ldrb	r2, [r7, #7]
 80009bc:	605a      	str	r2, [r3, #4]

}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	200001a8 	.word	0x200001a8

080009d0 <__io_putchar>:

int __io_putchar(int ch)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	UWriteData(ch);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff ffdd 	bl	800099c <UWriteData>
	return ch;
 80009e2:	687b      	ldr	r3, [r7, #4]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <PHYStatusCheck>:

void PHYStatusCheck(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
	uint8_t tmp;

	do
	{
		printf("\r\nChecking Ethernet Cable Presence ...");
 80009f2:	480e      	ldr	r0, [pc, #56]	@ (8000a2c <PHYStatusCheck+0x40>)
 80009f4:	f003 fd06 	bl	8004404 <iprintf>
		ctlwizchip(CW_GET_PHYLINK, (void*) &tmp);
 80009f8:	1dfb      	adds	r3, r7, #7
 80009fa:	4619      	mov	r1, r3
 80009fc:	2017      	movs	r0, #23
 80009fe:	f001 fac3 	bl	8001f88 <ctlwizchip>

		if(tmp == PHY_LINK_OFF)
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d106      	bne.n	8000a16 <PHYStatusCheck+0x2a>
		{
			printf("NO Cable Connected!");
 8000a08:	4809      	ldr	r0, [pc, #36]	@ (8000a30 <PHYStatusCheck+0x44>)
 8000a0a:	f003 fcfb 	bl	8004404 <iprintf>
			HAL_Delay(1500);
 8000a0e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000a12:	f002 f847 	bl	8002aa4 <HAL_Delay>
		}
	}while(tmp == PHY_LINK_OFF);
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d0ea      	beq.n	80009f2 <PHYStatusCheck+0x6>

	printf("Good! Cable got connected!");
 8000a1c:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <PHYStatusCheck+0x48>)
 8000a1e:	f003 fcf1 	bl	8004404 <iprintf>

}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	080055a0 	.word	0x080055a0
 8000a30:	080055c8 	.word	0x080055c8
 8000a34:	080055dc 	.word	0x080055dc

08000a38 <PrintPHYConf>:

void PrintPHYConf(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
	wiz_PhyConf phyconf;

	ctlwizchip(CW_GET_PHYCONF, (void*) &phyconf);
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	4619      	mov	r1, r3
 8000a42:	2013      	movs	r0, #19
 8000a44:	f001 faa0 	bl	8001f88 <ctlwizchip>

	if(phyconf.by==PHY_CONFBY_HW)
 8000a48:	793b      	ldrb	r3, [r7, #4]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d103      	bne.n	8000a56 <PrintPHYConf+0x1e>
	{
		printf("\r\nPHY Configured by Hardware Pins");
 8000a4e:	4814      	ldr	r0, [pc, #80]	@ (8000aa0 <PrintPHYConf+0x68>)
 8000a50:	f003 fcd8 	bl	8004404 <iprintf>
 8000a54:	e002      	b.n	8000a5c <PrintPHYConf+0x24>
	}
	else
	{
		printf("\r\nPHY Configured by Registers");
 8000a56:	4813      	ldr	r0, [pc, #76]	@ (8000aa4 <PrintPHYConf+0x6c>)
 8000a58:	f003 fcd4 	bl	8004404 <iprintf>
	}

	if(phyconf.mode==PHY_MODE_AUTONEGO)
 8000a5c:	797b      	ldrb	r3, [r7, #5]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d103      	bne.n	8000a6a <PrintPHYConf+0x32>
	{
		printf("\r\nAutonegotiation Enabled");
 8000a62:	4811      	ldr	r0, [pc, #68]	@ (8000aa8 <PrintPHYConf+0x70>)
 8000a64:	f003 fcce 	bl	8004404 <iprintf>
 8000a68:	e002      	b.n	8000a70 <PrintPHYConf+0x38>
	}
	else
	{
		printf("\r\nAutonegotiation NOT Enabled");
 8000a6a:	4810      	ldr	r0, [pc, #64]	@ (8000aac <PrintPHYConf+0x74>)
 8000a6c:	f003 fcca 	bl	8004404 <iprintf>
	}

	if(phyconf.duplex==PHY_DUPLEX_FULL)
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d103      	bne.n	8000a7e <PrintPHYConf+0x46>
	{
		printf("\r\nDuplex Mode: Full");
 8000a76:	480e      	ldr	r0, [pc, #56]	@ (8000ab0 <PrintPHYConf+0x78>)
 8000a78:	f003 fcc4 	bl	8004404 <iprintf>
 8000a7c:	e002      	b.n	8000a84 <PrintPHYConf+0x4c>
	}
	else
	{
		printf("\r\nDuplex Mode: Half");
 8000a7e:	480d      	ldr	r0, [pc, #52]	@ (8000ab4 <PrintPHYConf+0x7c>)
 8000a80:	f003 fcc0 	bl	8004404 <iprintf>
	}

	if(phyconf.speed==PHY_SPEED_10)
 8000a84:	79bb      	ldrb	r3, [r7, #6]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d103      	bne.n	8000a92 <PrintPHYConf+0x5a>
	{
		printf("\r\nSpeed: 10Mbps");
 8000a8a:	480b      	ldr	r0, [pc, #44]	@ (8000ab8 <PrintPHYConf+0x80>)
 8000a8c:	f003 fcba 	bl	8004404 <iprintf>
	}
	else
	{
		printf("\r\nSpeed: 100Mbps");
	}
}
 8000a90:	e002      	b.n	8000a98 <PrintPHYConf+0x60>
		printf("\r\nSpeed: 100Mbps");
 8000a92:	480a      	ldr	r0, [pc, #40]	@ (8000abc <PrintPHYConf+0x84>)
 8000a94:	f003 fcb6 	bl	8004404 <iprintf>
}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	080055f8 	.word	0x080055f8
 8000aa4:	0800561c 	.word	0x0800561c
 8000aa8:	0800563c 	.word	0x0800563c
 8000aac:	08005658 	.word	0x08005658
 8000ab0:	08005678 	.word	0x08005678
 8000ab4:	0800568c 	.word	0x0800568c
 8000ab8:	080056a0 	.word	0x080056a0
 8000abc:	080056b0 	.word	0x080056b0

08000ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <Error_Handler+0x8>

08000acc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000ad0:	4b17      	ldr	r3, [pc, #92]	@ (8000b30 <MX_SPI2_Init+0x64>)
 8000ad2:	4a18      	ldr	r2, [pc, #96]	@ (8000b34 <MX_SPI2_Init+0x68>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ad6:	4b16      	ldr	r3, [pc, #88]	@ (8000b30 <MX_SPI2_Init+0x64>)
 8000ad8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000adc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ade:	4b14      	ldr	r3, [pc, #80]	@ (8000b30 <MX_SPI2_Init+0x64>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <MX_SPI2_Init+0x64>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aea:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <MX_SPI2_Init+0x64>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <MX_SPI2_Init+0x64>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <MX_SPI2_Init+0x64>)
 8000af8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000afc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000afe:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <MX_SPI2_Init+0x64>)
 8000b00:	2208      	movs	r2, #8
 8000b02:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b04:	4b0a      	ldr	r3, [pc, #40]	@ (8000b30 <MX_SPI2_Init+0x64>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b0a:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <MX_SPI2_Init+0x64>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b10:	4b07      	ldr	r3, [pc, #28]	@ (8000b30 <MX_SPI2_Init+0x64>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b16:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <MX_SPI2_Init+0x64>)
 8000b18:	220a      	movs	r2, #10
 8000b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b1c:	4804      	ldr	r0, [pc, #16]	@ (8000b30 <MX_SPI2_Init+0x64>)
 8000b1e:	f003 f861 	bl	8003be4 <HAL_SPI_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000b28:	f7ff ffca 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	2000014c 	.word	0x2000014c
 8000b34:	40003800 	.word	0x40003800

08000b38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	@ 0x28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a30      	ldr	r2, [pc, #192]	@ (8000c18 <HAL_SPI_MspInit+0xe0>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d15a      	bne.n	8000c10 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000c1c <HAL_SPI_MspInit+0xe4>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b62:	4a2e      	ldr	r2, [pc, #184]	@ (8000c1c <HAL_SPI_MspInit+0xe4>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b6a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c1c <HAL_SPI_MspInit+0xe4>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b28      	ldr	r3, [pc, #160]	@ (8000c1c <HAL_SPI_MspInit+0xe4>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	4a27      	ldr	r2, [pc, #156]	@ (8000c1c <HAL_SPI_MspInit+0xe4>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b86:	4b25      	ldr	r3, [pc, #148]	@ (8000c1c <HAL_SPI_MspInit+0xe4>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	4b21      	ldr	r3, [pc, #132]	@ (8000c1c <HAL_SPI_MspInit+0xe4>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a20      	ldr	r2, [pc, #128]	@ (8000c1c <HAL_SPI_MspInit+0xe4>)
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c1c <HAL_SPI_MspInit+0xe4>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000bbe:	2307      	movs	r3, #7
 8000bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4815      	ldr	r0, [pc, #84]	@ (8000c20 <HAL_SPI_MspInit+0xe8>)
 8000bca:	f002 f875 	bl	8002cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bce:	2304      	movs	r3, #4
 8000bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bde:	2305      	movs	r3, #5
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	480d      	ldr	r0, [pc, #52]	@ (8000c20 <HAL_SPI_MspInit+0xe8>)
 8000bea:	f002 f865 	bl	8002cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c00:	2305      	movs	r3, #5
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4806      	ldr	r0, [pc, #24]	@ (8000c24 <HAL_SPI_MspInit+0xec>)
 8000c0c:	f002 f854 	bl	8002cb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	@ 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40003800 	.word	0x40003800
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020800 	.word	0x40020800
 8000c24:	40020400 	.word	0x40020400

08000c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	4b10      	ldr	r3, [pc, #64]	@ (8000c74 <HAL_MspInit+0x4c>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c36:	4a0f      	ldr	r2, [pc, #60]	@ (8000c74 <HAL_MspInit+0x4c>)
 8000c38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c74 <HAL_MspInit+0x4c>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	603b      	str	r3, [r7, #0]
 8000c4e:	4b09      	ldr	r3, [pc, #36]	@ (8000c74 <HAL_MspInit+0x4c>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c52:	4a08      	ldr	r2, [pc, #32]	@ (8000c74 <HAL_MspInit+0x4c>)
 8000c54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c5a:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <HAL_MspInit+0x4c>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c66:	2007      	movs	r0, #7
 8000c68:	f001 fff2 	bl	8002c50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40023800 	.word	0x40023800

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <NMI_Handler+0x4>

08000c80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <MemManage_Handler+0x4>

08000c90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <BusFault_Handler+0x4>

08000c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <UsageFault_Handler+0x4>

08000ca0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cce:	f001 fec9 	bl	8002a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b086      	sub	sp, #24
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	60f8      	str	r0, [r7, #12]
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
 8000ce6:	e00a      	b.n	8000cfe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ce8:	f3af 8000 	nop.w
 8000cec:	4601      	mov	r1, r0
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	1c5a      	adds	r2, r3, #1
 8000cf2:	60ba      	str	r2, [r7, #8]
 8000cf4:	b2ca      	uxtb	r2, r1
 8000cf6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	697a      	ldr	r2, [r7, #20]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	dbf0      	blt.n	8000ce8 <_read+0x12>
  }

  return len;
 8000d06:	687b      	ldr	r3, [r7, #4]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	e009      	b.n	8000d36 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	1c5a      	adds	r2, r3, #1
 8000d26:	60ba      	str	r2, [r7, #8]
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fe50 	bl	80009d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	3301      	adds	r3, #1
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	697a      	ldr	r2, [r7, #20]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	dbf1      	blt.n	8000d22 <_write+0x12>
  }
  return len;
 8000d3e:	687b      	ldr	r3, [r7, #4]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <_close>:

int _close(int file)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d70:	605a      	str	r2, [r3, #4]
  return 0;
 8000d72:	2300      	movs	r3, #0
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <_isatty>:

int _isatty(int file)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d88:	2301      	movs	r3, #1
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b085      	sub	sp, #20
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db8:	4a14      	ldr	r2, [pc, #80]	@ (8000e0c <_sbrk+0x5c>)
 8000dba:	4b15      	ldr	r3, [pc, #84]	@ (8000e10 <_sbrk+0x60>)
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc4:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d102      	bne.n	8000dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <_sbrk+0x64>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	@ (8000e18 <_sbrk+0x68>)
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd2:	4b10      	ldr	r3, [pc, #64]	@ (8000e14 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d207      	bcs.n	8000df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de0:	f003 fd62 	bl	80048a8 <__errno>
 8000de4:	4603      	mov	r3, r0
 8000de6:	220c      	movs	r2, #12
 8000de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	e009      	b.n	8000e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df0:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df6:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a05      	ldr	r2, [pc, #20]	@ (8000e14 <_sbrk+0x64>)
 8000e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20020000 	.word	0x20020000
 8000e10:	00000400 	.word	0x00000400
 8000e14:	200001a4 	.word	0x200001a4
 8000e18:	20000368 	.word	0x20000368

08000e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e20:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <SystemInit+0x20>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e26:	4a05      	ldr	r2, [pc, #20]	@ (8000e3c <SystemInit+0x20>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e44:	4b11      	ldr	r3, [pc, #68]	@ (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	@ (8000e90 <MX_USART2_UART_Init+0x50>)
 8000e48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e4a:	4b10      	ldr	r3, [pc, #64]	@ (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	@ (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e64:	4b09      	ldr	r3, [pc, #36]	@ (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e66:	220c      	movs	r2, #12
 8000e68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	@ (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e70:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e76:	4805      	ldr	r0, [pc, #20]	@ (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e78:	f002 ff3d 	bl	8003cf6 <HAL_UART_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e82:	f7ff fe1d 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200001a8 	.word	0x200001a8
 8000e90:	40004400 	.word	0x40004400

08000e94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	@ 0x28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a19      	ldr	r2, [pc, #100]	@ (8000f18 <HAL_UART_MspInit+0x84>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d12b      	bne.n	8000f0e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	4b18      	ldr	r3, [pc, #96]	@ (8000f1c <HAL_UART_MspInit+0x88>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	4a17      	ldr	r2, [pc, #92]	@ (8000f1c <HAL_UART_MspInit+0x88>)
 8000ec0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec6:	4b15      	ldr	r3, [pc, #84]	@ (8000f1c <HAL_UART_MspInit+0x88>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <HAL_UART_MspInit+0x88>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	4a10      	ldr	r2, [pc, #64]	@ (8000f1c <HAL_UART_MspInit+0x88>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <HAL_UART_MspInit+0x88>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000eee:	230c      	movs	r3, #12
 8000ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efa:	2303      	movs	r3, #3
 8000efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000efe:	2307      	movs	r3, #7
 8000f00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	4805      	ldr	r0, [pc, #20]	@ (8000f20 <HAL_UART_MspInit+0x8c>)
 8000f0a:	f001 fed5 	bl	8002cb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f0e:	bf00      	nop
 8000f10:	3728      	adds	r7, #40	@ 0x28
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40004400 	.word	0x40004400
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40020000 	.word	0x40020000

08000f24 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8000f2c:	4b22      	ldr	r3, [pc, #136]	@ (8000fb8 <WIZCHIP_READ+0x94>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000f32:	4b21      	ldr	r3, [pc, #132]	@ (8000fb8 <WIZCHIP_READ+0x94>)
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000f38:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb8 <WIZCHIP_READ+0x94>)
 8000f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <WIZCHIP_READ+0x24>
 8000f40:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb8 <WIZCHIP_READ+0x94>)
 8000f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d114      	bne.n	8000f72 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000f48:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb8 <WIZCHIP_READ+0x94>)
 8000f4a:	6a1b      	ldr	r3, [r3, #32]
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	0c12      	lsrs	r2, r2, #16
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	4610      	mov	r0, r2
 8000f54:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000f56:	4b18      	ldr	r3, [pc, #96]	@ (8000fb8 <WIZCHIP_READ+0x94>)
 8000f58:	6a1b      	ldr	r3, [r3, #32]
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	0a12      	lsrs	r2, r2, #8
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	4610      	mov	r0, r2
 8000f62:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000f64:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <WIZCHIP_READ+0x94>)
 8000f66:	6a1b      	ldr	r3, [r3, #32]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	4798      	blx	r3
 8000f70:	e011      	b.n	8000f96 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	0c1b      	lsrs	r3, r3, #16
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	0a1b      	lsrs	r3, r3, #8
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000f88:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <WIZCHIP_READ+0x94>)
 8000f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f8c:	f107 020c 	add.w	r2, r7, #12
 8000f90:	2103      	movs	r1, #3
 8000f92:	4610      	mov	r0, r2
 8000f94:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8000f96:	4b08      	ldr	r3, [pc, #32]	@ (8000fb8 <WIZCHIP_READ+0x94>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	4798      	blx	r3
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8000fa0:	4b05      	ldr	r3, [pc, #20]	@ (8000fb8 <WIZCHIP_READ+0x94>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000fa6:	4b04      	ldr	r3, [pc, #16]	@ (8000fb8 <WIZCHIP_READ+0x94>)
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	4798      	blx	r3
   return ret;
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000020 	.word	0x20000020

08000fbc <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8000fc8:	4b22      	ldr	r3, [pc, #136]	@ (8001054 <WIZCHIP_WRITE+0x98>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000fce:	4b21      	ldr	r3, [pc, #132]	@ (8001054 <WIZCHIP_WRITE+0x98>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f043 0304 	orr.w	r3, r3, #4
 8000fda:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8001054 <WIZCHIP_WRITE+0x98>)
 8000fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d119      	bne.n	8001018 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8001054 <WIZCHIP_WRITE+0x98>)
 8000fe6:	6a1b      	ldr	r3, [r3, #32]
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	0c12      	lsrs	r2, r2, #16
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	4610      	mov	r0, r2
 8000ff0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000ff2:	4b18      	ldr	r3, [pc, #96]	@ (8001054 <WIZCHIP_WRITE+0x98>)
 8000ff4:	6a1b      	ldr	r3, [r3, #32]
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	0a12      	lsrs	r2, r2, #8
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001000:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <WIZCHIP_WRITE+0x98>)
 8001002:	6a1b      	ldr	r3, [r3, #32]
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	4610      	mov	r0, r2
 800100a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 800100c:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <WIZCHIP_WRITE+0x98>)
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	78fa      	ldrb	r2, [r7, #3]
 8001012:	4610      	mov	r0, r2
 8001014:	4798      	blx	r3
 8001016:	e013      	b.n	8001040 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	0c1b      	lsrs	r3, r3, #16
 800101c:	b2db      	uxtb	r3, r3
 800101e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	0a1b      	lsrs	r3, r3, #8
 8001024:	b2db      	uxtb	r3, r3
 8001026:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001032:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <WIZCHIP_WRITE+0x98>)
 8001034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001036:	f107 020c 	add.w	r2, r7, #12
 800103a:	2104      	movs	r1, #4
 800103c:	4610      	mov	r0, r2
 800103e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001040:	4b04      	ldr	r3, [pc, #16]	@ (8001054 <WIZCHIP_WRITE+0x98>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001046:	4b03      	ldr	r3, [pc, #12]	@ (8001054 <WIZCHIP_WRITE+0x98>)
 8001048:	691b      	ldr	r3, [r3, #16]
 800104a:	4798      	blx	r3
}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000020 	.word	0x20000020

08001058 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b087      	sub	sp, #28
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	4613      	mov	r3, r2
 8001064:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001066:	4b2b      	ldr	r3, [pc, #172]	@ (8001114 <WIZCHIP_READ_BUF+0xbc>)
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800106c:	4b29      	ldr	r3, [pc, #164]	@ (8001114 <WIZCHIP_READ_BUF+0xbc>)
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001072:	4b28      	ldr	r3, [pc, #160]	@ (8001114 <WIZCHIP_READ_BUF+0xbc>)
 8001074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <WIZCHIP_READ_BUF+0x2a>
 800107a:	4b26      	ldr	r3, [pc, #152]	@ (8001114 <WIZCHIP_READ_BUF+0xbc>)
 800107c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800107e:	2b00      	cmp	r3, #0
 8001080:	d126      	bne.n	80010d0 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001082:	4b24      	ldr	r3, [pc, #144]	@ (8001114 <WIZCHIP_READ_BUF+0xbc>)
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	0c12      	lsrs	r2, r2, #16
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	4610      	mov	r0, r2
 800108e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001090:	4b20      	ldr	r3, [pc, #128]	@ (8001114 <WIZCHIP_READ_BUF+0xbc>)
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	0a12      	lsrs	r2, r2, #8
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	4610      	mov	r0, r2
 800109c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800109e:	4b1d      	ldr	r3, [pc, #116]	@ (8001114 <WIZCHIP_READ_BUF+0xbc>)
 80010a0:	6a1b      	ldr	r3, [r3, #32]
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	4610      	mov	r0, r2
 80010a8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	82fb      	strh	r3, [r7, #22]
 80010ae:	e00a      	b.n	80010c6 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80010b0:	4b18      	ldr	r3, [pc, #96]	@ (8001114 <WIZCHIP_READ_BUF+0xbc>)
 80010b2:	69db      	ldr	r3, [r3, #28]
 80010b4:	8afa      	ldrh	r2, [r7, #22]
 80010b6:	68b9      	ldr	r1, [r7, #8]
 80010b8:	188c      	adds	r4, r1, r2
 80010ba:	4798      	blx	r3
 80010bc:	4603      	mov	r3, r0
 80010be:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80010c0:	8afb      	ldrh	r3, [r7, #22]
 80010c2:	3301      	adds	r3, #1
 80010c4:	82fb      	strh	r3, [r7, #22]
 80010c6:	8afa      	ldrh	r2, [r7, #22]
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d3f0      	bcc.n	80010b0 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80010ce:	e017      	b.n	8001100 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	0c1b      	lsrs	r3, r3, #16
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	0a1b      	lsrs	r3, r3, #8
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80010e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <WIZCHIP_READ_BUF+0xbc>)
 80010e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ea:	f107 0210 	add.w	r2, r7, #16
 80010ee:	2103      	movs	r1, #3
 80010f0:	4610      	mov	r0, r2
 80010f2:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80010f4:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <WIZCHIP_READ_BUF+0xbc>)
 80010f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f8:	88fa      	ldrh	r2, [r7, #6]
 80010fa:	4611      	mov	r1, r2
 80010fc:	68b8      	ldr	r0, [r7, #8]
 80010fe:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001100:	4b04      	ldr	r3, [pc, #16]	@ (8001114 <WIZCHIP_READ_BUF+0xbc>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001106:	4b03      	ldr	r3, [pc, #12]	@ (8001114 <WIZCHIP_READ_BUF+0xbc>)
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	4798      	blx	r3
}
 800110c:	bf00      	nop
 800110e:	371c      	adds	r7, #28
 8001110:	46bd      	mov	sp, r7
 8001112:	bd90      	pop	{r4, r7, pc}
 8001114:	20000020 	.word	0x20000020

08001118 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	4613      	mov	r3, r2
 8001124:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001126:	4b2b      	ldr	r3, [pc, #172]	@ (80011d4 <WIZCHIP_WRITE_BUF+0xbc>)
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800112c:	4b29      	ldr	r3, [pc, #164]	@ (80011d4 <WIZCHIP_WRITE_BUF+0xbc>)
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800113a:	4b26      	ldr	r3, [pc, #152]	@ (80011d4 <WIZCHIP_WRITE_BUF+0xbc>)
 800113c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800113e:	2b00      	cmp	r3, #0
 8001140:	d126      	bne.n	8001190 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001142:	4b24      	ldr	r3, [pc, #144]	@ (80011d4 <WIZCHIP_WRITE_BUF+0xbc>)
 8001144:	6a1b      	ldr	r3, [r3, #32]
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	0c12      	lsrs	r2, r2, #16
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	4610      	mov	r0, r2
 800114e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001150:	4b20      	ldr	r3, [pc, #128]	@ (80011d4 <WIZCHIP_WRITE_BUF+0xbc>)
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	0a12      	lsrs	r2, r2, #8
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	4610      	mov	r0, r2
 800115c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800115e:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <WIZCHIP_WRITE_BUF+0xbc>)
 8001160:	6a1b      	ldr	r3, [r3, #32]
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	4610      	mov	r0, r2
 8001168:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800116a:	2300      	movs	r3, #0
 800116c:	82fb      	strh	r3, [r7, #22]
 800116e:	e00a      	b.n	8001186 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001170:	4b18      	ldr	r3, [pc, #96]	@ (80011d4 <WIZCHIP_WRITE_BUF+0xbc>)
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	8afa      	ldrh	r2, [r7, #22]
 8001176:	68b9      	ldr	r1, [r7, #8]
 8001178:	440a      	add	r2, r1
 800117a:	7812      	ldrb	r2, [r2, #0]
 800117c:	4610      	mov	r0, r2
 800117e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001180:	8afb      	ldrh	r3, [r7, #22]
 8001182:	3301      	adds	r3, #1
 8001184:	82fb      	strh	r3, [r7, #22]
 8001186:	8afa      	ldrh	r2, [r7, #22]
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	429a      	cmp	r2, r3
 800118c:	d3f0      	bcc.n	8001170 <WIZCHIP_WRITE_BUF+0x58>
 800118e:	e017      	b.n	80011c0 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	0c1b      	lsrs	r3, r3, #16
 8001194:	b2db      	uxtb	r3, r3
 8001196:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	0a1b      	lsrs	r3, r3, #8
 800119c:	b2db      	uxtb	r3, r3
 800119e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80011a6:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <WIZCHIP_WRITE_BUF+0xbc>)
 80011a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011aa:	f107 0210 	add.w	r2, r7, #16
 80011ae:	2103      	movs	r1, #3
 80011b0:	4610      	mov	r0, r2
 80011b2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80011b4:	4b07      	ldr	r3, [pc, #28]	@ (80011d4 <WIZCHIP_WRITE_BUF+0xbc>)
 80011b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011b8:	88fa      	ldrh	r2, [r7, #6]
 80011ba:	4611      	mov	r1, r2
 80011bc:	68b8      	ldr	r0, [r7, #8]
 80011be:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80011c0:	4b04      	ldr	r3, [pc, #16]	@ (80011d4 <WIZCHIP_WRITE_BUF+0xbc>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80011c6:	4b03      	ldr	r3, [pc, #12]	@ (80011d4 <WIZCHIP_WRITE_BUF+0xbc>)
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	4798      	blx	r3
}
 80011cc:	bf00      	nop
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000020 	.word	0x20000020

080011d8 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	81fb      	strh	r3, [r7, #14]
 80011e6:	2300      	movs	r3, #0
 80011e8:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	3301      	adds	r3, #1
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fe94 	bl	8000f24 <WIZCHIP_READ>
 80011fc:	4603      	mov	r3, r0
 80011fe:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001200:	89bb      	ldrh	r3, [r7, #12]
 8001202:	021b      	lsls	r3, r3, #8
 8001204:	b29c      	uxth	r4, r3
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	3301      	adds	r3, #1
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fe86 	bl	8000f24 <WIZCHIP_READ>
 8001218:	4603      	mov	r3, r0
 800121a:	4423      	add	r3, r4
 800121c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800121e:	89bb      	ldrh	r3, [r7, #12]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d019      	beq.n	8001258 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	3301      	adds	r3, #1
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fe77 	bl	8000f24 <WIZCHIP_READ>
 8001236:	4603      	mov	r3, r0
 8001238:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800123a:	89fb      	ldrh	r3, [r7, #14]
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	b29c      	uxth	r4, r3
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	3301      	adds	r3, #1
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fe69 	bl	8000f24 <WIZCHIP_READ>
 8001252:	4603      	mov	r3, r0
 8001254:	4423      	add	r3, r4
 8001256:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001258:	89fa      	ldrh	r2, [r7, #14]
 800125a:	89bb      	ldrh	r3, [r7, #12]
 800125c:	429a      	cmp	r2, r3
 800125e:	d1c4      	bne.n	80011ea <getSn_TX_FSR+0x12>
   return val;
 8001260:	89fb      	ldrh	r3, [r7, #14]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	bd90      	pop	{r4, r7, pc}

0800126a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800126a:	b590      	push	{r4, r7, lr}
 800126c:	b085      	sub	sp, #20
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001274:	2300      	movs	r3, #0
 8001276:	81fb      	strh	r3, [r7, #14]
 8001278:	2300      	movs	r3, #0
 800127a:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	3301      	adds	r3, #1
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fe4b 	bl	8000f24 <WIZCHIP_READ>
 800128e:	4603      	mov	r3, r0
 8001290:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001292:	89bb      	ldrh	r3, [r7, #12]
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	b29c      	uxth	r4, r3
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	3301      	adds	r3, #1
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fe3d 	bl	8000f24 <WIZCHIP_READ>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4423      	add	r3, r4
 80012ae:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80012b0:	89bb      	ldrh	r3, [r7, #12]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d019      	beq.n	80012ea <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	3301      	adds	r3, #1
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fe2e 	bl	8000f24 <WIZCHIP_READ>
 80012c8:	4603      	mov	r3, r0
 80012ca:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80012cc:	89fb      	ldrh	r3, [r7, #14]
 80012ce:	021b      	lsls	r3, r3, #8
 80012d0:	b29c      	uxth	r4, r3
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	3301      	adds	r3, #1
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fe20 	bl	8000f24 <WIZCHIP_READ>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4423      	add	r3, r4
 80012e8:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80012ea:	89fa      	ldrh	r2, [r7, #14]
 80012ec:	89bb      	ldrh	r3, [r7, #12]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d1c4      	bne.n	800127c <getSn_RX_RSR+0x12>
   return val;
 80012f2:	89fb      	ldrh	r3, [r7, #14]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd90      	pop	{r4, r7, pc}

080012fc <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	6039      	str	r1, [r7, #0]
 8001306:	71fb      	strb	r3, [r7, #7]
 8001308:	4613      	mov	r3, r2
 800130a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8001314:	88bb      	ldrh	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d046      	beq.n	80013a8 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	3301      	adds	r3, #1
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fdfc 	bl	8000f24 <WIZCHIP_READ>
 800132c:	4603      	mov	r3, r0
 800132e:	021b      	lsls	r3, r3, #8
 8001330:	b29c      	uxth	r4, r3
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	3301      	adds	r3, #1
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fdf0 	bl	8000f24 <WIZCHIP_READ>
 8001344:	4603      	mov	r3, r0
 8001346:	4423      	add	r3, r4
 8001348:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800134a:	89fb      	ldrh	r3, [r7, #14]
 800134c:	021a      	lsls	r2, r3, #8
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	3302      	adds	r3, #2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	4413      	add	r3, r2
 8001358:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 800135a:	88bb      	ldrh	r3, [r7, #4]
 800135c:	461a      	mov	r2, r3
 800135e:	6839      	ldr	r1, [r7, #0]
 8001360:	68b8      	ldr	r0, [r7, #8]
 8001362:	f7ff fed9 	bl	8001118 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8001366:	89fa      	ldrh	r2, [r7, #14]
 8001368:	88bb      	ldrh	r3, [r7, #4]
 800136a:	4413      	add	r3, r2
 800136c:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	3301      	adds	r3, #1
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 800137a:	461a      	mov	r2, r3
 800137c:	89fb      	ldrh	r3, [r7, #14]
 800137e:	0a1b      	lsrs	r3, r3, #8
 8001380:	b29b      	uxth	r3, r3
 8001382:	b2db      	uxtb	r3, r3
 8001384:	4619      	mov	r1, r3
 8001386:	4610      	mov	r0, r2
 8001388:	f7ff fe18 	bl	8000fbc <WIZCHIP_WRITE>
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	3301      	adds	r3, #1
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8001398:	461a      	mov	r2, r3
 800139a:	89fb      	ldrh	r3, [r7, #14]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	4619      	mov	r1, r3
 80013a0:	4610      	mov	r0, r2
 80013a2:	f7ff fe0b 	bl	8000fbc <WIZCHIP_WRITE>
 80013a6:	e000      	b.n	80013aa <wiz_send_data+0xae>
   if(len == 0)  return;
 80013a8:	bf00      	nop
}
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd90      	pop	{r4, r7, pc}

080013b0 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	6039      	str	r1, [r7, #0]
 80013ba:	71fb      	strb	r3, [r7, #7]
 80013bc:	4613      	mov	r3, r2
 80013be:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80013c8:	88bb      	ldrh	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d046      	beq.n	800145c <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	3301      	adds	r3, #1
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fda2 	bl	8000f24 <WIZCHIP_READ>
 80013e0:	4603      	mov	r3, r0
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b29c      	uxth	r4, r3
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	3301      	adds	r3, #1
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fd96 	bl	8000f24 <WIZCHIP_READ>
 80013f8:	4603      	mov	r3, r0
 80013fa:	4423      	add	r3, r4
 80013fc:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80013fe:	89fb      	ldrh	r3, [r7, #14]
 8001400:	021a      	lsls	r2, r3, #8
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	3303      	adds	r3, #3
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4413      	add	r3, r2
 800140c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800140e:	88bb      	ldrh	r3, [r7, #4]
 8001410:	461a      	mov	r2, r3
 8001412:	6839      	ldr	r1, [r7, #0]
 8001414:	68b8      	ldr	r0, [r7, #8]
 8001416:	f7ff fe1f 	bl	8001058 <WIZCHIP_READ_BUF>
   ptr += len;
 800141a:	89fa      	ldrh	r2, [r7, #14]
 800141c:	88bb      	ldrh	r3, [r7, #4]
 800141e:	4413      	add	r3, r2
 8001420:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	3301      	adds	r3, #1
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 800142e:	461a      	mov	r2, r3
 8001430:	89fb      	ldrh	r3, [r7, #14]
 8001432:	0a1b      	lsrs	r3, r3, #8
 8001434:	b29b      	uxth	r3, r3
 8001436:	b2db      	uxtb	r3, r3
 8001438:	4619      	mov	r1, r3
 800143a:	4610      	mov	r0, r2
 800143c:	f7ff fdbe 	bl	8000fbc <WIZCHIP_WRITE>
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	3301      	adds	r3, #1
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800144c:	461a      	mov	r2, r3
 800144e:	89fb      	ldrh	r3, [r7, #14]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	4619      	mov	r1, r3
 8001454:	4610      	mov	r0, r2
 8001456:	f7ff fdb1 	bl	8000fbc <WIZCHIP_WRITE>
 800145a:	e000      	b.n	800145e <wiz_recv_data+0xae>
   if(len == 0) return;
 800145c:	bf00      	nop
}
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	bd90      	pop	{r4, r7, pc}

08001464 <socket>:




int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{ 
 8001464:	b590      	push	{r4, r7, lr}
 8001466:	b089      	sub	sp, #36	@ 0x24
 8001468:	af00      	add	r7, sp, #0
 800146a:	4604      	mov	r4, r0
 800146c:	4608      	mov	r0, r1
 800146e:	4611      	mov	r1, r2
 8001470:	461a      	mov	r2, r3
 8001472:	4623      	mov	r3, r4
 8001474:	71fb      	strb	r3, [r7, #7]
 8001476:	4603      	mov	r3, r0
 8001478:	71bb      	strb	r3, [r7, #6]
 800147a:	460b      	mov	r3, r1
 800147c:	80bb      	strh	r3, [r7, #4]
 800147e:	4613      	mov	r3, r2
 8001480:	70fb      	strb	r3, [r7, #3]

   uint8_t taddr[16];
   uint16_t local_port=0;
 8001482:	2300      	movs	r3, #0
 8001484:	83fb      	strh	r3, [r7, #30]
   CHECK_SOCKNUM(); 
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	2b07      	cmp	r3, #7
 800148a:	d902      	bls.n	8001492 <socket+0x2e>
 800148c:	f04f 33ff 	mov.w	r3, #4294967295
 8001490:	e10d      	b.n	80016ae <socket+0x24a>
   switch (protocol & 0x0F)
 8001492:	79bb      	ldrb	r3, [r7, #6]
 8001494:	f003 030f 	and.w	r3, r3, #15
 8001498:	3b01      	subs	r3, #1
 800149a:	2b0d      	cmp	r3, #13
 800149c:	d82c      	bhi.n	80014f8 <socket+0x94>
 800149e:	a201      	add	r2, pc, #4	@ (adr r2, 80014a4 <socket+0x40>)
 80014a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a4:	080014dd 	.word	0x080014dd
 80014a8:	080014ff 	.word	0x080014ff
 80014ac:	080014ff 	.word	0x080014ff
 80014b0:	080014ff 	.word	0x080014ff
 80014b4:	080014f9 	.word	0x080014f9
 80014b8:	080014f9 	.word	0x080014f9
 80014bc:	080014f9 	.word	0x080014f9
 80014c0:	080014f9 	.word	0x080014f9
 80014c4:	080014f9 	.word	0x080014f9
 80014c8:	080014ff 	.word	0x080014ff
 80014cc:	080014ff 	.word	0x080014ff
 80014d0:	080014f9 	.word	0x080014f9
 80014d4:	080014f9 	.word	0x080014f9
 80014d8:	080014ff 	.word	0x080014ff
		    /*
            uint8_t taddr[4];
            getSIPR(taddr);
            */
            uint32_t taddr;
            getSIPR((uint8_t*)&taddr);
 80014dc:	f107 0308 	add.w	r3, r7, #8
 80014e0:	2204      	movs	r2, #4
 80014e2:	4619      	mov	r1, r3
 80014e4:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80014e8:	f7ff fdb6 	bl	8001058 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d107      	bne.n	8001502 <socket+0x9e>
 80014f2:	f06f 0302 	mvn.w	r3, #2
 80014f6:	e0da      	b.n	80016ae <socket+0x24a>
      #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
      #endif
      default :
        return SOCKERR_SOCKMODE;
 80014f8:	f06f 0304 	mvn.w	r3, #4
 80014fc:	e0d7      	b.n	80016ae <socket+0x24a>
         break; 
 80014fe:	bf00      	nop
 8001500:	e000      	b.n	8001504 <socket+0xa0>
            break;
 8001502:	bf00      	nop
   } 
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001504:	78fb      	ldrb	r3, [r7, #3]
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	2b00      	cmp	r3, #0
 800150c:	d002      	beq.n	8001514 <socket+0xb0>
 800150e:	f06f 0305 	mvn.w	r3, #5
 8001512:	e0cc      	b.n	80016ae <socket+0x24a>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
   if(flag != 0)
 8001514:	78fb      	ldrb	r3, [r7, #3]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d028      	beq.n	800156c <socket+0x108>
   {
      switch(protocol)
 800151a:	79bb      	ldrb	r3, [r7, #6]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d002      	beq.n	8001526 <socket+0xc2>
 8001520:	2b02      	cmp	r3, #2
 8001522:	d008      	beq.n	8001536 <socket+0xd2>
         break;

#endif 

         default:
            break;
 8001524:	e022      	b.n	800156c <socket+0x108>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8001526:	78fb      	ldrb	r3, [r7, #3]
 8001528:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800152c:	2b00      	cmp	r3, #0
 800152e:	d11a      	bne.n	8001566 <socket+0x102>
 8001530:	f06f 0305 	mvn.w	r3, #5
 8001534:	e0bb      	b.n	80016ae <socket+0x24a>
   	      if(flag & SF_IGMP_VER2)
 8001536:	78fb      	ldrb	r3, [r7, #3]
 8001538:	f003 0320 	and.w	r3, r3, #32
 800153c:	2b00      	cmp	r3, #0
 800153e:	d006      	beq.n	800154e <socket+0xea>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001540:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001544:	2b00      	cmp	r3, #0
 8001546:	db02      	blt.n	800154e <socket+0xea>
 8001548:	f06f 0305 	mvn.w	r3, #5
 800154c:	e0af      	b.n	80016ae <socket+0x24a>
      	      if(flag & SF_UNI_BLOCK)
 800154e:	78fb      	ldrb	r3, [r7, #3]
 8001550:	f003 0310 	and.w	r3, r3, #16
 8001554:	2b00      	cmp	r3, #0
 8001556:	d008      	beq.n	800156a <socket+0x106>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8001558:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800155c:	2b00      	cmp	r3, #0
 800155e:	db04      	blt.n	800156a <socket+0x106>
 8001560:	f06f 0305 	mvn.w	r3, #5
 8001564:	e0a3      	b.n	80016ae <socket+0x24a>
   	      break;
 8001566:	bf00      	nop
 8001568:	e000      	b.n	800156c <socket+0x108>
         break;
 800156a:	bf00      	nop
      }
   }
   close(sn);
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	4618      	mov	r0, r3
 8001570:	f000 f8ac 	bl	80016cc <close>
	//M20150601
#if _WIZCHIP_ == 5300   
   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
#else
   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	3301      	adds	r3, #1
 800157a:	00d8      	lsls	r0, r3, #3
 800157c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001580:	f023 030f 	bic.w	r3, r3, #15
 8001584:	b25a      	sxtb	r2, r3
 8001586:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800158a:	4313      	orrs	r3, r2
 800158c:	b25b      	sxtb	r3, r3
 800158e:	b2db      	uxtb	r3, r3
 8001590:	4619      	mov	r1, r3
 8001592:	f7ff fd13 	bl	8000fbc <WIZCHIP_WRITE>
#endif
#ifdef IPV6_AVAILABLE
   setSn_MR2(sn, flag & 0x03);  
#endif 
   if(!port)
 8001596:	88bb      	ldrh	r3, [r7, #4]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d110      	bne.n	80015be <socket+0x15a>
   {
      port = sock_any_port++;
 800159c:	4b46      	ldr	r3, [pc, #280]	@ (80016b8 <socket+0x254>)
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	1c5a      	adds	r2, r3, #1
 80015a2:	b291      	uxth	r1, r2
 80015a4:	4a44      	ldr	r2, [pc, #272]	@ (80016b8 <socket+0x254>)
 80015a6:	8011      	strh	r1, [r2, #0]
 80015a8:	80bb      	strh	r3, [r7, #4]
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80015aa:	4b43      	ldr	r3, [pc, #268]	@ (80016b8 <socket+0x254>)
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d103      	bne.n	80015be <socket+0x15a>
 80015b6:	4b40      	ldr	r3, [pc, #256]	@ (80016b8 <socket+0x254>)
 80015b8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80015bc:	801a      	strh	r2, [r3, #0]
   }
   setSn_PORTR(sn,port);
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	3301      	adds	r3, #1
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80015ca:	461a      	mov	r2, r3
 80015cc:	88bb      	ldrh	r3, [r7, #4]
 80015ce:	0a1b      	lsrs	r3, r3, #8
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	4619      	mov	r1, r3
 80015d6:	4610      	mov	r0, r2
 80015d8:	f7ff fcf0 	bl	8000fbc <WIZCHIP_WRITE>
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	3301      	adds	r3, #1
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80015e8:	461a      	mov	r2, r3
 80015ea:	88bb      	ldrh	r3, [r7, #4]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	4619      	mov	r1, r3
 80015f0:	4610      	mov	r0, r2
 80015f2:	f7ff fce3 	bl	8000fbc <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	3301      	adds	r3, #1
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001602:	2101      	movs	r1, #1
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fcd9 	bl	8000fbc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800160a:	bf00      	nop
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	3301      	adds	r3, #1
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fc83 	bl	8000f24 <WIZCHIP_READ>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1f3      	bne.n	800160c <socket+0x1a8>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	2201      	movs	r2, #1
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	b21b      	sxth	r3, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	b21a      	sxth	r2, r3
 8001632:	4b22      	ldr	r3, [pc, #136]	@ (80016bc <socket+0x258>)
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	b21b      	sxth	r3, r3
 8001638:	4013      	ands	r3, r2
 800163a:	b21b      	sxth	r3, r3
 800163c:	b29a      	uxth	r2, r3
 800163e:	4b1f      	ldr	r3, [pc, #124]	@ (80016bc <socket+0x258>)
 8001640:	801a      	strh	r2, [r3, #0]
   //
#ifndef IPV6_AVAILABLE
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001642:	78fb      	ldrb	r3, [r7, #3]
 8001644:	f003 0201 	and.w	r2, r3, #1
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	b21a      	sxth	r2, r3
 8001650:	4b1a      	ldr	r3, [pc, #104]	@ (80016bc <socket+0x258>)
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	b21b      	sxth	r3, r3
 8001656:	4313      	orrs	r3, r2
 8001658:	b21b      	sxth	r3, r3
 800165a:	b29a      	uxth	r2, r3
 800165c:	4b17      	ldr	r3, [pc, #92]	@ (80016bc <socket+0x258>)
 800165e:	801a      	strh	r2, [r3, #0]
#else
   sock_io_mode |= ((flag & (SF_IO_NONBLOCK>>3)) << sn);
#endif
   sock_is_sending &= ~(1<<sn);
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	2201      	movs	r2, #1
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	b21b      	sxth	r3, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	b21a      	sxth	r2, r3
 800166e:	4b14      	ldr	r3, [pc, #80]	@ (80016c0 <socket+0x25c>)
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	b21b      	sxth	r3, r3
 8001674:	4013      	ands	r3, r2
 8001676:	b21b      	sxth	r3, r3
 8001678:	b29a      	uxth	r2, r3
 800167a:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <socket+0x25c>)
 800167c:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	4a10      	ldr	r2, [pc, #64]	@ (80016c4 <socket+0x260>)
 8001682:	2100      	movs	r1, #0
 8001684:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;//PACK_COMPLETED //TODO::need verify:LINAN 20250421
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	4a0f      	ldr	r2, [pc, #60]	@ (80016c8 <socket+0x264>)
 800168c:	2100      	movs	r1, #0
 800168e:	54d1      	strb	r1, [r2, r3]
  //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001690:	bf00      	nop
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	3301      	adds	r3, #1
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fc40 	bl	8000f24 <WIZCHIP_READ>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f3      	beq.n	8001692 <socket+0x22e>
   return (int8_t)sn;
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
}  
 80016ae:	4618      	mov	r0, r3
 80016b0:	3724      	adds	r7, #36	@ 0x24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd90      	pop	{r4, r7, pc}
 80016b6:	bf00      	nop
 80016b8:	2000001c 	.word	0x2000001c
 80016bc:	200001f0 	.word	0x200001f0
 80016c0:	200001f2 	.word	0x200001f2
 80016c4:	200001f4 	.word	0x200001f4
 80016c8:	20000204 	.word	0x20000204

080016cc <close>:

int8_t close(uint8_t sn)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	2b07      	cmp	r3, #7
 80016da:	d902      	bls.n	80016e2 <close+0x16>
 80016dc:	f04f 33ff 	mov.w	r3, #4294967295
 80016e0:	e055      	b.n	800178e <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
   setSn_CR(sn,Sn_CR_CLOSE);
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	3301      	adds	r3, #1
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80016ee:	2110      	movs	r1, #16
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fc63 	bl	8000fbc <WIZCHIP_WRITE>
   /* wait to process the command... */
   while( getSn_CR(sn) );
 80016f6:	bf00      	nop
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	3301      	adds	r3, #1
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fc0d 	bl	8000f24 <WIZCHIP_READ>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1f3      	bne.n	80016f8 <close+0x2c>
   /* clear all interrupt of SOCKETn. */
   setSn_IR(sn, 0xFF);  	
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	3301      	adds	r3, #1
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800171c:	211f      	movs	r1, #31
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fc4c 	bl	8000fbc <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
   sock_io_mode &= ~(1<<sn); 
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	2201      	movs	r2, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	b21b      	sxth	r3, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	b21a      	sxth	r2, r3
 8001732:	4b19      	ldr	r3, [pc, #100]	@ (8001798 <close+0xcc>)
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	b21b      	sxth	r3, r3
 8001738:	4013      	ands	r3, r2
 800173a:	b21b      	sxth	r3, r3
 800173c:	b29a      	uxth	r2, r3
 800173e:	4b16      	ldr	r3, [pc, #88]	@ (8001798 <close+0xcc>)
 8001740:	801a      	strh	r2, [r3, #0]
	//
   sock_is_sending &= ~(1<<sn);
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	2201      	movs	r2, #1
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	b21b      	sxth	r3, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	b21a      	sxth	r2, r3
 8001750:	4b12      	ldr	r3, [pc, #72]	@ (800179c <close+0xd0>)
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	b21b      	sxth	r3, r3
 8001756:	4013      	ands	r3, r2
 8001758:	b21b      	sxth	r3, r3
 800175a:	b29a      	uxth	r2, r3
 800175c:	4b0f      	ldr	r3, [pc, #60]	@ (800179c <close+0xd0>)
 800175e:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	4a0f      	ldr	r2, [pc, #60]	@ (80017a0 <close+0xd4>)
 8001764:	2100      	movs	r1, #0
 8001766:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_pack_info[sn] = PACK_NONE;
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	4a0d      	ldr	r2, [pc, #52]	@ (80017a4 <close+0xd8>)
 800176e:	2100      	movs	r1, #0
 8001770:	54d1      	strb	r1, [r2, r3]
   while(getSn_SR(sn) != SOCK_CLOSED);
 8001772:	bf00      	nop
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	3301      	adds	r3, #1
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fbcf 	bl	8000f24 <WIZCHIP_READ>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1f3      	bne.n	8001774 <close+0xa8>
   return SOCK_OK;
 800178c:	2301      	movs	r3, #1
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200001f0 	.word	0x200001f0
 800179c:	200001f2 	.word	0x200001f2
 80017a0:	200001f4 	.word	0x200001f4
 80017a4:	20000204 	.word	0x20000204

080017a8 <listen>:

int8_t listen(uint8_t sn)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	2b07      	cmp	r3, #7
 80017b6:	d902      	bls.n	80017be <listen+0x16>
 80017b8:	f04f 33ff 	mov.w	r3, #4294967295
 80017bc:	e049      	b.n	8001852 <listen+0xaa>
   CHECK_TCPMODE(); 
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	3301      	adds	r3, #1
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fbac 	bl	8000f24 <WIZCHIP_READ>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d002      	beq.n	80017dc <listen+0x34>
 80017d6:	f06f 0304 	mvn.w	r3, #4
 80017da:	e03a      	b.n	8001852 <listen+0xaa>
   CHECK_SOCKINIT();
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	3301      	adds	r3, #1
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fb9b 	bl	8000f24 <WIZCHIP_READ>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b13      	cmp	r3, #19
 80017f2:	d002      	beq.n	80017fa <listen+0x52>
 80017f4:	f06f 0302 	mvn.w	r3, #2
 80017f8:	e02b      	b.n	8001852 <listen+0xaa>
   setSn_CR(sn,Sn_CR_LISTEN);
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	3301      	adds	r3, #1
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001806:	2102      	movs	r1, #2
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fbd7 	bl	8000fbc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800180e:	bf00      	nop
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	3301      	adds	r3, #1
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fb81 	bl	8000f24 <WIZCHIP_READ>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1f3      	bne.n	8001810 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8001828:	e006      	b.n	8001838 <listen+0x90>
   {
      close(sn);
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff4d 	bl	80016cc <close>
      return SOCKERR_SOCKCLOSED;
 8001832:	f06f 0303 	mvn.w	r3, #3
 8001836:	e00c      	b.n	8001852 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	3301      	adds	r3, #1
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fb6d 	bl	8000f24 <WIZCHIP_READ>
 800184a:	4603      	mov	r3, r0
 800184c:	2b14      	cmp	r3, #20
 800184e:	d1ec      	bne.n	800182a <listen+0x82>
   }
   return SOCK_OK;
 8001850:	2301      	movs	r3, #1
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	2b07      	cmp	r3, #7
 800186a:	d902      	bls.n	8001872 <disconnect+0x16>
 800186c:	f04f 33ff 	mov.w	r3, #4294967295
 8001870:	e06e      	b.n	8001950 <disconnect+0xf4>
   CHECK_TCPMODE();
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	3301      	adds	r3, #1
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fb52 	bl	8000f24 <WIZCHIP_READ>
 8001880:	4603      	mov	r3, r0
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	2b01      	cmp	r3, #1
 8001888:	d002      	beq.n	8001890 <disconnect+0x34>
 800188a:	f06f 0304 	mvn.w	r3, #4
 800188e:	e05f      	b.n	8001950 <disconnect+0xf4>
   if(getSn_SR(sn) != SOCK_CLOSED)
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	3301      	adds	r3, #1
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fb41 	bl	8000f24 <WIZCHIP_READ>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d052      	beq.n	800194e <disconnect+0xf2>
   {
      setSn_CR(sn,Sn_CR_DISCON);
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	3301      	adds	r3, #1
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80018b4:	2108      	movs	r1, #8
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fb80 	bl	8000fbc <WIZCHIP_WRITE>
      /* wait to process the command... */
      while(getSn_CR(sn));
 80018bc:	bf00      	nop
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	3301      	adds	r3, #1
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fb2a 	bl	8000f24 <WIZCHIP_READ>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f3      	bne.n	80018be <disconnect+0x62>
	   sock_is_sending &= ~(1<<sn);
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	2201      	movs	r2, #1
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	b21b      	sxth	r3, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	b21a      	sxth	r2, r3
 80018e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001958 <disconnect+0xfc>)
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	b21b      	sxth	r3, r3
 80018ea:	4013      	ands	r3, r2
 80018ec:	b21b      	sxth	r3, r3
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	4b19      	ldr	r3, [pc, #100]	@ (8001958 <disconnect+0xfc>)
 80018f2:	801a      	strh	r2, [r3, #0]
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80018f4:	4b19      	ldr	r3, [pc, #100]	@ (800195c <disconnect+0x100>)
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	fa42 f303 	asr.w	r3, r2, r3
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d016      	beq.n	8001936 <disconnect+0xda>
 8001908:	2300      	movs	r3, #0
 800190a:	e021      	b.n	8001950 <disconnect+0xf4>
      while(getSn_SR(sn) != SOCK_CLOSED)
      {
         if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	3301      	adds	r3, #1
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fb03 	bl	8000f24 <WIZCHIP_READ>
 800191e:	4603      	mov	r3, r0
 8001920:	f003 0308 	and.w	r3, r3, #8
 8001924:	2b00      	cmp	r3, #0
 8001926:	d006      	beq.n	8001936 <disconnect+0xda>
         {
            close(sn);
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fece 	bl	80016cc <close>
            return SOCKERR_TIMEOUT;
 8001930:	f06f 030c 	mvn.w	r3, #12
 8001934:	e00c      	b.n	8001950 <disconnect+0xf4>
      while(getSn_SR(sn) != SOCK_CLOSED)
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	3301      	adds	r3, #1
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff faee 	bl	8000f24 <WIZCHIP_READ>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1de      	bne.n	800190c <disconnect+0xb0>
         }
      }
   }
   return SOCK_OK;
 800194e:	2301      	movs	r3, #1
}
 8001950:	4618      	mov	r0, r3
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	200001f2 	.word	0x200001f2
 800195c:	200001f0 	.word	0x200001f0

08001960 <send>:


#if 1
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	6039      	str	r1, [r7, #0]
 800196a:	71fb      	strb	r3, [r7, #7]
 800196c:	4613      	mov	r3, r2
 800196e:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8001970:	2300      	movs	r3, #0
 8001972:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8001974:	2300      	movs	r3, #0
 8001976:	81bb      	strh	r3, [r7, #12]
    */
   //CHECK_SOCKNUM();
   //CHECK_TCPMODE(Sn_MR_TCP4);
   /************/
#ifndef IPV6_AVAILABLE
   CHECK_SOCKNUM();
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	2b07      	cmp	r3, #7
 800197c:	d902      	bls.n	8001984 <send+0x24>
 800197e:	f04f 33ff 	mov.w	r3, #4294967295
 8001982:	e138      	b.n	8001bf6 <send+0x296>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	3301      	adds	r3, #1
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fac9 	bl	8000f24 <WIZCHIP_READ>
 8001992:	4603      	mov	r3, r0
 8001994:	f003 030f 	and.w	r3, r3, #15
 8001998:	2b01      	cmp	r3, #1
 800199a:	d002      	beq.n	80019a2 <send+0x42>
 800199c:	f06f 0304 	mvn.w	r3, #4
 80019a0:	e129      	b.n	8001bf6 <send+0x296>
   CHECK_SOCKDATA();
 80019a2:	88bb      	ldrh	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <send+0x4e>
 80019a8:	f06f 030d 	mvn.w	r3, #13
 80019ac:	e123      	b.n	8001bf6 <send+0x296>
   tmp = getSn_SR(sn);
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	3301      	adds	r3, #1
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fab2 	bl	8000f24 <WIZCHIP_READ>
 80019c0:	4603      	mov	r3, r0
 80019c2:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	2b17      	cmp	r3, #23
 80019c8:	d005      	beq.n	80019d6 <send+0x76>
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	2b1c      	cmp	r3, #28
 80019ce:	d002      	beq.n	80019d6 <send+0x76>
 80019d0:	f06f 0306 	mvn.w	r3, #6
 80019d4:	e10f      	b.n	8001bf6 <send+0x296>
   if( sock_is_sending & (1<<sn) )
 80019d6:	4b8a      	ldr	r3, [pc, #552]	@ (8001c00 <send+0x2a0>)
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	fa42 f303 	asr.w	r3, r2, r3
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d039      	beq.n	8001a5e <send+0xfe>
   {
      tmp = getSn_IR(sn);
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	3301      	adds	r3, #1
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fa94 	bl	8000f24 <WIZCHIP_READ>
 80019fc:	4603      	mov	r3, r0
 80019fe:	f003 031f 	and.w	r3, r3, #31
 8001a02:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	f003 0310 	and.w	r3, r3, #16
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d019      	beq.n	8001a42 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	3301      	adds	r3, #1
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001a1a:	2110      	movs	r1, #16
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff facd 	bl	8000fbc <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2201      	movs	r2, #1
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	b21b      	sxth	r3, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	b21a      	sxth	r2, r3
 8001a30:	4b73      	ldr	r3, [pc, #460]	@ (8001c00 <send+0x2a0>)
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	b21b      	sxth	r3, r3
 8001a36:	4013      	ands	r3, r2
 8001a38:	b21b      	sxth	r3, r3
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	4b70      	ldr	r3, [pc, #448]	@ (8001c00 <send+0x2a0>)
 8001a3e:	801a      	strh	r2, [r3, #0]
 8001a40:	e00d      	b.n	8001a5e <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d006      	beq.n	8001a5a <send+0xfa>
      {
         close(sn);
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fe3c 	bl	80016cc <close>
         return SOCKERR_TIMEOUT;
 8001a54:	f06f 030c 	mvn.w	r3, #12
 8001a58:	e0cd      	b.n	8001bf6 <send+0x296>
      }
      else return SOCK_BUSY;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e0cb      	b.n	8001bf6 <send+0x296>
   }
#endif 
   freesize = getSn_TxMAX(sn);
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	3301      	adds	r3, #1
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fa5a 	bl	8000f24 <WIZCHIP_READ>
 8001a70:	4603      	mov	r3, r0
 8001a72:	029b      	lsls	r3, r3, #10
 8001a74:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001a76:	88ba      	ldrh	r2, [r7, #4]
 8001a78:	89bb      	ldrh	r3, [r7, #12]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d901      	bls.n	8001a82 <send+0x122>
 8001a7e:	89bb      	ldrh	r3, [r7, #12]
 8001a80:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = (uint16_t)getSn_TX_FSR(sn);
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fba7 	bl	80011d8 <getSn_TX_FSR>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	3301      	adds	r3, #1
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fa42 	bl	8000f24 <WIZCHIP_READ>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	2b17      	cmp	r3, #23
 8001aa8:	d00c      	beq.n	8001ac4 <send+0x164>
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	2b1c      	cmp	r3, #28
 8001aae:	d009      	beq.n	8001ac4 <send+0x164>
      {
         if(tmp == SOCK_CLOSED) close(sn);
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d103      	bne.n	8001abe <send+0x15e>
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fe07 	bl	80016cc <close>
         return SOCKERR_SOCKSTATUS;
 8001abe:	f06f 0306 	mvn.w	r3, #6
 8001ac2:	e098      	b.n	8001bf6 <send+0x296>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY; //TODO::need verify:LINAN 20250421
 8001ac4:	4b4f      	ldr	r3, [pc, #316]	@ (8001c04 <send+0x2a4>)
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	fa42 f303 	asr.w	r3, r2, r3
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <send+0x184>
 8001ad8:	88ba      	ldrh	r2, [r7, #4]
 8001ada:	89bb      	ldrh	r3, [r7, #12]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d901      	bls.n	8001ae4 <send+0x184>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	e088      	b.n	8001bf6 <send+0x296>
     // if( sock_io_mode & (1<<sn) ) return SOCK_BUSY;  //TODO::need verify:LINAN 20250421
      if(len <= freesize) break;
 8001ae4:	88ba      	ldrh	r2, [r7, #4]
 8001ae6:	89bb      	ldrh	r3, [r7, #12]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d900      	bls.n	8001aee <send+0x18e>
      freesize = (uint16_t)getSn_TX_FSR(sn);
 8001aec:	e7c9      	b.n	8001a82 <send+0x122>
      if(len <= freesize) break;
 8001aee:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8001af0:	88ba      	ldrh	r2, [r7, #4]
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	6839      	ldr	r1, [r7, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fc00 	bl	80012fc <wiz_send_data>
#endif

#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn,len);
#endif
   if(sock_is_sending & (1<<sn))
 8001afc:	4b40      	ldr	r3, [pc, #256]	@ (8001c00 <send+0x2a0>)
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	fa42 f303 	asr.w	r3, r2, r3
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d04d      	beq.n	8001bac <send+0x24c>
   {
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 8001b10:	e034      	b.n	8001b7c <send+0x21c>
      {    
         tmp = getSn_SR(sn);
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	3301      	adds	r3, #1
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fa00 	bl	8000f24 <WIZCHIP_READ>
 8001b24:	4603      	mov	r3, r0
 8001b26:	73fb      	strb	r3, [r7, #15]
         if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT) )
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	2b17      	cmp	r3, #23
 8001b2c:	d01a      	beq.n	8001b64 <send+0x204>
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
 8001b30:	2b1c      	cmp	r3, #28
 8001b32:	d017      	beq.n	8001b64 <send+0x204>
         {
            if( (tmp == SOCK_CLOSED) || (getSn_IR(sn) & Sn_IR_TIMEOUT) ) close(sn);
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00d      	beq.n	8001b56 <send+0x1f6>
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	3301      	adds	r3, #1
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff f9ec 	bl	8000f24 <WIZCHIP_READ>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <send+0x1fe>
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fdb7 	bl	80016cc <close>
            return SOCKERR_SOCKSTATUS;
 8001b5e:	f06f 0306 	mvn.w	r3, #6
 8001b62:	e048      	b.n	8001bf6 <send+0x296>
         }
         if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001b64:	4b27      	ldr	r3, [pc, #156]	@ (8001c04 <send+0x2a4>)
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	fa42 f303 	asr.w	r3, r2, r3
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <send+0x21c>
 8001b78:	2300      	movs	r3, #0
 8001b7a:	e03c      	b.n	8001bf6 <send+0x296>
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	3301      	adds	r3, #1
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff f9cb 	bl	8000f24 <WIZCHIP_READ>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f003 0310 	and.w	r3, r3, #16
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0bc      	beq.n	8001b12 <send+0x1b2>
      } 
      setSn_IR(sn, Sn_IR_SENDOK);
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001ba4:	2110      	movs	r1, #16
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fa08 	bl	8000fbc <WIZCHIP_WRITE>
   }
   setSn_CR(sn,Sn_CR_SEND);
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001bb8:	2120      	movs	r1, #32
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff f9fe 	bl	8000fbc <WIZCHIP_WRITE>
 
   while(getSn_CR(sn));   // wait to process the command...
 8001bc0:	bf00      	nop
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff f9a8 	bl	8000f24 <WIZCHIP_READ>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f3      	bne.n	8001bc2 <send+0x262>
   sock_is_sending |= (1<<sn);
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	b21a      	sxth	r2, r3
 8001be4:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <send+0x2a0>)
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	b21b      	sxth	r3, r3
 8001bea:	4313      	orrs	r3, r2
 8001bec:	b21b      	sxth	r3, r3
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	4b03      	ldr	r3, [pc, #12]	@ (8001c00 <send+0x2a0>)
 8001bf2:	801a      	strh	r2, [r3, #0]
 
   return len;
 8001bf4:	88bb      	ldrh	r3, [r7, #4]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200001f2 	.word	0x200001f2
 8001c04:	200001f0 	.word	0x200001f0

08001c08 <recv>:
 
   return len;
}
#endif 
int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)//lihan
{
 8001c08:	b590      	push	{r4, r7, lr}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	6039      	str	r1, [r7, #0]
 8001c12:	71fb      	strb	r3, [r7, #7]
 8001c14:	4613      	mov	r3, r2
 8001c16:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	2b07      	cmp	r3, #7
 8001c24:	d902      	bls.n	8001c2c <recv+0x24>
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2a:	e098      	b.n	8001d5e <recv+0x156>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	3301      	adds	r3, #1
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff f975 	bl	8000f24 <WIZCHIP_READ>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	f003 030f 	and.w	r3, r3, #15
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d002      	beq.n	8001c4a <recv+0x42>
 8001c44:	f06f 0304 	mvn.w	r3, #4
 8001c48:	e089      	b.n	8001d5e <recv+0x156>
   CHECK_SOCKDATA();
 8001c4a:	88bb      	ldrh	r3, [r7, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d102      	bne.n	8001c56 <recv+0x4e>
 8001c50:	f06f 030d 	mvn.w	r3, #13
 8001c54:	e083      	b.n	8001d5e <recv+0x156>
   
   recvsize = getSn_RxMAX(sn); 
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff f95e 	bl	8000f24 <WIZCHIP_READ>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	029b      	lsls	r3, r3, #10
 8001c6c:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8001c6e:	89ba      	ldrh	r2, [r7, #12]
 8001c70:	88bb      	ldrh	r3, [r7, #4]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d201      	bcs.n	8001c7a <recv+0x72>
 8001c76:	89bb      	ldrh	r3, [r7, #12]
 8001c78:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
   while(1)
   {
      recvsize = (uint16_t)getSn_RX_RSR(sn);
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff faf4 	bl	800126a <getSn_RX_RSR>
 8001c82:	4603      	mov	r3, r0
 8001c84:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff f946 	bl	8000f24 <WIZCHIP_READ>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	73fb      	strb	r3, [r7, #15]
      if (tmp != SOCK_ESTABLISHED)
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	2b17      	cmp	r3, #23
 8001ca0:	d026      	beq.n	8001cf0 <recv+0xe8>
      {
         if(tmp == SOCK_CLOSE_WAIT)
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
 8001ca4:	2b1c      	cmp	r3, #28
 8001ca6:	d11c      	bne.n	8001ce2 <recv+0xda>
         {
            if(recvsize != 0) break;
 8001ca8:	89bb      	ldrh	r3, [r7, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d130      	bne.n	8001d10 <recv+0x108>
            else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fa91 	bl	80011d8 <getSn_TX_FSR>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	461c      	mov	r4, r3
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff f92c 	bl	8000f24 <WIZCHIP_READ>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	029b      	lsls	r3, r3, #10
 8001cd0:	429c      	cmp	r4, r3
 8001cd2:	d10d      	bne.n	8001cf0 <recv+0xe8>
            {
               close(sn);
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fcf8 	bl	80016cc <close>
               return SOCKERR_SOCKSTATUS;
 8001cdc:	f06f 0306 	mvn.w	r3, #6
 8001ce0:	e03d      	b.n	8001d5e <recv+0x156>
            }
         }
         else
         {
            close(sn);
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff fcf1 	bl	80016cc <close>
            return SOCKERR_SOCKSTATUS;
 8001cea:	f06f 0306 	mvn.w	r3, #6
 8001cee:	e036      	b.n	8001d5e <recv+0x156>
      }
#ifdef IPV6_AVAILABLE
      if(recvsize != 0) break;
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
#else
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d68 <recv+0x160>)
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	fa42 f303 	asr.w	r3, r2, r3
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <recv+0x100>
 8001d04:	2300      	movs	r3, #0
 8001d06:	e02a      	b.n	8001d5e <recv+0x156>
      if(recvsize != 0) break;
 8001d08:	89bb      	ldrh	r3, [r7, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d102      	bne.n	8001d14 <recv+0x10c>
      recvsize = (uint16_t)getSn_RX_RSR(sn);
 8001d0e:	e7b4      	b.n	8001c7a <recv+0x72>
            if(recvsize != 0) break;
 8001d10:	bf00      	nop
 8001d12:	e000      	b.n	8001d16 <recv+0x10e>
      if(recvsize != 0) break;
 8001d14:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;
 8001d16:	89ba      	ldrh	r2, [r7, #12]
 8001d18:	88bb      	ldrh	r3, [r7, #4]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d201      	bcs.n	8001d22 <recv+0x11a>
 8001d1e:	89bb      	ldrh	r3, [r7, #12]
 8001d20:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len); 
 8001d22:	88ba      	ldrh	r2, [r7, #4]
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	6839      	ldr	r1, [r7, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fb41 	bl	80013b0 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV); 
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	3301      	adds	r3, #1
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001d3a:	2140      	movs	r1, #64	@ 0x40
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff f93d 	bl	8000fbc <WIZCHIP_WRITE>
   while(getSn_CR(sn));  
 8001d42:	bf00      	nop
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	3301      	adds	r3, #1
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff f8e7 	bl	8000f24 <WIZCHIP_READ>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f3      	bne.n	8001d44 <recv+0x13c>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001d5c:	88bb      	ldrh	r3, [r7, #4]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd90      	pop	{r4, r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200001f0 	.word	0x200001f0

08001d6c <ctlsocket>:
   return (int32_t)pack_len;
}


int8_t  ctlsocket(uint8_t sn, ctlsock_type cstype, void* arg)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	603a      	str	r2, [r7, #0]
 8001d76:	71fb      	strb	r3, [r7, #7]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	71bb      	strb	r3, [r7, #6]
   uint8_t tmp = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	73fb      	strb	r3, [r7, #15]
   CHECK_SOCKNUM();
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	2b07      	cmp	r3, #7
 8001d84:	d902      	bls.n	8001d8c <ctlsocket+0x20>
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8a:	e0bf      	b.n	8001f0c <ctlsocket+0x1a0>
   tmp = *((uint8_t*)arg); 
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	73fb      	strb	r3, [r7, #15]
   switch(cstype)
 8001d92:	79bb      	ldrb	r3, [r7, #6]
 8001d94:	2b09      	cmp	r3, #9
 8001d96:	f200 80b5 	bhi.w	8001f04 <ctlsocket+0x198>
 8001d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8001da0 <ctlsocket+0x34>)
 8001d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da0:	08001dc9 	.word	0x08001dc9
 8001da4:	08001e17 	.word	0x08001e17
 8001da8:	08001e31 	.word	0x08001e31
 8001dac:	08001e4f 	.word	0x08001e4f
 8001db0:	08001e6d 	.word	0x08001e6d
 8001db4:	08001e99 	.word	0x08001e99
 8001db8:	08001f05 	.word	0x08001f05
 8001dbc:	08001f05 	.word	0x08001f05
 8001dc0:	08001eb9 	.word	0x08001eb9
 8001dc4:	08001ee5 	.word	0x08001ee5
   {
      case CS_SET_IOMODE:
         if(tmp == SOCK_IO_NONBLOCK)  sock_io_mode |= (1<<sn);
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d10d      	bne.n	8001dea <ctlsocket+0x7e>
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	b21a      	sxth	r2, r3
 8001dd8:	4b4e      	ldr	r3, [pc, #312]	@ (8001f14 <ctlsocket+0x1a8>)
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	b21b      	sxth	r3, r3
 8001dde:	4313      	orrs	r3, r2
 8001de0:	b21b      	sxth	r3, r3
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	4b4b      	ldr	r3, [pc, #300]	@ (8001f14 <ctlsocket+0x1a8>)
 8001de6:	801a      	strh	r2, [r3, #0]
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
         else return SOCKERR_ARG;
         break;
 8001de8:	e08f      	b.n	8001f0a <ctlsocket+0x19e>
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10f      	bne.n	8001e10 <ctlsocket+0xa4>
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	2201      	movs	r2, #1
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	b21b      	sxth	r3, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	b21a      	sxth	r2, r3
 8001dfe:	4b45      	ldr	r3, [pc, #276]	@ (8001f14 <ctlsocket+0x1a8>)
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	b21b      	sxth	r3, r3
 8001e04:	4013      	ands	r3, r2
 8001e06:	b21b      	sxth	r3, r3
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	4b42      	ldr	r3, [pc, #264]	@ (8001f14 <ctlsocket+0x1a8>)
 8001e0c:	801a      	strh	r2, [r3, #0]
         break;
 8001e0e:	e07c      	b.n	8001f0a <ctlsocket+0x19e>
         else return SOCKERR_ARG;
 8001e10:	f06f 0309 	mvn.w	r3, #9
 8001e14:	e07a      	b.n	8001f0c <ctlsocket+0x1a0>
      case CS_GET_IOMODE: 
         //M20140501 : implict type casting -> explict type casting
         //*((uint8_t*)arg) = (sock_io_mode >> sn) & 0x0001;
         *((uint8_t*)arg) = (uint8_t)((sock_io_mode >> sn) & 0x0001);
 8001e16:	4b3f      	ldr	r3, [pc, #252]	@ (8001f14 <ctlsocket+0x1a8>)
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	fa42 f303 	asr.w	r3, r2, r3
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	701a      	strb	r2, [r3, #0]
         //
         break;
 8001e2e:	e06c      	b.n	8001f0a <ctlsocket+0x19e>
      case CS_GET_MAXTXBUF:
         *((uint16_t*)arg) = getSn_TxMAX(sn);
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	3301      	adds	r3, #1
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff f871 	bl	8000f24 <WIZCHIP_READ>
 8001e42:	4603      	mov	r3, r0
 8001e44:	029b      	lsls	r3, r3, #10
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	801a      	strh	r2, [r3, #0]
         break;
 8001e4c:	e05d      	b.n	8001f0a <ctlsocket+0x19e>
      case CS_GET_MAXRXBUF:  
         *((uint16_t*)arg) = getSn_RxMAX(sn);
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	3301      	adds	r3, #1
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff f862 	bl	8000f24 <WIZCHIP_READ>
 8001e60:	4603      	mov	r3, r0
 8001e62:	029b      	lsls	r3, r3, #10
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	801a      	strh	r2, [r3, #0]
         break;
 8001e6a:	e04e      	b.n	8001f0a <ctlsocket+0x19e>
      case CS_CLR_INTERRUPT:
         if( tmp > SIK_ALL) return SOCKERR_ARG;
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	2b1f      	cmp	r3, #31
 8001e70:	d902      	bls.n	8001e78 <ctlsocket+0x10c>
 8001e72:	f06f 0309 	mvn.w	r3, #9
 8001e76:	e049      	b.n	8001f0c <ctlsocket+0x1a0>
         setSn_IR(sn,tmp);
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001e84:	461a      	mov	r2, r3
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	f003 031f 	and.w	r3, r3, #31
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4610      	mov	r0, r2
 8001e92:	f7ff f893 	bl	8000fbc <WIZCHIP_WRITE>
         break;
 8001e96:	e038      	b.n	8001f0a <ctlsocket+0x19e>
      case CS_GET_INTERRUPT:
         *((uint8_t*)arg) = getSn_IR(sn);
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff f83d 	bl	8000f24 <WIZCHIP_READ>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	f003 031f 	and.w	r3, r3, #31
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	701a      	strb	r2, [r3, #0]
         break;
 8001eb6:	e028      	b.n	8001f0a <ctlsocket+0x19e>
#if _WIZCHIP_ != 5100
      case CS_SET_INTMASK:
         if( tmp > SIK_ALL) return SOCKERR_ARG;
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
 8001eba:	2b1f      	cmp	r3, #31
 8001ebc:	d902      	bls.n	8001ec4 <ctlsocket+0x158>
 8001ebe:	f06f 0309 	mvn.w	r3, #9
 8001ec2:	e023      	b.n	8001f0c <ctlsocket+0x1a0>
         setSn_IMR(sn,tmp);
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	3301      	adds	r3, #1
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	f503 5330 	add.w	r3, r3, #11264	@ 0x2c00
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
 8001ed4:	f003 031f 	and.w	r3, r3, #31
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	4619      	mov	r1, r3
 8001edc:	4610      	mov	r0, r2
 8001ede:	f7ff f86d 	bl	8000fbc <WIZCHIP_WRITE>
         break;
 8001ee2:	e012      	b.n	8001f0a <ctlsocket+0x19e>
      case CS_GET_INTMASK:
         *((uint8_t*)arg) = getSn_IMR(sn);
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	3301      	adds	r3, #1
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	f503 5330 	add.w	r3, r3, #11264	@ 0x2c00
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff f817 	bl	8000f24 <WIZCHIP_READ>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	f003 031f 	and.w	r3, r3, #31
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	701a      	strb	r2, [r3, #0]
         break;
 8001f02:	e002      	b.n	8001f0a <ctlsocket+0x19e>
      case CS_GET_PREFER:
    	  *(uint8_t*) arg = getSn_PSR(sn);
    	  break;
#endif 
      default:
         return SOCKERR_ARG;
 8001f04:	f06f 0309 	mvn.w	r3, #9
 8001f08:	e000      	b.n	8001f0c <ctlsocket+0x1a0>
   }
   return SOCK_OK;
 8001f0a:	2301      	movs	r3, #1
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	200001f0 	.word	0x200001f0

08001f18 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	bf00      	nop
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	4618      	mov	r0, r3
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
 8001f72:	460b      	mov	r3, r1
 8001f74:	70fb      	strb	r3, [r7, #3]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	78fa      	ldrb	r2, [r7, #3]
 8001f7a:	701a      	strb	r2, [r3, #0]
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <ctlwizchip>:
   }
}
#endif

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8001f88:	b590      	push	{r4, r7, lr}
 8001f8a:	b087      	sub	sp, #28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	6039      	str	r1, [r7, #0]
 8001f92:	71fb      	strb	r3, [r7, #7]
//teddy 240122
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500 || _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
   uint8_t tmp = *(uint8_t*) arg;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	3b03      	subs	r3, #3
 8001fa6:	2b14      	cmp	r3, #20
 8001fa8:	f200 80d3 	bhi.w	8002152 <ctlwizchip+0x1ca>
 8001fac:	a201      	add	r2, pc, #4	@ (adr r2, 8001fb4 <ctlwizchip+0x2c>)
 8001fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb2:	bf00      	nop
 8001fb4:	08002009 	.word	0x08002009
 8001fb8:	0800200f 	.word	0x0800200f
 8001fbc:	0800203b 	.word	0x0800203b
 8001fc0:	0800202f 	.word	0x0800202f
 8001fc4:	08002049 	.word	0x08002049
 8001fc8:	08002055 	.word	0x08002055
 8001fcc:	08002063 	.word	0x08002063
 8001fd0:	08002089 	.word	0x08002089
 8001fd4:	08002153 	.word	0x08002153
 8001fd8:	08002153 	.word	0x08002153
 8001fdc:	080020ab 	.word	0x080020ab
 8001fe0:	08002153 	.word	0x08002153
 8001fe4:	08002153 	.word	0x08002153
 8001fe8:	08002153 	.word	0x08002153
 8001fec:	080020ef 	.word	0x080020ef
 8001ff0:	080020f5 	.word	0x080020f5
 8001ff4:	080020fd 	.word	0x080020fd
 8001ff8:	08002105 	.word	0x08002105
 8001ffc:	0800210d 	.word	0x0800210d
 8002000:	0800211b 	.word	0x0800211b
 8002004:	08002137 	.word	0x08002137
      case CW_GET_SYSLOCK:
         *(uint8_t*)arg = getSYSR() >> 5;
         break;
#endif
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8002008:	f000 f8ec 	bl	80021e4 <wizchip_sw_reset>
         break;
 800200c:	e0a4      	b.n	8002158 <ctlwizchip+0x1d0>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d004      	beq.n	800201e <ctlwizchip+0x96>
         {
            ptmp[0] = (uint8_t*)arg;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	3308      	adds	r3, #8
 800201c:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4611      	mov	r1, r2
 8002024:	4618      	mov	r0, r3
 8002026:	f000 f929 	bl	800227c <wizchip_init>
 800202a:	4603      	mov	r3, r0
 800202c:	e095      	b.n	800215a <ctlwizchip+0x1d2>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f000 f9ae 	bl	8002394 <wizchip_clrinterrupt>
         break;
 8002038:	e08e      	b.n	8002158 <ctlwizchip+0x1d0>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 800203a:	f000 f9df 	bl	80023fc <wizchip_getinterrupt>
 800203e:	4603      	mov	r3, r0
 8002040:	461a      	mov	r2, r3
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	801a      	strh	r2, [r3, #0]
         break;
 8002046:	e087      	b.n	8002158 <ctlwizchip+0x1d0>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f000 f9f9 	bl	8002444 <wizchip_setinterruptmask>
         break;         
 8002052:	e081      	b.n	8002158 <ctlwizchip+0x1d0>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8002054:	f000 fa11 	bl	800247a <wizchip_getinterruptmask>
 8002058:	4603      	mov	r3, r0
 800205a:	461a      	mov	r2, r3
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	801a      	strh	r2, [r3, #0]
         break;
 8002060:	e07a      	b.n	8002158 <ctlwizchip+0x1d0>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	0a1b      	lsrs	r3, r3, #8
 8002068:	b29b      	uxth	r3, r3
 800206a:	b2db      	uxtb	r3, r3
 800206c:	4619      	mov	r1, r3
 800206e:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8002072:	f7fe ffa3 	bl	8000fbc <WIZCHIP_WRITE>
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	b2db      	uxtb	r3, r3
 800207c:	4619      	mov	r1, r3
 800207e:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8002082:	f7fe ff9b 	bl	8000fbc <WIZCHIP_WRITE>
         break;
 8002086:	e067      	b.n	8002158 <ctlwizchip+0x1d0>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8002088:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 800208c:	f7fe ff4a 	bl	8000f24 <WIZCHIP_READ>
 8002090:	4603      	mov	r3, r0
 8002092:	021b      	lsls	r3, r3, #8
 8002094:	b29c      	uxth	r4, r3
 8002096:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800209a:	f7fe ff43 	bl	8000f24 <WIZCHIP_READ>
 800209e:	4603      	mov	r3, r0
 80020a0:	4423      	add	r3, r4
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	801a      	strh	r2, [r3, #0]
         break;
 80020a8:	e056      	b.n	8002158 <ctlwizchip+0x1d0>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTPTMR();
         break;   
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80020aa:	4b2e      	ldr	r3, [pc, #184]	@ (8002164 <ctlwizchip+0x1dc>)
 80020ac:	789a      	ldrb	r2, [r3, #2]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	3301      	adds	r3, #1
 80020b6:	4a2b      	ldr	r2, [pc, #172]	@ (8002164 <ctlwizchip+0x1dc>)
 80020b8:	78d2      	ldrb	r2, [r2, #3]
 80020ba:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	3302      	adds	r3, #2
 80020c0:	4a28      	ldr	r2, [pc, #160]	@ (8002164 <ctlwizchip+0x1dc>)
 80020c2:	7912      	ldrb	r2, [r2, #4]
 80020c4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	3303      	adds	r3, #3
 80020ca:	4a26      	ldr	r2, [pc, #152]	@ (8002164 <ctlwizchip+0x1dc>)
 80020cc:	7952      	ldrb	r2, [r2, #5]
 80020ce:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	3304      	adds	r3, #4
 80020d4:	4a23      	ldr	r2, [pc, #140]	@ (8002164 <ctlwizchip+0x1dc>)
 80020d6:	7992      	ldrb	r2, [r2, #6]
 80020d8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	3305      	adds	r3, #5
 80020de:	4a21      	ldr	r2, [pc, #132]	@ (8002164 <ctlwizchip+0x1dc>)
 80020e0:	79d2      	ldrb	r2, [r2, #7]
 80020e2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	3306      	adds	r3, #6
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]
         break;
 80020ec:	e034      	b.n	8002158 <ctlwizchip+0x1d0>
   #endif
#endif
//teddy 240122
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500 || _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
      case CW_RESET_PHY:
         wizphy_reset();
 80020ee:	f000 fa15 	bl	800251c <wizphy_reset>
         break;
 80020f2:	e031      	b.n	8002158 <ctlwizchip+0x1d0>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 80020f4:	6838      	ldr	r0, [r7, #0]
 80020f6:	f000 fa38 	bl	800256a <wizphy_setphyconf>
         break;
 80020fa:	e02d      	b.n	8002158 <ctlwizchip+0x1d0>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 80020fc:	6838      	ldr	r0, [r7, #0]
 80020fe:	f000 fa77 	bl	80025f0 <wizphy_getphyconf>
         break;
 8002102:	e029      	b.n	8002158 <ctlwizchip+0x1d0>
      case CW_GET_PHYSTATUS:
#if 1
    	  // 20231012 taylor
   #if _WIZCHIP_ == W5500
         wizphy_getphystat((wiz_PhyConf*)arg);
 8002104:	6838      	ldr	r0, [r7, #0]
 8002106:	f000 fadd 	bl	80026c4 <wizphy_getphystat>
   #endif
#else
         wizphy_getphystat((wiz_PhyConf*)arg);
#endif
         break;
 800210a:	e025      	b.n	8002158 <ctlwizchip+0x1d0>
	  //teddy 240122
      #if _WIZCHIP_ == W6100 ||_WIZCHIP_ == W6300
        wizphy_setphypmode(*(uint8_t*)arg);
        break;
      #else
         return wizphy_setphypmode(*(uint8_t*)arg);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f000 faf5 	bl	8002700 <wizphy_setphypmode>
 8002116:	4603      	mov	r3, r0
 8002118:	e01f      	b.n	800215a <ctlwizchip+0x1d2>
      #endif
   #endif
   //teddy 240122
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500 || _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 800211a:	f000 f9e6 	bl	80024ea <wizphy_getphypmode>
 800211e:	4603      	mov	r3, r0
 8002120:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8002122:	7dfb      	ldrb	r3, [r7, #23]
 8002124:	2bff      	cmp	r3, #255	@ 0xff
 8002126:	d102      	bne.n	800212e <ctlwizchip+0x1a6>
 8002128:	f04f 33ff 	mov.w	r3, #4294967295
 800212c:	e015      	b.n	800215a <ctlwizchip+0x1d2>
         *(uint8_t*)arg = tmp;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	7dfa      	ldrb	r2, [r7, #23]
 8002132:	701a      	strb	r2, [r3, #0]
         break;
 8002134:	e010      	b.n	8002158 <ctlwizchip+0x1d0>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8002136:	f000 f9c2 	bl	80024be <wizphy_getphylink>
 800213a:	4603      	mov	r3, r0
 800213c:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 800213e:	7dfb      	ldrb	r3, [r7, #23]
 8002140:	2bff      	cmp	r3, #255	@ 0xff
 8002142:	d102      	bne.n	800214a <ctlwizchip+0x1c2>
 8002144:	f04f 33ff 	mov.w	r3, #4294967295
 8002148:	e007      	b.n	800215a <ctlwizchip+0x1d2>
         *(uint8_t*)arg = tmp;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	7dfa      	ldrb	r2, [r7, #23]
 800214e:	701a      	strb	r2, [r3, #0]
         break;
 8002150:	e002      	b.n	8002158 <ctlwizchip+0x1d0>
   #endif      
      default:
         return -1;
 8002152:	f04f 33ff 	mov.w	r3, #4294967295
 8002156:	e000      	b.n	800215a <ctlwizchip+0x1d2>
   }
   return 0;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	371c      	adds	r7, #28
 800215e:	46bd      	mov	sp, r7
 8002160:	bd90      	pop	{r4, r7, pc}
 8002162:	bf00      	nop
 8002164:	20000020 	.word	0x20000020

08002168 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	6039      	str	r1, [r7, #0]
 8002172:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	2b05      	cmp	r3, #5
 8002178:	d82c      	bhi.n	80021d4 <ctlnetwork+0x6c>
 800217a:	a201      	add	r2, pc, #4	@ (adr r2, 8002180 <ctlnetwork+0x18>)
 800217c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002180:	08002199 	.word	0x08002199
 8002184:	080021a1 	.word	0x080021a1
 8002188:	080021a9 	.word	0x080021a9
 800218c:	080021b7 	.word	0x080021b7
 8002190:	080021c5 	.word	0x080021c5
 8002194:	080021cd 	.word	0x080021cd
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8002198:	6838      	ldr	r0, [r7, #0]
 800219a:	f000 fafb 	bl	8002794 <wizchip_setnetinfo>
         break;
 800219e:	e01c      	b.n	80021da <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 80021a0:	6838      	ldr	r0, [r7, #0]
 80021a2:	f000 fb37 	bl	8002814 <wizchip_getnetinfo>
         break;
 80021a6:	e018      	b.n	80021da <ctlnetwork+0x72>
      case CN_SET_NETMODE:
#if (_WIZCHIP_ == W5100 || _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5300 || _WIZCHIP_ == W5500)
         return wizchip_setnetmode(*(netmode_type*)arg);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f000 fb71 	bl	8002894 <wizchip_setnetmode>
 80021b2:	4603      	mov	r3, r0
 80021b4:	e012      	b.n	80021dc <ctlnetwork+0x74>
		 //teddy 240122
      #elif ((_WIZCHIP_ == 6100)||(_WIZCHIP_ == W6300))
         wizchip_setnetmode(*(netmode_type*)arg);
      #endif
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 80021b6:	f000 fb8f 	bl	80028d8 <wizchip_getnetmode>
 80021ba:	4603      	mov	r3, r0
 80021bc:	461a      	mov	r2, r3
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	701a      	strb	r2, [r3, #0]
         break;
 80021c2:	e00a      	b.n	80021da <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 80021c4:	6838      	ldr	r0, [r7, #0]
 80021c6:	f000 fb8f 	bl	80028e8 <wizchip_settimeout>
         break;
 80021ca:	e006      	b.n	80021da <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 80021cc:	6838      	ldr	r0, [r7, #0]
 80021ce:	f000 fbac 	bl	800292a <wizchip_gettimeout>
         break;
 80021d2:	e002      	b.n	80021da <ctlnetwork+0x72>
      case CN_GET_PREFER:
    	  *(uint8_t*)arg= getSLPSR();
         break;
#endif   
      default:
         return -1;
 80021d4:	f04f 33ff 	mov.w	r3, #4294967295
 80021d8:	e000      	b.n	80021dc <ctlnetwork+0x74>
   }
   return 0;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80021ea:	1d3b      	adds	r3, r7, #4
 80021ec:	2206      	movs	r2, #6
 80021ee:	4619      	mov	r1, r3
 80021f0:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80021f4:	f7fe ff30 	bl	8001058 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	2204      	movs	r2, #4
 80021fe:	4619      	mov	r1, r3
 8002200:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002204:	f7fe ff28 	bl	8001058 <WIZCHIP_READ_BUF>
 8002208:	f107 0310 	add.w	r3, r7, #16
 800220c:	2204      	movs	r2, #4
 800220e:	4619      	mov	r1, r3
 8002210:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8002214:	f7fe ff20 	bl	8001058 <WIZCHIP_READ_BUF>
 8002218:	f107 030c 	add.w	r3, r7, #12
 800221c:	2204      	movs	r2, #4
 800221e:	4619      	mov	r1, r3
 8002220:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002224:	f7fe ff18 	bl	8001058 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8002228:	2180      	movs	r1, #128	@ 0x80
 800222a:	2000      	movs	r0, #0
 800222c:	f7fe fec6 	bl	8000fbc <WIZCHIP_WRITE>
   getMR(); // for delay
 8002230:	2000      	movs	r0, #0
 8002232:	f7fe fe77 	bl	8000f24 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8002236:	1d3b      	adds	r3, r7, #4
 8002238:	2206      	movs	r2, #6
 800223a:	4619      	mov	r1, r3
 800223c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002240:	f7fe ff6a 	bl	8001118 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	2204      	movs	r2, #4
 800224a:	4619      	mov	r1, r3
 800224c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002250:	f7fe ff62 	bl	8001118 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8002254:	f107 0310 	add.w	r3, r7, #16
 8002258:	2204      	movs	r2, #4
 800225a:	4619      	mov	r1, r3
 800225c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8002260:	f7fe ff5a 	bl	8001118 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8002264:	f107 030c 	add.w	r3, r7, #12
 8002268:	2204      	movs	r2, #4
 800226a:	4619      	mov	r1, r3
 800226c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002270:	f7fe ff52 	bl	8001118 <WIZCHIP_WRITE_BUF>
  setLLAR(lla);
  setGUAR(gua);
  if(islock & SYSR_CHPL) CHIPLOCK();
  if(islock & SYSR_NETL) NETLOCK();
#endif
}
 8002274:	bf00      	nop
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800228a:	f7ff ffab 	bl	80021e4 <wizchip_sw_reset>
   if(txsize)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d03b      	beq.n	800230c <wizchip_init+0x90>
   {
      tmp = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002298:	2300      	movs	r3, #0
 800229a:	73fb      	strb	r3, [r7, #15]
 800229c:	e015      	b.n	80022ca <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 800229e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	781a      	ldrb	r2, [r3, #0]
 80022a8:	7bbb      	ldrb	r3, [r7, #14]
 80022aa:	4413      	add	r3, r2
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#elif  _WIZCHIP_ == W6300
			if(tmp > 32) return -1;
#else
			if(tmp > 16) return -1;
 80022b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80022b4:	2b10      	cmp	r3, #16
 80022b6:	dd02      	ble.n	80022be <wizchip_init+0x42>
 80022b8:	f04f 33ff 	mov.w	r3, #4294967295
 80022bc:	e066      	b.n	800238c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80022be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	3301      	adds	r3, #1
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	73fb      	strb	r3, [r7, #15]
 80022ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ce:	2b07      	cmp	r3, #7
 80022d0:	dde5      	ble.n	800229e <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80022d2:	2300      	movs	r3, #0
 80022d4:	73fb      	strb	r3, [r7, #15]
 80022d6:	e015      	b.n	8002304 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80022d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	3301      	adds	r3, #1
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80022e6:	4618      	mov	r0, r3
 80022e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	4413      	add	r3, r2
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	4619      	mov	r1, r3
 80022f4:	f7fe fe62 	bl	8000fbc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80022f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	3301      	adds	r3, #1
 8002300:	b2db      	uxtb	r3, r3
 8002302:	73fb      	strb	r3, [r7, #15]
 8002304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002308:	2b07      	cmp	r3, #7
 800230a:	dde5      	ble.n	80022d8 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d03b      	beq.n	800238a <wizchip_init+0x10e>
   {
      tmp = 0;
 8002312:	2300      	movs	r3, #0
 8002314:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002316:	2300      	movs	r3, #0
 8002318:	73fb      	strb	r3, [r7, #15]
 800231a:	e015      	b.n	8002348 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 800231c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	4413      	add	r3, r2
 8002324:	781a      	ldrb	r2, [r3, #0]
 8002326:	7bbb      	ldrb	r3, [r7, #14]
 8002328:	4413      	add	r3, r2
 800232a:	b2db      	uxtb	r3, r3
 800232c:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#elif  _WIZCHIP_ == W6300
			if(tmp > 32) return -1;
#else
			if(tmp > 16) return -1;
 800232e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002332:	2b10      	cmp	r3, #16
 8002334:	dd02      	ble.n	800233c <wizchip_init+0xc0>
 8002336:	f04f 33ff 	mov.w	r3, #4294967295
 800233a:	e027      	b.n	800238c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800233c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002340:	b2db      	uxtb	r3, r3
 8002342:	3301      	adds	r3, #1
 8002344:	b2db      	uxtb	r3, r3
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800234c:	2b07      	cmp	r3, #7
 800234e:	dde5      	ble.n	800231c <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002350:	2300      	movs	r3, #0
 8002352:	73fb      	strb	r3, [r7, #15]
 8002354:	e015      	b.n	8002382 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8002356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	3301      	adds	r3, #1
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8002364:	4618      	mov	r0, r3
 8002366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	4413      	add	r3, r2
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	4619      	mov	r1, r3
 8002372:	f7fe fe23 	bl	8000fbc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	3301      	adds	r3, #1
 800237e:	b2db      	uxtb	r3, r3
 8002380:	73fb      	strb	r3, [r7, #15]
 8002382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002386:	2b07      	cmp	r3, #7
 8002388:	dde5      	ble.n	8002356 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 800239e:	88fb      	ldrh	r3, [r7, #6]
 80023a0:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80023a2:	88fb      	ldrh	r3, [r7, #6]
 80023a4:	0a1b      	lsrs	r3, r3, #8
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	f023 030f 	bic.w	r3, r3, #15
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	4619      	mov	r1, r3
 80023b4:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 80023b8:	f7fe fe00 	bl	8000fbc <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 80023bc:	2300      	movs	r3, #0
 80023be:	73fb      	strb	r3, [r7, #15]
 80023c0:	e014      	b.n	80023ec <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 80023c2:	7bba      	ldrb	r2, [r7, #14]
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	fa42 f303 	asr.w	r3, r2, r3
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d009      	beq.n	80023e6 <wizchip_clrinterrupt+0x52>
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	3301      	adds	r3, #1
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80023de:	211f      	movs	r1, #31
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe fdeb 	bl	8000fbc <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	3301      	adds	r3, #1
 80023ea:	73fb      	strb	r3, [r7, #15]
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
 80023ee:	2b07      	cmp	r3, #7
 80023f0:	d9e7      	bls.n	80023c2 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 80023f2:	bf00      	nop
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8002406:	2300      	movs	r3, #0
 8002408:	71bb      	strb	r3, [r7, #6]
   uint32_t ret = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	603b      	str	r3, [r7, #0]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 800240e:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8002412:	f7fe fd87 	bl	8000f24 <WIZCHIP_READ>
 8002416:	4603      	mov	r3, r0
 8002418:	f023 030f 	bic.w	r3, r3, #15
 800241c:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 800241e:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 8002422:	f7fe fd7f 	bl	8000f24 <WIZCHIP_READ>
 8002426:	4603      	mov	r3, r0
 8002428:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 800242a:	79bb      	ldrb	r3, [r7, #6]
 800242c:	603b      	str	r3, [r7, #0]
  ret = (ret << 8) + ir;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	021a      	lsls	r2, r3, #8
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	4413      	add	r3, r2
 8002436:	603b      	str	r3, [r7, #0]
  //teddy 240122
#if _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
  ret = (((uint32_t)getSLIR())<<16) | ret;
#endif

  return (intr_kind)ret;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	b29b      	uxth	r3, r3
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 800244e:	88fb      	ldrh	r3, [r7, #6]
 8002450:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8002452:	88fb      	ldrh	r3, [r7, #6]
 8002454:	0a1b      	lsrs	r3, r3, #8
 8002456:	b29b      	uxth	r3, r3
 8002458:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	4619      	mov	r1, r3
 800245e:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8002462:	f7fe fdab 	bl	8000fbc <WIZCHIP_WRITE>
   setSIMR(simr);
 8002466:	7bbb      	ldrb	r3, [r7, #14]
 8002468:	4619      	mov	r1, r3
 800246a:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 800246e:	f7fe fda5 	bl	8000fbc <WIZCHIP_WRITE>
#if _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
   uint8_t slimr = (uint8_t)((uint32_t)intr >> 16);
   setSLIMR(slimr);
#endif
#endif   
}
 8002472:	bf00      	nop
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8002480:	2300      	movs	r3, #0
 8002482:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	71bb      	strb	r3, [r7, #6]
   uint32_t ret = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	603b      	str	r3, [r7, #0]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 800248c:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8002490:	f7fe fd48 	bl	8000f24 <WIZCHIP_READ>
 8002494:	4603      	mov	r3, r0
 8002496:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8002498:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 800249c:	f7fe fd42 	bl	8000f24 <WIZCHIP_READ>
 80024a0:	4603      	mov	r3, r0
 80024a2:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80024a4:	79bb      	ldrb	r3, [r7, #6]
 80024a6:	603b      	str	r3, [r7, #0]
  ret = (ret << 8) + imr;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	021a      	lsls	r2, r3, #8
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	4413      	add	r3, r2
 80024b0:	603b      	str	r3, [r7, #0]
  //teddy 240122
#if _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
  ret = (((uint32_t)getSLIMR())<<16) | ret;
#endif
  
  return (intr_kind)ret;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	b29b      	uxth	r3, r3
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 80024c4:	2300      	movs	r3, #0
 80024c6:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 80024c8:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80024cc:	f7fe fd2a 	bl	8000f24 <WIZCHIP_READ>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80024da:	2301      	movs	r3, #1
 80024dc:	71fb      	strb	r3, [r7, #7]
#endif

#else
   tmp = -1;
#endif
   return tmp;
 80024de:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 80024f4:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80024f8:	f7fe fd14 	bl	8000f24 <WIZCHIP_READ>
 80024fc:	4603      	mov	r3, r0
 80024fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002502:	2b30      	cmp	r3, #48	@ 0x30
 8002504:	d102      	bne.n	800250c <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8002506:	2301      	movs	r3, #1
 8002508:	71fb      	strb	r3, [r7, #7]
 800250a:	e001      	b.n	8002510 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 800250c:	2300      	movs	r3, #0
 800250e:	71fb      	strb	r3, [r7, #7]
   #endif   
      return PHY_POWER_NORM;
   #else
      tmp = -1;
   #endif
   return tmp;
 8002510:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <wizphy_reset>:
   return -1;
}

#elif _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8002522:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8002526:	f7fe fcfd 	bl	8000f24 <WIZCHIP_READ>
 800252a:	4603      	mov	r3, r0
 800252c:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002534:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	4619      	mov	r1, r3
 800253a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800253e:	f7fe fd3d 	bl	8000fbc <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8002542:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8002546:	f7fe fced 	bl	8000f24 <WIZCHIP_READ>
 800254a:	4603      	mov	r3, r0
 800254c:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002554:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8002556:	79fb      	ldrb	r3, [r7, #7]
 8002558:	4619      	mov	r1, r3
 800255a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800255e:	f7fe fd2d 	bl	8000fbc <WIZCHIP_WRITE>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b084      	sub	sp, #16
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d104      	bne.n	8002588 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002584:	73fb      	strb	r3, [r7, #15]
 8002586:	e003      	b.n	8002590 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8002588:	7bfb      	ldrb	r3, [r7, #15]
 800258a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800258e:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	785b      	ldrb	r3, [r3, #1]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d104      	bne.n	80025a2 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800259e:	73fb      	strb	r3, [r7, #15]
 80025a0:	e019      	b.n	80025d6 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	78db      	ldrb	r3, [r3, #3]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d10d      	bne.n	80025c6 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	789b      	ldrb	r3, [r3, #2]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d104      	bne.n	80025bc <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	f043 0318 	orr.w	r3, r3, #24
 80025b8:	73fb      	strb	r3, [r7, #15]
 80025ba:	e00c      	b.n	80025d6 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	f043 0308 	orr.w	r3, r3, #8
 80025c2:	73fb      	strb	r3, [r7, #15]
 80025c4:	e007      	b.n	80025d6 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	789b      	ldrb	r3, [r3, #2]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d103      	bne.n	80025d6 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	f043 0310 	orr.w	r3, r3, #16
 80025d4:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
 80025d8:	4619      	mov	r1, r3
 80025da:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80025de:	f7fe fced 	bl	8000fbc <WIZCHIP_WRITE>
   wizphy_reset();
 80025e2:	f7ff ff9b 	bl	800251c <wizphy_reset>
}
 80025e6:	bf00      	nop
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80025fc:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8002600:	f7fe fc90 	bl	8000f24 <WIZCHIP_READ>
 8002604:	4603      	mov	r3, r0
 8002606:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	119b      	asrs	r3, r3, #6
 800260c:	b2db      	uxtb	r3, r3
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	b2da      	uxtb	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800261e:	2b20      	cmp	r3, #32
 8002620:	d001      	beq.n	8002626 <wizphy_getphyconf+0x36>
 8002622:	2b38      	cmp	r3, #56	@ 0x38
 8002624:	d103      	bne.n	800262e <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	705a      	strb	r2, [r3, #1]
         break;
 800262c:	e003      	b.n	8002636 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	705a      	strb	r2, [r3, #1]
         break;
 8002634:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002636:	7bfb      	ldrb	r3, [r7, #15]
 8002638:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800263c:	3b10      	subs	r3, #16
 800263e:	2b10      	cmp	r3, #16
 8002640:	bf8c      	ite	hi
 8002642:	2201      	movhi	r2, #1
 8002644:	2200      	movls	r2, #0
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	2a00      	cmp	r2, #0
 800264a:	d10f      	bne.n	800266c <wizphy_getphyconf+0x7c>
 800264c:	4a1b      	ldr	r2, [pc, #108]	@ (80026bc <wizphy_getphyconf+0xcc>)
 800264e:	fa22 f303 	lsr.w	r3, r2, r3
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	bf14      	ite	ne
 800265a:	2301      	movne	r3, #1
 800265c:	2300      	moveq	r3, #0
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	709a      	strb	r2, [r3, #2]
         break;
 800266a:	e003      	b.n	8002674 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	709a      	strb	r2, [r3, #2]
         break;
 8002672:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800267a:	3b08      	subs	r3, #8
 800267c:	2b18      	cmp	r3, #24
 800267e:	bf8c      	ite	hi
 8002680:	2201      	movhi	r2, #1
 8002682:	2200      	movls	r2, #0
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	2a00      	cmp	r2, #0
 8002688:	d10f      	bne.n	80026aa <wizphy_getphyconf+0xba>
 800268a:	4a0d      	ldr	r2, [pc, #52]	@ (80026c0 <wizphy_getphyconf+0xd0>)
 800268c:	fa22 f303 	lsr.w	r3, r2, r3
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	bf14      	ite	ne
 8002698:	2301      	movne	r3, #1
 800269a:	2300      	moveq	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	70da      	strb	r2, [r3, #3]
         break;
 80026a8:	e003      	b.n	80026b2 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	70da      	strb	r2, [r3, #3]
         break;
 80026b0:	bf00      	nop
   }
}
 80026b2:	bf00      	nop
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	00010101 	.word	0x00010101
 80026c0:	01010001 	.word	0x01010001

080026c4 <wizphy_getphystat>:

void wizphy_getphystat(wiz_PhyConf* phyconf)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
   uint8_t tmp = getPHYCFGR();
 80026cc:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80026d0:	f7fe fc28 	bl	8000f24 <WIZCHIP_READ>
 80026d4:	4603      	mov	r3, r0
 80026d6:	73fb      	strb	r3, [r7, #15]
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	109b      	asrs	r3, r3, #2
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	70da      	strb	r2, [r3, #3]
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	105b      	asrs	r3, r3, #1
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	709a      	strb	r2, [r3, #2]
}
 80026f8:	bf00      	nop
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <wizphy_setphypmode>:

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800270a:	2300      	movs	r3, #0
 800270c:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800270e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8002712:	f7fe fc07 	bl	8000f24 <WIZCHIP_READ>
 8002716:	4603      	mov	r3, r0
 8002718:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 800271a:	7bfb      	ldrb	r3, [r7, #15]
 800271c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002720:	2b00      	cmp	r3, #0
 8002722:	d102      	bne.n	800272a <wizphy_setphypmode+0x2a>
 8002724:	f04f 33ff 	mov.w	r3, #4294967295
 8002728:	e030      	b.n	800278c <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 800272a:	7bfb      	ldrb	r3, [r7, #15]
 800272c:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8002730:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d104      	bne.n	8002742 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800273e:	73fb      	strb	r3, [r7, #15]
 8002740:	e003      	b.n	800274a <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002742:	7bfb      	ldrb	r3, [r7, #15]
 8002744:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8002748:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	4619      	mov	r1, r3
 800274e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8002752:	f7fe fc33 	bl	8000fbc <WIZCHIP_WRITE>
   wizphy_reset();
 8002756:	f7ff fee1 	bl	800251c <wizphy_reset>
   tmp = getPHYCFGR();
 800275a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800275e:	f7fe fbe1 	bl	8000f24 <WIZCHIP_READ>
 8002762:	4603      	mov	r3, r0
 8002764:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d106      	bne.n	800277a <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002772:	2b00      	cmp	r3, #0
 8002774:	d008      	beq.n	8002788 <wizphy_setphypmode+0x88>
 8002776:	2300      	movs	r3, #0
 8002778:	e008      	b.n	800278c <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <wizphy_setphypmode+0x88>
 8002784:	2300      	movs	r3, #0
 8002786:	e001      	b.n	800278c <wizphy_setphypmode+0x8c>
   }
   return -1;
 8002788:	f04f 33ff 	mov.w	r3, #4294967295
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <wizchip_setnetinfo>:

#endif

#if (_WIZCHIP_ == W5100 || _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5300 || _WIZCHIP_ == W5500)
void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2206      	movs	r2, #6
 80027a0:	4619      	mov	r1, r3
 80027a2:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80027a6:	f7fe fcb7 	bl	8001118 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	330e      	adds	r3, #14
 80027ae:	2204      	movs	r2, #4
 80027b0:	4619      	mov	r1, r3
 80027b2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80027b6:	f7fe fcaf 	bl	8001118 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	330a      	adds	r3, #10
 80027be:	2204      	movs	r2, #4
 80027c0:	4619      	mov	r1, r3
 80027c2:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80027c6:	f7fe fca7 	bl	8001118 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3306      	adds	r3, #6
 80027ce:	2204      	movs	r2, #4
 80027d0:	4619      	mov	r1, r3
 80027d2:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80027d6:	f7fe fc9f 	bl	8001118 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	7c9a      	ldrb	r2, [r3, #18]
 80027de:	4b0b      	ldr	r3, [pc, #44]	@ (800280c <wizchip_setnetinfo+0x78>)
 80027e0:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	7cda      	ldrb	r2, [r3, #19]
 80027e6:	4b09      	ldr	r3, [pc, #36]	@ (800280c <wizchip_setnetinfo+0x78>)
 80027e8:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	7d1a      	ldrb	r2, [r3, #20]
 80027ee:	4b07      	ldr	r3, [pc, #28]	@ (800280c <wizchip_setnetinfo+0x78>)
 80027f0:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	7d5a      	ldrb	r2, [r3, #21]
 80027f6:	4b05      	ldr	r3, [pc, #20]	@ (800280c <wizchip_setnetinfo+0x78>)
 80027f8:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	7d9a      	ldrb	r2, [r3, #22]
 80027fe:	4b04      	ldr	r3, [pc, #16]	@ (8002810 <wizchip_setnetinfo+0x7c>)
 8002800:	701a      	strb	r2, [r3, #0]
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	2000020c 	.word	0x2000020c
 8002810:	20000210 	.word	0x20000210

08002814 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2206      	movs	r2, #6
 8002820:	4619      	mov	r1, r3
 8002822:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002826:	f7fe fc17 	bl	8001058 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	330e      	adds	r3, #14
 800282e:	2204      	movs	r2, #4
 8002830:	4619      	mov	r1, r3
 8002832:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002836:	f7fe fc0f 	bl	8001058 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	330a      	adds	r3, #10
 800283e:	2204      	movs	r2, #4
 8002840:	4619      	mov	r1, r3
 8002842:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8002846:	f7fe fc07 	bl	8001058 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3306      	adds	r3, #6
 800284e:	2204      	movs	r2, #4
 8002850:	4619      	mov	r1, r3
 8002852:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002856:	f7fe fbff 	bl	8001058 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 800285a:	4b0c      	ldr	r3, [pc, #48]	@ (800288c <wizchip_getnetinfo+0x78>)
 800285c:	781a      	ldrb	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8002862:	4b0a      	ldr	r3, [pc, #40]	@ (800288c <wizchip_getnetinfo+0x78>)
 8002864:	785a      	ldrb	r2, [r3, #1]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800286a:	4b08      	ldr	r3, [pc, #32]	@ (800288c <wizchip_getnetinfo+0x78>)
 800286c:	789a      	ldrb	r2, [r3, #2]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8002872:	4b06      	ldr	r3, [pc, #24]	@ (800288c <wizchip_getnetinfo+0x78>)
 8002874:	78da      	ldrb	r2, [r3, #3]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 800287a:	4b05      	ldr	r3, [pc, #20]	@ (8002890 <wizchip_getnetinfo+0x7c>)
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	759a      	strb	r2, [r3, #22]
}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	2000020c 	.word	0x2000020c
 8002890:	20000210 	.word	0x20000210

08002894 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 80028a2:	79fb      	ldrb	r3, [r7, #7]
 80028a4:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d002      	beq.n	80028b2 <wizchip_setnetmode+0x1e>
 80028ac:	f04f 33ff 	mov.w	r3, #4294967295
 80028b0:	e00e      	b.n	80028d0 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 80028b2:	2000      	movs	r0, #0
 80028b4:	f7fe fb36 	bl	8000f24 <WIZCHIP_READ>
 80028b8:	4603      	mov	r3, r0
 80028ba:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 80028bc:	7bfa      	ldrb	r2, [r7, #15]
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	4619      	mov	r1, r3
 80028c8:	2000      	movs	r0, #0
 80028ca:	f7fe fb77 	bl	8000fbc <WIZCHIP_WRITE>
   return 0;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 80028dc:	2000      	movs	r0, #0
 80028de:	f7fe fb21 	bl	8000f24 <WIZCHIP_READ>
 80028e2:	4603      	mov	r3, r0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	4619      	mov	r1, r3
 80028f6:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80028fa:	f7fe fb5f 	bl	8000fbc <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	885b      	ldrh	r3, [r3, #2]
 8002902:	0a1b      	lsrs	r3, r3, #8
 8002904:	b29b      	uxth	r3, r3
 8002906:	b2db      	uxtb	r3, r3
 8002908:	4619      	mov	r1, r3
 800290a:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 800290e:	f7fe fb55 	bl	8000fbc <WIZCHIP_WRITE>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	885b      	ldrh	r3, [r3, #2]
 8002916:	b2db      	uxtb	r3, r3
 8002918:	4619      	mov	r1, r3
 800291a:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 800291e:	f7fe fb4d 	bl	8000fbc <WIZCHIP_WRITE>
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 800292a:	b590      	push	{r4, r7, lr}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8002932:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8002936:	f7fe faf5 	bl	8000f24 <WIZCHIP_READ>
 800293a:	4603      	mov	r3, r0
 800293c:	461a      	mov	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8002942:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8002946:	f7fe faed 	bl	8000f24 <WIZCHIP_READ>
 800294a:	4603      	mov	r3, r0
 800294c:	021b      	lsls	r3, r3, #8
 800294e:	b29c      	uxth	r4, r3
 8002950:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8002954:	f7fe fae6 	bl	8000f24 <WIZCHIP_READ>
 8002958:	4603      	mov	r3, r0
 800295a:	4423      	add	r3, r4
 800295c:	b29a      	uxth	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	805a      	strh	r2, [r3, #2]
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	bd90      	pop	{r4, r7, pc}
	...

0800296c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800296c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002970:	f7fe fa54 	bl	8000e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002974:	480c      	ldr	r0, [pc, #48]	@ (80029a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002976:	490d      	ldr	r1, [pc, #52]	@ (80029ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002978:	4a0d      	ldr	r2, [pc, #52]	@ (80029b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800297a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800297c:	e002      	b.n	8002984 <LoopCopyDataInit>

0800297e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800297e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002982:	3304      	adds	r3, #4

08002984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002988:	d3f9      	bcc.n	800297e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800298a:	4a0a      	ldr	r2, [pc, #40]	@ (80029b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800298c:	4c0a      	ldr	r4, [pc, #40]	@ (80029b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800298e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002990:	e001      	b.n	8002996 <LoopFillZerobss>

08002992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002994:	3204      	adds	r2, #4

08002996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002998:	d3fb      	bcc.n	8002992 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800299a:	f001 ff8b 	bl	80048b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800299e:	f7fd fe9b 	bl	80006d8 <main>
  bx  lr    
 80029a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029ac:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 80029b0:	08005720 	.word	0x08005720
  ldr r2, =_sbss
 80029b4:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80029b8:	20000364 	.word	0x20000364

080029bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029bc:	e7fe      	b.n	80029bc <ADC_IRQHandler>
	...

080029c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a00 <HAL_Init+0x40>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002a00 <HAL_Init+0x40>)
 80029ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002a00 <HAL_Init+0x40>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002a00 <HAL_Init+0x40>)
 80029d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029dc:	4b08      	ldr	r3, [pc, #32]	@ (8002a00 <HAL_Init+0x40>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a07      	ldr	r2, [pc, #28]	@ (8002a00 <HAL_Init+0x40>)
 80029e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029e8:	2003      	movs	r0, #3
 80029ea:	f000 f931 	bl	8002c50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ee:	2000      	movs	r0, #0
 80029f0:	f000 f808 	bl	8002a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029f4:	f7fe f918 	bl	8000c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40023c00 	.word	0x40023c00

08002a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a0c:	4b12      	ldr	r3, [pc, #72]	@ (8002a58 <HAL_InitTick+0x54>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4b12      	ldr	r3, [pc, #72]	@ (8002a5c <HAL_InitTick+0x58>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	4619      	mov	r1, r3
 8002a16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 f93b 	bl	8002c9e <HAL_SYSTICK_Config>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e00e      	b.n	8002a50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b0f      	cmp	r3, #15
 8002a36:	d80a      	bhi.n	8002a4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a40:	f000 f911 	bl	8002c66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a44:	4a06      	ldr	r2, [pc, #24]	@ (8002a60 <HAL_InitTick+0x5c>)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e000      	b.n	8002a50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20000018 	.word	0x20000018
 8002a5c:	20000050 	.word	0x20000050
 8002a60:	2000004c 	.word	0x2000004c

08002a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a68:	4b06      	ldr	r3, [pc, #24]	@ (8002a84 <HAL_IncTick+0x20>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4b06      	ldr	r3, [pc, #24]	@ (8002a88 <HAL_IncTick+0x24>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4413      	add	r3, r2
 8002a74:	4a04      	ldr	r2, [pc, #16]	@ (8002a88 <HAL_IncTick+0x24>)
 8002a76:	6013      	str	r3, [r2, #0]
}
 8002a78:	bf00      	nop
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	20000050 	.word	0x20000050
 8002a88:	20000214 	.word	0x20000214

08002a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a90:	4b03      	ldr	r3, [pc, #12]	@ (8002aa0 <HAL_GetTick+0x14>)
 8002a92:	681b      	ldr	r3, [r3, #0]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	20000214 	.word	0x20000214

08002aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002aac:	f7ff ffee 	bl	8002a8c <HAL_GetTick>
 8002ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abc:	d005      	beq.n	8002aca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002abe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae8 <HAL_Delay+0x44>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002aca:	bf00      	nop
 8002acc:	f7ff ffde 	bl	8002a8c <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d8f7      	bhi.n	8002acc <HAL_Delay+0x28>
  {
  }
}
 8002adc:	bf00      	nop
 8002ade:	bf00      	nop
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000050 	.word	0x20000050

08002aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002afc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b30 <__NVIC_SetPriorityGrouping+0x44>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b1e:	4a04      	ldr	r2, [pc, #16]	@ (8002b30 <__NVIC_SetPriorityGrouping+0x44>)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	60d3      	str	r3, [r2, #12]
}
 8002b24:	bf00      	nop
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b38:	4b04      	ldr	r3, [pc, #16]	@ (8002b4c <__NVIC_GetPriorityGrouping+0x18>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	0a1b      	lsrs	r3, r3, #8
 8002b3e:	f003 0307 	and.w	r3, r3, #7
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	6039      	str	r1, [r7, #0]
 8002b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	db0a      	blt.n	8002b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	490c      	ldr	r1, [pc, #48]	@ (8002b9c <__NVIC_SetPriority+0x4c>)
 8002b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6e:	0112      	lsls	r2, r2, #4
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	440b      	add	r3, r1
 8002b74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b78:	e00a      	b.n	8002b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	4908      	ldr	r1, [pc, #32]	@ (8002ba0 <__NVIC_SetPriority+0x50>)
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	3b04      	subs	r3, #4
 8002b88:	0112      	lsls	r2, r2, #4
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	761a      	strb	r2, [r3, #24]
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	e000e100 	.word	0xe000e100
 8002ba0:	e000ed00 	.word	0xe000ed00

08002ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b089      	sub	sp, #36	@ 0x24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f1c3 0307 	rsb	r3, r3, #7
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	bf28      	it	cs
 8002bc2:	2304      	movcs	r3, #4
 8002bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	3304      	adds	r3, #4
 8002bca:	2b06      	cmp	r3, #6
 8002bcc:	d902      	bls.n	8002bd4 <NVIC_EncodePriority+0x30>
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3b03      	subs	r3, #3
 8002bd2:	e000      	b.n	8002bd6 <NVIC_EncodePriority+0x32>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43da      	mvns	r2, r3
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	401a      	ands	r2, r3
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bec:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf6:	43d9      	mvns	r1, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bfc:	4313      	orrs	r3, r2
         );
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3724      	adds	r7, #36	@ 0x24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
	...

08002c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c1c:	d301      	bcc.n	8002c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e00f      	b.n	8002c42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c22:	4a0a      	ldr	r2, [pc, #40]	@ (8002c4c <SysTick_Config+0x40>)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c2a:	210f      	movs	r1, #15
 8002c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c30:	f7ff ff8e 	bl	8002b50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c34:	4b05      	ldr	r3, [pc, #20]	@ (8002c4c <SysTick_Config+0x40>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c3a:	4b04      	ldr	r3, [pc, #16]	@ (8002c4c <SysTick_Config+0x40>)
 8002c3c:	2207      	movs	r2, #7
 8002c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	e000e010 	.word	0xe000e010

08002c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7ff ff47 	bl	8002aec <__NVIC_SetPriorityGrouping>
}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b086      	sub	sp, #24
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	60b9      	str	r1, [r7, #8]
 8002c70:	607a      	str	r2, [r7, #4]
 8002c72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c78:	f7ff ff5c 	bl	8002b34 <__NVIC_GetPriorityGrouping>
 8002c7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	68b9      	ldr	r1, [r7, #8]
 8002c82:	6978      	ldr	r0, [r7, #20]
 8002c84:	f7ff ff8e 	bl	8002ba4 <NVIC_EncodePriority>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c8e:	4611      	mov	r1, r2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff ff5d 	bl	8002b50 <__NVIC_SetPriority>
}
 8002c96:	bf00      	nop
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff ffb0 	bl	8002c0c <SysTick_Config>
 8002cac:	4603      	mov	r3, r0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b089      	sub	sp, #36	@ 0x24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61fb      	str	r3, [r7, #28]
 8002cd2:	e165      	b.n	8002fa0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	f040 8154 	bne.w	8002f9a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d005      	beq.n	8002d0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d130      	bne.n	8002d6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	2203      	movs	r2, #3
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d40:	2201      	movs	r2, #1
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	091b      	lsrs	r3, r3, #4
 8002d56:	f003 0201 	and.w	r2, r3, #1
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d017      	beq.n	8002da8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	2203      	movs	r2, #3
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 0303 	and.w	r3, r3, #3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d123      	bne.n	8002dfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	08da      	lsrs	r2, r3, #3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3208      	adds	r2, #8
 8002dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	220f      	movs	r2, #15
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	691a      	ldr	r2, [r3, #16]
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	08da      	lsrs	r2, r3, #3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3208      	adds	r2, #8
 8002df6:	69b9      	ldr	r1, [r7, #24]
 8002df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	2203      	movs	r2, #3
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 0203 	and.w	r2, r3, #3
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 80ae 	beq.w	8002f9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	4b5d      	ldr	r3, [pc, #372]	@ (8002fb8 <HAL_GPIO_Init+0x300>)
 8002e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e46:	4a5c      	ldr	r2, [pc, #368]	@ (8002fb8 <HAL_GPIO_Init+0x300>)
 8002e48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e4e:	4b5a      	ldr	r3, [pc, #360]	@ (8002fb8 <HAL_GPIO_Init+0x300>)
 8002e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e5a:	4a58      	ldr	r2, [pc, #352]	@ (8002fbc <HAL_GPIO_Init+0x304>)
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	089b      	lsrs	r3, r3, #2
 8002e60:	3302      	adds	r3, #2
 8002e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	220f      	movs	r2, #15
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a4f      	ldr	r2, [pc, #316]	@ (8002fc0 <HAL_GPIO_Init+0x308>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d025      	beq.n	8002ed2 <HAL_GPIO_Init+0x21a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a4e      	ldr	r2, [pc, #312]	@ (8002fc4 <HAL_GPIO_Init+0x30c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d01f      	beq.n	8002ece <HAL_GPIO_Init+0x216>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a4d      	ldr	r2, [pc, #308]	@ (8002fc8 <HAL_GPIO_Init+0x310>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d019      	beq.n	8002eca <HAL_GPIO_Init+0x212>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a4c      	ldr	r2, [pc, #304]	@ (8002fcc <HAL_GPIO_Init+0x314>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d013      	beq.n	8002ec6 <HAL_GPIO_Init+0x20e>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a4b      	ldr	r2, [pc, #300]	@ (8002fd0 <HAL_GPIO_Init+0x318>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d00d      	beq.n	8002ec2 <HAL_GPIO_Init+0x20a>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a4a      	ldr	r2, [pc, #296]	@ (8002fd4 <HAL_GPIO_Init+0x31c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d007      	beq.n	8002ebe <HAL_GPIO_Init+0x206>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a49      	ldr	r2, [pc, #292]	@ (8002fd8 <HAL_GPIO_Init+0x320>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d101      	bne.n	8002eba <HAL_GPIO_Init+0x202>
 8002eb6:	2306      	movs	r3, #6
 8002eb8:	e00c      	b.n	8002ed4 <HAL_GPIO_Init+0x21c>
 8002eba:	2307      	movs	r3, #7
 8002ebc:	e00a      	b.n	8002ed4 <HAL_GPIO_Init+0x21c>
 8002ebe:	2305      	movs	r3, #5
 8002ec0:	e008      	b.n	8002ed4 <HAL_GPIO_Init+0x21c>
 8002ec2:	2304      	movs	r3, #4
 8002ec4:	e006      	b.n	8002ed4 <HAL_GPIO_Init+0x21c>
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e004      	b.n	8002ed4 <HAL_GPIO_Init+0x21c>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e002      	b.n	8002ed4 <HAL_GPIO_Init+0x21c>
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <HAL_GPIO_Init+0x21c>
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	69fa      	ldr	r2, [r7, #28]
 8002ed6:	f002 0203 	and.w	r2, r2, #3
 8002eda:	0092      	lsls	r2, r2, #2
 8002edc:	4093      	lsls	r3, r2
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ee4:	4935      	ldr	r1, [pc, #212]	@ (8002fbc <HAL_GPIO_Init+0x304>)
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	089b      	lsrs	r3, r3, #2
 8002eea:	3302      	adds	r3, #2
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ef2:	4b3a      	ldr	r3, [pc, #232]	@ (8002fdc <HAL_GPIO_Init+0x324>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	43db      	mvns	r3, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4013      	ands	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f16:	4a31      	ldr	r2, [pc, #196]	@ (8002fdc <HAL_GPIO_Init+0x324>)
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f1c:	4b2f      	ldr	r3, [pc, #188]	@ (8002fdc <HAL_GPIO_Init+0x324>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f40:	4a26      	ldr	r2, [pc, #152]	@ (8002fdc <HAL_GPIO_Init+0x324>)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f46:	4b25      	ldr	r3, [pc, #148]	@ (8002fdc <HAL_GPIO_Init+0x324>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4013      	ands	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f6a:	4a1c      	ldr	r2, [pc, #112]	@ (8002fdc <HAL_GPIO_Init+0x324>)
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f70:	4b1a      	ldr	r3, [pc, #104]	@ (8002fdc <HAL_GPIO_Init+0x324>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f94:	4a11      	ldr	r2, [pc, #68]	@ (8002fdc <HAL_GPIO_Init+0x324>)
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	61fb      	str	r3, [r7, #28]
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	2b0f      	cmp	r3, #15
 8002fa4:	f67f ae96 	bls.w	8002cd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fa8:	bf00      	nop
 8002faa:	bf00      	nop
 8002fac:	3724      	adds	r7, #36	@ 0x24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	40013800 	.word	0x40013800
 8002fc0:	40020000 	.word	0x40020000
 8002fc4:	40020400 	.word	0x40020400
 8002fc8:	40020800 	.word	0x40020800
 8002fcc:	40020c00 	.word	0x40020c00
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40021400 	.word	0x40021400
 8002fd8:	40021800 	.word	0x40021800
 8002fdc:	40013c00 	.word	0x40013c00

08002fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	807b      	strh	r3, [r7, #2]
 8002fec:	4613      	mov	r3, r2
 8002fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ff0:	787b      	ldrb	r3, [r7, #1]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ff6:	887a      	ldrh	r2, [r7, #2]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ffc:	e003      	b.n	8003006 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ffe:	887b      	ldrh	r3, [r7, #2]
 8003000:	041a      	lsls	r2, r3, #16
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	619a      	str	r2, [r3, #24]
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
	...

08003014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e0cc      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003028:	4b68      	ldr	r3, [pc, #416]	@ (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d90c      	bls.n	8003050 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003036:	4b65      	ldr	r3, [pc, #404]	@ (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800303e:	4b63      	ldr	r3, [pc, #396]	@ (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d001      	beq.n	8003050 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0b8      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d020      	beq.n	800309e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003068:	4b59      	ldr	r3, [pc, #356]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	4a58      	ldr	r2, [pc, #352]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003072:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003080:	4b53      	ldr	r3, [pc, #332]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	4a52      	ldr	r2, [pc, #328]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800308a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800308c:	4b50      	ldr	r3, [pc, #320]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	494d      	ldr	r1, [pc, #308]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	4313      	orrs	r3, r2
 800309c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d044      	beq.n	8003134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d107      	bne.n	80030c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	4b47      	ldr	r3, [pc, #284]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d119      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e07f      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d003      	beq.n	80030d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d107      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d2:	4b3f      	ldr	r3, [pc, #252]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d109      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e06f      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e2:	4b3b      	ldr	r3, [pc, #236]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e067      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030f2:	4b37      	ldr	r3, [pc, #220]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f023 0203 	bic.w	r2, r3, #3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4934      	ldr	r1, [pc, #208]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003100:	4313      	orrs	r3, r2
 8003102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003104:	f7ff fcc2 	bl	8002a8c <HAL_GetTick>
 8003108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310a:	e00a      	b.n	8003122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800310c:	f7ff fcbe 	bl	8002a8c <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800311a:	4293      	cmp	r3, r2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e04f      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003122:	4b2b      	ldr	r3, [pc, #172]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 020c 	and.w	r2, r3, #12
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	429a      	cmp	r2, r3
 8003132:	d1eb      	bne.n	800310c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003134:	4b25      	ldr	r3, [pc, #148]	@ (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d20c      	bcs.n	800315c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003142:	4b22      	ldr	r3, [pc, #136]	@ (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800314a:	4b20      	ldr	r3, [pc, #128]	@ (80031cc <HAL_RCC_ClockConfig+0x1b8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d001      	beq.n	800315c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e032      	b.n	80031c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d008      	beq.n	800317a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003168:	4b19      	ldr	r3, [pc, #100]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	4916      	ldr	r1, [pc, #88]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	4313      	orrs	r3, r2
 8003178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d009      	beq.n	800319a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003186:	4b12      	ldr	r3, [pc, #72]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	490e      	ldr	r1, [pc, #56]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	4313      	orrs	r3, r2
 8003198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800319a:	f000 f855 	bl	8003248 <HAL_RCC_GetSysClockFreq>
 800319e:	4602      	mov	r2, r0
 80031a0:	4b0b      	ldr	r3, [pc, #44]	@ (80031d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	091b      	lsrs	r3, r3, #4
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	490a      	ldr	r1, [pc, #40]	@ (80031d4 <HAL_RCC_ClockConfig+0x1c0>)
 80031ac:	5ccb      	ldrb	r3, [r1, r3]
 80031ae:	fa22 f303 	lsr.w	r3, r2, r3
 80031b2:	4a09      	ldr	r2, [pc, #36]	@ (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80031b6:	4b09      	ldr	r3, [pc, #36]	@ (80031dc <HAL_RCC_ClockConfig+0x1c8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff fc22 	bl	8002a04 <HAL_InitTick>

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40023c00 	.word	0x40023c00
 80031d0:	40023800 	.word	0x40023800
 80031d4:	080056c4 	.word	0x080056c4
 80031d8:	20000018 	.word	0x20000018
 80031dc:	2000004c 	.word	0x2000004c

080031e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e4:	4b03      	ldr	r3, [pc, #12]	@ (80031f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031e6:	681b      	ldr	r3, [r3, #0]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	20000018 	.word	0x20000018

080031f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031fc:	f7ff fff0 	bl	80031e0 <HAL_RCC_GetHCLKFreq>
 8003200:	4602      	mov	r2, r0
 8003202:	4b05      	ldr	r3, [pc, #20]	@ (8003218 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	0a9b      	lsrs	r3, r3, #10
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	4903      	ldr	r1, [pc, #12]	@ (800321c <HAL_RCC_GetPCLK1Freq+0x24>)
 800320e:	5ccb      	ldrb	r3, [r1, r3]
 8003210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003214:	4618      	mov	r0, r3
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40023800 	.word	0x40023800
 800321c:	080056d4 	.word	0x080056d4

08003220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003224:	f7ff ffdc 	bl	80031e0 <HAL_RCC_GetHCLKFreq>
 8003228:	4602      	mov	r2, r0
 800322a:	4b05      	ldr	r3, [pc, #20]	@ (8003240 <HAL_RCC_GetPCLK2Freq+0x20>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	0b5b      	lsrs	r3, r3, #13
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	4903      	ldr	r1, [pc, #12]	@ (8003244 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003236:	5ccb      	ldrb	r3, [r1, r3]
 8003238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800323c:	4618      	mov	r0, r3
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40023800 	.word	0x40023800
 8003244:	080056d4 	.word	0x080056d4

08003248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800324c:	b0ae      	sub	sp, #184	@ 0xb8
 800324e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800326e:	4bcb      	ldr	r3, [pc, #812]	@ (800359c <HAL_RCC_GetSysClockFreq+0x354>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 030c 	and.w	r3, r3, #12
 8003276:	2b0c      	cmp	r3, #12
 8003278:	f200 8206 	bhi.w	8003688 <HAL_RCC_GetSysClockFreq+0x440>
 800327c:	a201      	add	r2, pc, #4	@ (adr r2, 8003284 <HAL_RCC_GetSysClockFreq+0x3c>)
 800327e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003282:	bf00      	nop
 8003284:	080032b9 	.word	0x080032b9
 8003288:	08003689 	.word	0x08003689
 800328c:	08003689 	.word	0x08003689
 8003290:	08003689 	.word	0x08003689
 8003294:	080032c1 	.word	0x080032c1
 8003298:	08003689 	.word	0x08003689
 800329c:	08003689 	.word	0x08003689
 80032a0:	08003689 	.word	0x08003689
 80032a4:	080032c9 	.word	0x080032c9
 80032a8:	08003689 	.word	0x08003689
 80032ac:	08003689 	.word	0x08003689
 80032b0:	08003689 	.word	0x08003689
 80032b4:	080034b9 	.word	0x080034b9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032b8:	4bb9      	ldr	r3, [pc, #740]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80032ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80032be:	e1e7      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032c0:	4bb8      	ldr	r3, [pc, #736]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80032c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80032c6:	e1e3      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032c8:	4bb4      	ldr	r3, [pc, #720]	@ (800359c <HAL_RCC_GetSysClockFreq+0x354>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032d4:	4bb1      	ldr	r3, [pc, #708]	@ (800359c <HAL_RCC_GetSysClockFreq+0x354>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d071      	beq.n	80033c4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032e0:	4bae      	ldr	r3, [pc, #696]	@ (800359c <HAL_RCC_GetSysClockFreq+0x354>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	099b      	lsrs	r3, r3, #6
 80032e6:	2200      	movs	r2, #0
 80032e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80032ec:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80032f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80032fc:	2300      	movs	r3, #0
 80032fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003302:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003306:	4622      	mov	r2, r4
 8003308:	462b      	mov	r3, r5
 800330a:	f04f 0000 	mov.w	r0, #0
 800330e:	f04f 0100 	mov.w	r1, #0
 8003312:	0159      	lsls	r1, r3, #5
 8003314:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003318:	0150      	lsls	r0, r2, #5
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	4621      	mov	r1, r4
 8003320:	1a51      	subs	r1, r2, r1
 8003322:	6439      	str	r1, [r7, #64]	@ 0x40
 8003324:	4629      	mov	r1, r5
 8003326:	eb63 0301 	sbc.w	r3, r3, r1
 800332a:	647b      	str	r3, [r7, #68]	@ 0x44
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003338:	4649      	mov	r1, r9
 800333a:	018b      	lsls	r3, r1, #6
 800333c:	4641      	mov	r1, r8
 800333e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003342:	4641      	mov	r1, r8
 8003344:	018a      	lsls	r2, r1, #6
 8003346:	4641      	mov	r1, r8
 8003348:	1a51      	subs	r1, r2, r1
 800334a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800334c:	4649      	mov	r1, r9
 800334e:	eb63 0301 	sbc.w	r3, r3, r1
 8003352:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003360:	4649      	mov	r1, r9
 8003362:	00cb      	lsls	r3, r1, #3
 8003364:	4641      	mov	r1, r8
 8003366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800336a:	4641      	mov	r1, r8
 800336c:	00ca      	lsls	r2, r1, #3
 800336e:	4610      	mov	r0, r2
 8003370:	4619      	mov	r1, r3
 8003372:	4603      	mov	r3, r0
 8003374:	4622      	mov	r2, r4
 8003376:	189b      	adds	r3, r3, r2
 8003378:	633b      	str	r3, [r7, #48]	@ 0x30
 800337a:	462b      	mov	r3, r5
 800337c:	460a      	mov	r2, r1
 800337e:	eb42 0303 	adc.w	r3, r2, r3
 8003382:	637b      	str	r3, [r7, #52]	@ 0x34
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003390:	4629      	mov	r1, r5
 8003392:	024b      	lsls	r3, r1, #9
 8003394:	4621      	mov	r1, r4
 8003396:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800339a:	4621      	mov	r1, r4
 800339c:	024a      	lsls	r2, r1, #9
 800339e:	4610      	mov	r0, r2
 80033a0:	4619      	mov	r1, r3
 80033a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033a6:	2200      	movs	r2, #0
 80033a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80033ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80033b0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80033b4:	f7fc ff8c 	bl	80002d0 <__aeabi_uldivmod>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4613      	mov	r3, r2
 80033be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033c2:	e067      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033c4:	4b75      	ldr	r3, [pc, #468]	@ (800359c <HAL_RCC_GetSysClockFreq+0x354>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	099b      	lsrs	r3, r3, #6
 80033ca:	2200      	movs	r2, #0
 80033cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80033d0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80033d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033de:	2300      	movs	r3, #0
 80033e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80033e2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80033e6:	4622      	mov	r2, r4
 80033e8:	462b      	mov	r3, r5
 80033ea:	f04f 0000 	mov.w	r0, #0
 80033ee:	f04f 0100 	mov.w	r1, #0
 80033f2:	0159      	lsls	r1, r3, #5
 80033f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033f8:	0150      	lsls	r0, r2, #5
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	4621      	mov	r1, r4
 8003400:	1a51      	subs	r1, r2, r1
 8003402:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003404:	4629      	mov	r1, r5
 8003406:	eb63 0301 	sbc.w	r3, r3, r1
 800340a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003418:	4649      	mov	r1, r9
 800341a:	018b      	lsls	r3, r1, #6
 800341c:	4641      	mov	r1, r8
 800341e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003422:	4641      	mov	r1, r8
 8003424:	018a      	lsls	r2, r1, #6
 8003426:	4641      	mov	r1, r8
 8003428:	ebb2 0a01 	subs.w	sl, r2, r1
 800342c:	4649      	mov	r1, r9
 800342e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	f04f 0300 	mov.w	r3, #0
 800343a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800343e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003442:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003446:	4692      	mov	sl, r2
 8003448:	469b      	mov	fp, r3
 800344a:	4623      	mov	r3, r4
 800344c:	eb1a 0303 	adds.w	r3, sl, r3
 8003450:	623b      	str	r3, [r7, #32]
 8003452:	462b      	mov	r3, r5
 8003454:	eb4b 0303 	adc.w	r3, fp, r3
 8003458:	627b      	str	r3, [r7, #36]	@ 0x24
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	f04f 0300 	mov.w	r3, #0
 8003462:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003466:	4629      	mov	r1, r5
 8003468:	028b      	lsls	r3, r1, #10
 800346a:	4621      	mov	r1, r4
 800346c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003470:	4621      	mov	r1, r4
 8003472:	028a      	lsls	r2, r1, #10
 8003474:	4610      	mov	r0, r2
 8003476:	4619      	mov	r1, r3
 8003478:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800347c:	2200      	movs	r2, #0
 800347e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003480:	677a      	str	r2, [r7, #116]	@ 0x74
 8003482:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003486:	f7fc ff23 	bl	80002d0 <__aeabi_uldivmod>
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	4613      	mov	r3, r2
 8003490:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003494:	4b41      	ldr	r3, [pc, #260]	@ (800359c <HAL_RCC_GetSysClockFreq+0x354>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	0c1b      	lsrs	r3, r3, #16
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	3301      	adds	r3, #1
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80034a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80034aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80034ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80034b6:	e0eb      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034b8:	4b38      	ldr	r3, [pc, #224]	@ (800359c <HAL_RCC_GetSysClockFreq+0x354>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034c4:	4b35      	ldr	r3, [pc, #212]	@ (800359c <HAL_RCC_GetSysClockFreq+0x354>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d06b      	beq.n	80035a8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d0:	4b32      	ldr	r3, [pc, #200]	@ (800359c <HAL_RCC_GetSysClockFreq+0x354>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	099b      	lsrs	r3, r3, #6
 80034d6:	2200      	movs	r2, #0
 80034d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80034da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80034dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80034e4:	2300      	movs	r3, #0
 80034e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80034e8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80034ec:	4622      	mov	r2, r4
 80034ee:	462b      	mov	r3, r5
 80034f0:	f04f 0000 	mov.w	r0, #0
 80034f4:	f04f 0100 	mov.w	r1, #0
 80034f8:	0159      	lsls	r1, r3, #5
 80034fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034fe:	0150      	lsls	r0, r2, #5
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4621      	mov	r1, r4
 8003506:	1a51      	subs	r1, r2, r1
 8003508:	61b9      	str	r1, [r7, #24]
 800350a:	4629      	mov	r1, r5
 800350c:	eb63 0301 	sbc.w	r3, r3, r1
 8003510:	61fb      	str	r3, [r7, #28]
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800351e:	4659      	mov	r1, fp
 8003520:	018b      	lsls	r3, r1, #6
 8003522:	4651      	mov	r1, sl
 8003524:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003528:	4651      	mov	r1, sl
 800352a:	018a      	lsls	r2, r1, #6
 800352c:	4651      	mov	r1, sl
 800352e:	ebb2 0801 	subs.w	r8, r2, r1
 8003532:	4659      	mov	r1, fp
 8003534:	eb63 0901 	sbc.w	r9, r3, r1
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003544:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003548:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800354c:	4690      	mov	r8, r2
 800354e:	4699      	mov	r9, r3
 8003550:	4623      	mov	r3, r4
 8003552:	eb18 0303 	adds.w	r3, r8, r3
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	462b      	mov	r3, r5
 800355a:	eb49 0303 	adc.w	r3, r9, r3
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	f04f 0300 	mov.w	r3, #0
 8003568:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800356c:	4629      	mov	r1, r5
 800356e:	024b      	lsls	r3, r1, #9
 8003570:	4621      	mov	r1, r4
 8003572:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003576:	4621      	mov	r1, r4
 8003578:	024a      	lsls	r2, r1, #9
 800357a:	4610      	mov	r0, r2
 800357c:	4619      	mov	r1, r3
 800357e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003582:	2200      	movs	r2, #0
 8003584:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003586:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003588:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800358c:	f7fc fea0 	bl	80002d0 <__aeabi_uldivmod>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4613      	mov	r3, r2
 8003596:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800359a:	e065      	b.n	8003668 <HAL_RCC_GetSysClockFreq+0x420>
 800359c:	40023800 	.word	0x40023800
 80035a0:	00f42400 	.word	0x00f42400
 80035a4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035a8:	4b3d      	ldr	r3, [pc, #244]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x458>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	099b      	lsrs	r3, r3, #6
 80035ae:	2200      	movs	r2, #0
 80035b0:	4618      	mov	r0, r3
 80035b2:	4611      	mov	r1, r2
 80035b4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80035ba:	2300      	movs	r3, #0
 80035bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80035be:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80035c2:	4642      	mov	r2, r8
 80035c4:	464b      	mov	r3, r9
 80035c6:	f04f 0000 	mov.w	r0, #0
 80035ca:	f04f 0100 	mov.w	r1, #0
 80035ce:	0159      	lsls	r1, r3, #5
 80035d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035d4:	0150      	lsls	r0, r2, #5
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	4641      	mov	r1, r8
 80035dc:	1a51      	subs	r1, r2, r1
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	4649      	mov	r1, r9
 80035e2:	eb63 0301 	sbc.w	r3, r3, r1
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80035f4:	4659      	mov	r1, fp
 80035f6:	018b      	lsls	r3, r1, #6
 80035f8:	4651      	mov	r1, sl
 80035fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035fe:	4651      	mov	r1, sl
 8003600:	018a      	lsls	r2, r1, #6
 8003602:	4651      	mov	r1, sl
 8003604:	1a54      	subs	r4, r2, r1
 8003606:	4659      	mov	r1, fp
 8003608:	eb63 0501 	sbc.w	r5, r3, r1
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	00eb      	lsls	r3, r5, #3
 8003616:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800361a:	00e2      	lsls	r2, r4, #3
 800361c:	4614      	mov	r4, r2
 800361e:	461d      	mov	r5, r3
 8003620:	4643      	mov	r3, r8
 8003622:	18e3      	adds	r3, r4, r3
 8003624:	603b      	str	r3, [r7, #0]
 8003626:	464b      	mov	r3, r9
 8003628:	eb45 0303 	adc.w	r3, r5, r3
 800362c:	607b      	str	r3, [r7, #4]
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	e9d7 4500 	ldrd	r4, r5, [r7]
 800363a:	4629      	mov	r1, r5
 800363c:	028b      	lsls	r3, r1, #10
 800363e:	4621      	mov	r1, r4
 8003640:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003644:	4621      	mov	r1, r4
 8003646:	028a      	lsls	r2, r1, #10
 8003648:	4610      	mov	r0, r2
 800364a:	4619      	mov	r1, r3
 800364c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003650:	2200      	movs	r2, #0
 8003652:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003654:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003656:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800365a:	f7fc fe39 	bl	80002d0 <__aeabi_uldivmod>
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	4613      	mov	r3, r2
 8003664:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003668:	4b0d      	ldr	r3, [pc, #52]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x458>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	0f1b      	lsrs	r3, r3, #28
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003676:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800367a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800367e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003682:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003686:	e003      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003688:	4b06      	ldr	r3, [pc, #24]	@ (80036a4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800368a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800368e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003690:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003694:	4618      	mov	r0, r3
 8003696:	37b8      	adds	r7, #184	@ 0xb8
 8003698:	46bd      	mov	sp, r7
 800369a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800
 80036a4:	00f42400 	.word	0x00f42400

080036a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e28d      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 8083 	beq.w	80037ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80036c8:	4b94      	ldr	r3, [pc, #592]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 030c 	and.w	r3, r3, #12
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d019      	beq.n	8003708 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80036d4:	4b91      	ldr	r3, [pc, #580]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 030c 	and.w	r3, r3, #12
        || \
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d106      	bne.n	80036ee <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80036e0:	4b8e      	ldr	r3, [pc, #568]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036ec:	d00c      	beq.n	8003708 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ee:	4b8b      	ldr	r3, [pc, #556]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80036f6:	2b0c      	cmp	r3, #12
 80036f8:	d112      	bne.n	8003720 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036fa:	4b88      	ldr	r3, [pc, #544]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003702:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003706:	d10b      	bne.n	8003720 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003708:	4b84      	ldr	r3, [pc, #528]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d05b      	beq.n	80037cc <HAL_RCC_OscConfig+0x124>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d157      	bne.n	80037cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e25a      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003728:	d106      	bne.n	8003738 <HAL_RCC_OscConfig+0x90>
 800372a:	4b7c      	ldr	r3, [pc, #496]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a7b      	ldr	r2, [pc, #492]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 8003730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	e01d      	b.n	8003774 <HAL_RCC_OscConfig+0xcc>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003740:	d10c      	bne.n	800375c <HAL_RCC_OscConfig+0xb4>
 8003742:	4b76      	ldr	r3, [pc, #472]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a75      	ldr	r2, [pc, #468]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 8003748:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	4b73      	ldr	r3, [pc, #460]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a72      	ldr	r2, [pc, #456]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 8003754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	e00b      	b.n	8003774 <HAL_RCC_OscConfig+0xcc>
 800375c:	4b6f      	ldr	r3, [pc, #444]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a6e      	ldr	r2, [pc, #440]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 8003762:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003766:	6013      	str	r3, [r2, #0]
 8003768:	4b6c      	ldr	r3, [pc, #432]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a6b      	ldr	r2, [pc, #428]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 800376e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d013      	beq.n	80037a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377c:	f7ff f986 	bl	8002a8c <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003784:	f7ff f982 	bl	8002a8c <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b64      	cmp	r3, #100	@ 0x64
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e21f      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003796:	4b61      	ldr	r3, [pc, #388]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0xdc>
 80037a2:	e014      	b.n	80037ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a4:	f7ff f972 	bl	8002a8c <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037ac:	f7ff f96e 	bl	8002a8c <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b64      	cmp	r3, #100	@ 0x64
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e20b      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037be:	4b57      	ldr	r3, [pc, #348]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f0      	bne.n	80037ac <HAL_RCC_OscConfig+0x104>
 80037ca:	e000      	b.n	80037ce <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d06f      	beq.n	80038ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80037da:	4b50      	ldr	r3, [pc, #320]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 030c 	and.w	r3, r3, #12
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d017      	beq.n	8003816 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80037e6:	4b4d      	ldr	r3, [pc, #308]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 030c 	and.w	r3, r3, #12
        || \
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d105      	bne.n	80037fe <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80037f2:	4b4a      	ldr	r3, [pc, #296]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00b      	beq.n	8003816 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037fe:	4b47      	ldr	r3, [pc, #284]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003806:	2b0c      	cmp	r3, #12
 8003808:	d11c      	bne.n	8003844 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800380a:	4b44      	ldr	r3, [pc, #272]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d116      	bne.n	8003844 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003816:	4b41      	ldr	r3, [pc, #260]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d005      	beq.n	800382e <HAL_RCC_OscConfig+0x186>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d001      	beq.n	800382e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e1d3      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800382e:	4b3b      	ldr	r3, [pc, #236]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4937      	ldr	r1, [pc, #220]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 800383e:	4313      	orrs	r3, r2
 8003840:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003842:	e03a      	b.n	80038ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d020      	beq.n	800388e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800384c:	4b34      	ldr	r3, [pc, #208]	@ (8003920 <HAL_RCC_OscConfig+0x278>)
 800384e:	2201      	movs	r2, #1
 8003850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003852:	f7ff f91b 	bl	8002a8c <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800385a:	f7ff f917 	bl	8002a8c <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e1b4      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386c:	4b2b      	ldr	r3, [pc, #172]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0f0      	beq.n	800385a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003878:	4b28      	ldr	r3, [pc, #160]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	4925      	ldr	r1, [pc, #148]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 8003888:	4313      	orrs	r3, r2
 800388a:	600b      	str	r3, [r1, #0]
 800388c:	e015      	b.n	80038ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800388e:	4b24      	ldr	r3, [pc, #144]	@ (8003920 <HAL_RCC_OscConfig+0x278>)
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003894:	f7ff f8fa 	bl	8002a8c <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800389c:	f7ff f8f6 	bl	8002a8c <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e193      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ae:	4b1b      	ldr	r3, [pc, #108]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f0      	bne.n	800389c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d036      	beq.n	8003934 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d016      	beq.n	80038fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ce:	4b15      	ldr	r3, [pc, #84]	@ (8003924 <HAL_RCC_OscConfig+0x27c>)
 80038d0:	2201      	movs	r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d4:	f7ff f8da 	bl	8002a8c <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038dc:	f7ff f8d6 	bl	8002a8c <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e173      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ee:	4b0b      	ldr	r3, [pc, #44]	@ (800391c <HAL_RCC_OscConfig+0x274>)
 80038f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0f0      	beq.n	80038dc <HAL_RCC_OscConfig+0x234>
 80038fa:	e01b      	b.n	8003934 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038fc:	4b09      	ldr	r3, [pc, #36]	@ (8003924 <HAL_RCC_OscConfig+0x27c>)
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003902:	f7ff f8c3 	bl	8002a8c <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003908:	e00e      	b.n	8003928 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800390a:	f7ff f8bf 	bl	8002a8c <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d907      	bls.n	8003928 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e15c      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
 800391c:	40023800 	.word	0x40023800
 8003920:	42470000 	.word	0x42470000
 8003924:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003928:	4b8a      	ldr	r3, [pc, #552]	@ (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 800392a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1ea      	bne.n	800390a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 8097 	beq.w	8003a70 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003942:	2300      	movs	r3, #0
 8003944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003946:	4b83      	ldr	r3, [pc, #524]	@ (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10f      	bne.n	8003972 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	4b7f      	ldr	r3, [pc, #508]	@ (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395a:	4a7e      	ldr	r2, [pc, #504]	@ (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 800395c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003960:	6413      	str	r3, [r2, #64]	@ 0x40
 8003962:	4b7c      	ldr	r3, [pc, #496]	@ (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800396a:	60bb      	str	r3, [r7, #8]
 800396c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800396e:	2301      	movs	r3, #1
 8003970:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003972:	4b79      	ldr	r3, [pc, #484]	@ (8003b58 <HAL_RCC_OscConfig+0x4b0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800397a:	2b00      	cmp	r3, #0
 800397c:	d118      	bne.n	80039b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800397e:	4b76      	ldr	r3, [pc, #472]	@ (8003b58 <HAL_RCC_OscConfig+0x4b0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a75      	ldr	r2, [pc, #468]	@ (8003b58 <HAL_RCC_OscConfig+0x4b0>)
 8003984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800398a:	f7ff f87f 	bl	8002a8c <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003992:	f7ff f87b 	bl	8002a8c <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e118      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a4:	4b6c      	ldr	r3, [pc, #432]	@ (8003b58 <HAL_RCC_OscConfig+0x4b0>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d106      	bne.n	80039c6 <HAL_RCC_OscConfig+0x31e>
 80039b8:	4b66      	ldr	r3, [pc, #408]	@ (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 80039ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039bc:	4a65      	ldr	r2, [pc, #404]	@ (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80039c4:	e01c      	b.n	8003a00 <HAL_RCC_OscConfig+0x358>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	2b05      	cmp	r3, #5
 80039cc:	d10c      	bne.n	80039e8 <HAL_RCC_OscConfig+0x340>
 80039ce:	4b61      	ldr	r3, [pc, #388]	@ (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 80039d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d2:	4a60      	ldr	r2, [pc, #384]	@ (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 80039d4:	f043 0304 	orr.w	r3, r3, #4
 80039d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80039da:	4b5e      	ldr	r3, [pc, #376]	@ (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 80039dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039de:	4a5d      	ldr	r2, [pc, #372]	@ (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 80039e0:	f043 0301 	orr.w	r3, r3, #1
 80039e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80039e6:	e00b      	b.n	8003a00 <HAL_RCC_OscConfig+0x358>
 80039e8:	4b5a      	ldr	r3, [pc, #360]	@ (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 80039ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ec:	4a59      	ldr	r2, [pc, #356]	@ (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 80039ee:	f023 0301 	bic.w	r3, r3, #1
 80039f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80039f4:	4b57      	ldr	r3, [pc, #348]	@ (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 80039f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f8:	4a56      	ldr	r2, [pc, #344]	@ (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 80039fa:	f023 0304 	bic.w	r3, r3, #4
 80039fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d015      	beq.n	8003a34 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a08:	f7ff f840 	bl	8002a8c <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0e:	e00a      	b.n	8003a26 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a10:	f7ff f83c 	bl	8002a8c <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e0d7      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a26:	4b4b      	ldr	r3, [pc, #300]	@ (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0ee      	beq.n	8003a10 <HAL_RCC_OscConfig+0x368>
 8003a32:	e014      	b.n	8003a5e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a34:	f7ff f82a 	bl	8002a8c <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a3a:	e00a      	b.n	8003a52 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a3c:	f7ff f826 	bl	8002a8c <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e0c1      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a52:	4b40      	ldr	r3, [pc, #256]	@ (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1ee      	bne.n	8003a3c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a5e:	7dfb      	ldrb	r3, [r7, #23]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d105      	bne.n	8003a70 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a64:	4b3b      	ldr	r3, [pc, #236]	@ (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a68:	4a3a      	ldr	r2, [pc, #232]	@ (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003a6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a6e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 80ad 	beq.w	8003bd4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a7a:	4b36      	ldr	r3, [pc, #216]	@ (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d060      	beq.n	8003b48 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d145      	bne.n	8003b1a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8e:	4b33      	ldr	r3, [pc, #204]	@ (8003b5c <HAL_RCC_OscConfig+0x4b4>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a94:	f7fe fffa 	bl	8002a8c <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a9c:	f7fe fff6 	bl	8002a8c <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e093      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aae:	4b29      	ldr	r3, [pc, #164]	@ (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69da      	ldr	r2, [r3, #28]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac8:	019b      	lsls	r3, r3, #6
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad0:	085b      	lsrs	r3, r3, #1
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	041b      	lsls	r3, r3, #16
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003adc:	061b      	lsls	r3, r3, #24
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae4:	071b      	lsls	r3, r3, #28
 8003ae6:	491b      	ldr	r1, [pc, #108]	@ (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aec:	4b1b      	ldr	r3, [pc, #108]	@ (8003b5c <HAL_RCC_OscConfig+0x4b4>)
 8003aee:	2201      	movs	r2, #1
 8003af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af2:	f7fe ffcb 	bl	8002a8c <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003afa:	f7fe ffc7 	bl	8002a8c <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e064      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b0c:	4b11      	ldr	r3, [pc, #68]	@ (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_OscConfig+0x452>
 8003b18:	e05c      	b.n	8003bd4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1a:	4b10      	ldr	r3, [pc, #64]	@ (8003b5c <HAL_RCC_OscConfig+0x4b4>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b20:	f7fe ffb4 	bl	8002a8c <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b28:	f7fe ffb0 	bl	8002a8c <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e04d      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3a:	4b06      	ldr	r3, [pc, #24]	@ (8003b54 <HAL_RCC_OscConfig+0x4ac>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0x480>
 8003b46:	e045      	b.n	8003bd4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d107      	bne.n	8003b60 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e040      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
 8003b54:	40023800 	.word	0x40023800
 8003b58:	40007000 	.word	0x40007000
 8003b5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b60:	4b1f      	ldr	r3, [pc, #124]	@ (8003be0 <HAL_RCC_OscConfig+0x538>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d030      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d129      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d122      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b90:	4013      	ands	r3, r2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d119      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba6:	085b      	lsrs	r3, r3, #1
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d10f      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d107      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d001      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e000      	b.n	8003bd6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40023800 	.word	0x40023800

08003be4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e07b      	b.n	8003cee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d108      	bne.n	8003c10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c06:	d009      	beq.n	8003c1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	61da      	str	r2, [r3, #28]
 8003c0e:	e005      	b.n	8003c1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d106      	bne.n	8003c3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7fc ff7e 	bl	8000b38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c64:	431a      	orrs	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca0:	ea42 0103 	orr.w	r1, r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	0c1b      	lsrs	r3, r3, #16
 8003cba:	f003 0104 	and.w	r1, r3, #4
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc2:	f003 0210 	and.w	r2, r3, #16
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69da      	ldr	r2, [r3, #28]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cdc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b082      	sub	sp, #8
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e042      	b.n	8003d8e <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d106      	bne.n	8003d22 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7fd f8b9 	bl	8000e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2224      	movs	r2, #36	@ 0x24
 8003d26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68da      	ldr	r2, [r3, #12]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d38:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f82c 	bl	8003d98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691a      	ldr	r2, [r3, #16]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d4e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695a      	ldr	r2, [r3, #20]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d5e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d6e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2220      	movs	r2, #32
 8003d82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d9c:	b0c0      	sub	sp, #256	@ 0x100
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db4:	68d9      	ldr	r1, [r3, #12]
 8003db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	ea40 0301 	orr.w	r3, r0, r1
 8003dc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003df0:	f021 010c 	bic.w	r1, r1, #12
 8003df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003dfe:	430b      	orrs	r3, r1
 8003e00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e12:	6999      	ldr	r1, [r3, #24]
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	ea40 0301 	orr.w	r3, r0, r1
 8003e1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	4b8f      	ldr	r3, [pc, #572]	@ (8004064 <UART_SetConfig+0x2cc>)
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d005      	beq.n	8003e38 <UART_SetConfig+0xa0>
 8003e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	4b8d      	ldr	r3, [pc, #564]	@ (8004068 <UART_SetConfig+0x2d0>)
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d104      	bne.n	8003e42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e38:	f7ff f9f2 	bl	8003220 <HAL_RCC_GetPCLK2Freq>
 8003e3c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e40:	e003      	b.n	8003e4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e42:	f7ff f9d9 	bl	80031f8 <HAL_RCC_GetPCLK1Freq>
 8003e46:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e54:	f040 810c 	bne.w	8004070 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e62:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e6a:	4622      	mov	r2, r4
 8003e6c:	462b      	mov	r3, r5
 8003e6e:	1891      	adds	r1, r2, r2
 8003e70:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e72:	415b      	adcs	r3, r3
 8003e74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e7a:	4621      	mov	r1, r4
 8003e7c:	eb12 0801 	adds.w	r8, r2, r1
 8003e80:	4629      	mov	r1, r5
 8003e82:	eb43 0901 	adc.w	r9, r3, r1
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e9a:	4690      	mov	r8, r2
 8003e9c:	4699      	mov	r9, r3
 8003e9e:	4623      	mov	r3, r4
 8003ea0:	eb18 0303 	adds.w	r3, r8, r3
 8003ea4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ea8:	462b      	mov	r3, r5
 8003eaa:	eb49 0303 	adc.w	r3, r9, r3
 8003eae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ebe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003ec2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	18db      	adds	r3, r3, r3
 8003eca:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ecc:	4613      	mov	r3, r2
 8003ece:	eb42 0303 	adc.w	r3, r2, r3
 8003ed2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ed4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ed8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003edc:	f7fc f9f8 	bl	80002d0 <__aeabi_uldivmod>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4b61      	ldr	r3, [pc, #388]	@ (800406c <UART_SetConfig+0x2d4>)
 8003ee6:	fba3 2302 	umull	r2, r3, r3, r2
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	011c      	lsls	r4, r3, #4
 8003eee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ef8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003efc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f00:	4642      	mov	r2, r8
 8003f02:	464b      	mov	r3, r9
 8003f04:	1891      	adds	r1, r2, r2
 8003f06:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f08:	415b      	adcs	r3, r3
 8003f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f10:	4641      	mov	r1, r8
 8003f12:	eb12 0a01 	adds.w	sl, r2, r1
 8003f16:	4649      	mov	r1, r9
 8003f18:	eb43 0b01 	adc.w	fp, r3, r1
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f30:	4692      	mov	sl, r2
 8003f32:	469b      	mov	fp, r3
 8003f34:	4643      	mov	r3, r8
 8003f36:	eb1a 0303 	adds.w	r3, sl, r3
 8003f3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f3e:	464b      	mov	r3, r9
 8003f40:	eb4b 0303 	adc.w	r3, fp, r3
 8003f44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f54:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	18db      	adds	r3, r3, r3
 8003f60:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f62:	4613      	mov	r3, r2
 8003f64:	eb42 0303 	adc.w	r3, r2, r3
 8003f68:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f72:	f7fc f9ad 	bl	80002d0 <__aeabi_uldivmod>
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	4b3b      	ldr	r3, [pc, #236]	@ (800406c <UART_SetConfig+0x2d4>)
 8003f7e:	fba3 2301 	umull	r2, r3, r3, r1
 8003f82:	095b      	lsrs	r3, r3, #5
 8003f84:	2264      	movs	r2, #100	@ 0x64
 8003f86:	fb02 f303 	mul.w	r3, r2, r3
 8003f8a:	1acb      	subs	r3, r1, r3
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f92:	4b36      	ldr	r3, [pc, #216]	@ (800406c <UART_SetConfig+0x2d4>)
 8003f94:	fba3 2302 	umull	r2, r3, r3, r2
 8003f98:	095b      	lsrs	r3, r3, #5
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003fa0:	441c      	add	r4, r3
 8003fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003fb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003fb4:	4642      	mov	r2, r8
 8003fb6:	464b      	mov	r3, r9
 8003fb8:	1891      	adds	r1, r2, r2
 8003fba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003fbc:	415b      	adcs	r3, r3
 8003fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003fc4:	4641      	mov	r1, r8
 8003fc6:	1851      	adds	r1, r2, r1
 8003fc8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003fca:	4649      	mov	r1, r9
 8003fcc:	414b      	adcs	r3, r1
 8003fce:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	f04f 0300 	mov.w	r3, #0
 8003fd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003fdc:	4659      	mov	r1, fp
 8003fde:	00cb      	lsls	r3, r1, #3
 8003fe0:	4651      	mov	r1, sl
 8003fe2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fe6:	4651      	mov	r1, sl
 8003fe8:	00ca      	lsls	r2, r1, #3
 8003fea:	4610      	mov	r0, r2
 8003fec:	4619      	mov	r1, r3
 8003fee:	4603      	mov	r3, r0
 8003ff0:	4642      	mov	r2, r8
 8003ff2:	189b      	adds	r3, r3, r2
 8003ff4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ff8:	464b      	mov	r3, r9
 8003ffa:	460a      	mov	r2, r1
 8003ffc:	eb42 0303 	adc.w	r3, r2, r3
 8004000:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004010:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004014:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004018:	460b      	mov	r3, r1
 800401a:	18db      	adds	r3, r3, r3
 800401c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800401e:	4613      	mov	r3, r2
 8004020:	eb42 0303 	adc.w	r3, r2, r3
 8004024:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004026:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800402a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800402e:	f7fc f94f 	bl	80002d0 <__aeabi_uldivmod>
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	4b0d      	ldr	r3, [pc, #52]	@ (800406c <UART_SetConfig+0x2d4>)
 8004038:	fba3 1302 	umull	r1, r3, r3, r2
 800403c:	095b      	lsrs	r3, r3, #5
 800403e:	2164      	movs	r1, #100	@ 0x64
 8004040:	fb01 f303 	mul.w	r3, r1, r3
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	3332      	adds	r3, #50	@ 0x32
 800404a:	4a08      	ldr	r2, [pc, #32]	@ (800406c <UART_SetConfig+0x2d4>)
 800404c:	fba2 2303 	umull	r2, r3, r2, r3
 8004050:	095b      	lsrs	r3, r3, #5
 8004052:	f003 0207 	and.w	r2, r3, #7
 8004056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4422      	add	r2, r4
 800405e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004060:	e106      	b.n	8004270 <UART_SetConfig+0x4d8>
 8004062:	bf00      	nop
 8004064:	40011000 	.word	0x40011000
 8004068:	40011400 	.word	0x40011400
 800406c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004074:	2200      	movs	r2, #0
 8004076:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800407a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800407e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004082:	4642      	mov	r2, r8
 8004084:	464b      	mov	r3, r9
 8004086:	1891      	adds	r1, r2, r2
 8004088:	6239      	str	r1, [r7, #32]
 800408a:	415b      	adcs	r3, r3
 800408c:	627b      	str	r3, [r7, #36]	@ 0x24
 800408e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004092:	4641      	mov	r1, r8
 8004094:	1854      	adds	r4, r2, r1
 8004096:	4649      	mov	r1, r9
 8004098:	eb43 0501 	adc.w	r5, r3, r1
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	00eb      	lsls	r3, r5, #3
 80040a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040aa:	00e2      	lsls	r2, r4, #3
 80040ac:	4614      	mov	r4, r2
 80040ae:	461d      	mov	r5, r3
 80040b0:	4643      	mov	r3, r8
 80040b2:	18e3      	adds	r3, r4, r3
 80040b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040b8:	464b      	mov	r3, r9
 80040ba:	eb45 0303 	adc.w	r3, r5, r3
 80040be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040d2:	f04f 0200 	mov.w	r2, #0
 80040d6:	f04f 0300 	mov.w	r3, #0
 80040da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80040de:	4629      	mov	r1, r5
 80040e0:	008b      	lsls	r3, r1, #2
 80040e2:	4621      	mov	r1, r4
 80040e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040e8:	4621      	mov	r1, r4
 80040ea:	008a      	lsls	r2, r1, #2
 80040ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80040f0:	f7fc f8ee 	bl	80002d0 <__aeabi_uldivmod>
 80040f4:	4602      	mov	r2, r0
 80040f6:	460b      	mov	r3, r1
 80040f8:	4b60      	ldr	r3, [pc, #384]	@ (800427c <UART_SetConfig+0x4e4>)
 80040fa:	fba3 2302 	umull	r2, r3, r3, r2
 80040fe:	095b      	lsrs	r3, r3, #5
 8004100:	011c      	lsls	r4, r3, #4
 8004102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004106:	2200      	movs	r2, #0
 8004108:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800410c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004110:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004114:	4642      	mov	r2, r8
 8004116:	464b      	mov	r3, r9
 8004118:	1891      	adds	r1, r2, r2
 800411a:	61b9      	str	r1, [r7, #24]
 800411c:	415b      	adcs	r3, r3
 800411e:	61fb      	str	r3, [r7, #28]
 8004120:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004124:	4641      	mov	r1, r8
 8004126:	1851      	adds	r1, r2, r1
 8004128:	6139      	str	r1, [r7, #16]
 800412a:	4649      	mov	r1, r9
 800412c:	414b      	adcs	r3, r1
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	f04f 0200 	mov.w	r2, #0
 8004134:	f04f 0300 	mov.w	r3, #0
 8004138:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800413c:	4659      	mov	r1, fp
 800413e:	00cb      	lsls	r3, r1, #3
 8004140:	4651      	mov	r1, sl
 8004142:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004146:	4651      	mov	r1, sl
 8004148:	00ca      	lsls	r2, r1, #3
 800414a:	4610      	mov	r0, r2
 800414c:	4619      	mov	r1, r3
 800414e:	4603      	mov	r3, r0
 8004150:	4642      	mov	r2, r8
 8004152:	189b      	adds	r3, r3, r2
 8004154:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004158:	464b      	mov	r3, r9
 800415a:	460a      	mov	r2, r1
 800415c:	eb42 0303 	adc.w	r3, r2, r3
 8004160:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800416e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	f04f 0300 	mov.w	r3, #0
 8004178:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800417c:	4649      	mov	r1, r9
 800417e:	008b      	lsls	r3, r1, #2
 8004180:	4641      	mov	r1, r8
 8004182:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004186:	4641      	mov	r1, r8
 8004188:	008a      	lsls	r2, r1, #2
 800418a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800418e:	f7fc f89f 	bl	80002d0 <__aeabi_uldivmod>
 8004192:	4602      	mov	r2, r0
 8004194:	460b      	mov	r3, r1
 8004196:	4611      	mov	r1, r2
 8004198:	4b38      	ldr	r3, [pc, #224]	@ (800427c <UART_SetConfig+0x4e4>)
 800419a:	fba3 2301 	umull	r2, r3, r3, r1
 800419e:	095b      	lsrs	r3, r3, #5
 80041a0:	2264      	movs	r2, #100	@ 0x64
 80041a2:	fb02 f303 	mul.w	r3, r2, r3
 80041a6:	1acb      	subs	r3, r1, r3
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	3332      	adds	r3, #50	@ 0x32
 80041ac:	4a33      	ldr	r2, [pc, #204]	@ (800427c <UART_SetConfig+0x4e4>)
 80041ae:	fba2 2303 	umull	r2, r3, r2, r3
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041b8:	441c      	add	r4, r3
 80041ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041be:	2200      	movs	r2, #0
 80041c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80041c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80041c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80041c8:	4642      	mov	r2, r8
 80041ca:	464b      	mov	r3, r9
 80041cc:	1891      	adds	r1, r2, r2
 80041ce:	60b9      	str	r1, [r7, #8]
 80041d0:	415b      	adcs	r3, r3
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041d8:	4641      	mov	r1, r8
 80041da:	1851      	adds	r1, r2, r1
 80041dc:	6039      	str	r1, [r7, #0]
 80041de:	4649      	mov	r1, r9
 80041e0:	414b      	adcs	r3, r1
 80041e2:	607b      	str	r3, [r7, #4]
 80041e4:	f04f 0200 	mov.w	r2, #0
 80041e8:	f04f 0300 	mov.w	r3, #0
 80041ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041f0:	4659      	mov	r1, fp
 80041f2:	00cb      	lsls	r3, r1, #3
 80041f4:	4651      	mov	r1, sl
 80041f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041fa:	4651      	mov	r1, sl
 80041fc:	00ca      	lsls	r2, r1, #3
 80041fe:	4610      	mov	r0, r2
 8004200:	4619      	mov	r1, r3
 8004202:	4603      	mov	r3, r0
 8004204:	4642      	mov	r2, r8
 8004206:	189b      	adds	r3, r3, r2
 8004208:	66bb      	str	r3, [r7, #104]	@ 0x68
 800420a:	464b      	mov	r3, r9
 800420c:	460a      	mov	r2, r1
 800420e:	eb42 0303 	adc.w	r3, r2, r3
 8004212:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	663b      	str	r3, [r7, #96]	@ 0x60
 800421e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800422c:	4649      	mov	r1, r9
 800422e:	008b      	lsls	r3, r1, #2
 8004230:	4641      	mov	r1, r8
 8004232:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004236:	4641      	mov	r1, r8
 8004238:	008a      	lsls	r2, r1, #2
 800423a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800423e:	f7fc f847 	bl	80002d0 <__aeabi_uldivmod>
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	4b0d      	ldr	r3, [pc, #52]	@ (800427c <UART_SetConfig+0x4e4>)
 8004248:	fba3 1302 	umull	r1, r3, r3, r2
 800424c:	095b      	lsrs	r3, r3, #5
 800424e:	2164      	movs	r1, #100	@ 0x64
 8004250:	fb01 f303 	mul.w	r3, r1, r3
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	3332      	adds	r3, #50	@ 0x32
 800425a:	4a08      	ldr	r2, [pc, #32]	@ (800427c <UART_SetConfig+0x4e4>)
 800425c:	fba2 2303 	umull	r2, r3, r2, r3
 8004260:	095b      	lsrs	r3, r3, #5
 8004262:	f003 020f 	and.w	r2, r3, #15
 8004266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4422      	add	r2, r4
 800426e:	609a      	str	r2, [r3, #8]
}
 8004270:	bf00      	nop
 8004272:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004276:	46bd      	mov	sp, r7
 8004278:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800427c:	51eb851f 	.word	0x51eb851f

08004280 <std>:
 8004280:	2300      	movs	r3, #0
 8004282:	b510      	push	{r4, lr}
 8004284:	4604      	mov	r4, r0
 8004286:	e9c0 3300 	strd	r3, r3, [r0]
 800428a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800428e:	6083      	str	r3, [r0, #8]
 8004290:	8181      	strh	r1, [r0, #12]
 8004292:	6643      	str	r3, [r0, #100]	@ 0x64
 8004294:	81c2      	strh	r2, [r0, #14]
 8004296:	6183      	str	r3, [r0, #24]
 8004298:	4619      	mov	r1, r3
 800429a:	2208      	movs	r2, #8
 800429c:	305c      	adds	r0, #92	@ 0x5c
 800429e:	f000 fab5 	bl	800480c <memset>
 80042a2:	4b0d      	ldr	r3, [pc, #52]	@ (80042d8 <std+0x58>)
 80042a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80042a6:	4b0d      	ldr	r3, [pc, #52]	@ (80042dc <std+0x5c>)
 80042a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80042aa:	4b0d      	ldr	r3, [pc, #52]	@ (80042e0 <std+0x60>)
 80042ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80042ae:	4b0d      	ldr	r3, [pc, #52]	@ (80042e4 <std+0x64>)
 80042b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80042b2:	4b0d      	ldr	r3, [pc, #52]	@ (80042e8 <std+0x68>)
 80042b4:	6224      	str	r4, [r4, #32]
 80042b6:	429c      	cmp	r4, r3
 80042b8:	d006      	beq.n	80042c8 <std+0x48>
 80042ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80042be:	4294      	cmp	r4, r2
 80042c0:	d002      	beq.n	80042c8 <std+0x48>
 80042c2:	33d0      	adds	r3, #208	@ 0xd0
 80042c4:	429c      	cmp	r4, r3
 80042c6:	d105      	bne.n	80042d4 <std+0x54>
 80042c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80042cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042d0:	f000 bb14 	b.w	80048fc <__retarget_lock_init_recursive>
 80042d4:	bd10      	pop	{r4, pc}
 80042d6:	bf00      	nop
 80042d8:	0800465d 	.word	0x0800465d
 80042dc:	0800467f 	.word	0x0800467f
 80042e0:	080046b7 	.word	0x080046b7
 80042e4:	080046db 	.word	0x080046db
 80042e8:	20000218 	.word	0x20000218

080042ec <stdio_exit_handler>:
 80042ec:	4a02      	ldr	r2, [pc, #8]	@ (80042f8 <stdio_exit_handler+0xc>)
 80042ee:	4903      	ldr	r1, [pc, #12]	@ (80042fc <stdio_exit_handler+0x10>)
 80042f0:	4803      	ldr	r0, [pc, #12]	@ (8004300 <stdio_exit_handler+0x14>)
 80042f2:	f000 b869 	b.w	80043c8 <_fwalk_sglue>
 80042f6:	bf00      	nop
 80042f8:	20000054 	.word	0x20000054
 80042fc:	080051a9 	.word	0x080051a9
 8004300:	20000064 	.word	0x20000064

08004304 <cleanup_stdio>:
 8004304:	6841      	ldr	r1, [r0, #4]
 8004306:	4b0c      	ldr	r3, [pc, #48]	@ (8004338 <cleanup_stdio+0x34>)
 8004308:	4299      	cmp	r1, r3
 800430a:	b510      	push	{r4, lr}
 800430c:	4604      	mov	r4, r0
 800430e:	d001      	beq.n	8004314 <cleanup_stdio+0x10>
 8004310:	f000 ff4a 	bl	80051a8 <_fflush_r>
 8004314:	68a1      	ldr	r1, [r4, #8]
 8004316:	4b09      	ldr	r3, [pc, #36]	@ (800433c <cleanup_stdio+0x38>)
 8004318:	4299      	cmp	r1, r3
 800431a:	d002      	beq.n	8004322 <cleanup_stdio+0x1e>
 800431c:	4620      	mov	r0, r4
 800431e:	f000 ff43 	bl	80051a8 <_fflush_r>
 8004322:	68e1      	ldr	r1, [r4, #12]
 8004324:	4b06      	ldr	r3, [pc, #24]	@ (8004340 <cleanup_stdio+0x3c>)
 8004326:	4299      	cmp	r1, r3
 8004328:	d004      	beq.n	8004334 <cleanup_stdio+0x30>
 800432a:	4620      	mov	r0, r4
 800432c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004330:	f000 bf3a 	b.w	80051a8 <_fflush_r>
 8004334:	bd10      	pop	{r4, pc}
 8004336:	bf00      	nop
 8004338:	20000218 	.word	0x20000218
 800433c:	20000280 	.word	0x20000280
 8004340:	200002e8 	.word	0x200002e8

08004344 <global_stdio_init.part.0>:
 8004344:	b510      	push	{r4, lr}
 8004346:	4b0b      	ldr	r3, [pc, #44]	@ (8004374 <global_stdio_init.part.0+0x30>)
 8004348:	4c0b      	ldr	r4, [pc, #44]	@ (8004378 <global_stdio_init.part.0+0x34>)
 800434a:	4a0c      	ldr	r2, [pc, #48]	@ (800437c <global_stdio_init.part.0+0x38>)
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	4620      	mov	r0, r4
 8004350:	2200      	movs	r2, #0
 8004352:	2104      	movs	r1, #4
 8004354:	f7ff ff94 	bl	8004280 <std>
 8004358:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800435c:	2201      	movs	r2, #1
 800435e:	2109      	movs	r1, #9
 8004360:	f7ff ff8e 	bl	8004280 <std>
 8004364:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004368:	2202      	movs	r2, #2
 800436a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800436e:	2112      	movs	r1, #18
 8004370:	f7ff bf86 	b.w	8004280 <std>
 8004374:	20000350 	.word	0x20000350
 8004378:	20000218 	.word	0x20000218
 800437c:	080042ed 	.word	0x080042ed

08004380 <__sfp_lock_acquire>:
 8004380:	4801      	ldr	r0, [pc, #4]	@ (8004388 <__sfp_lock_acquire+0x8>)
 8004382:	f000 babc 	b.w	80048fe <__retarget_lock_acquire_recursive>
 8004386:	bf00      	nop
 8004388:	20000359 	.word	0x20000359

0800438c <__sfp_lock_release>:
 800438c:	4801      	ldr	r0, [pc, #4]	@ (8004394 <__sfp_lock_release+0x8>)
 800438e:	f000 bab7 	b.w	8004900 <__retarget_lock_release_recursive>
 8004392:	bf00      	nop
 8004394:	20000359 	.word	0x20000359

08004398 <__sinit>:
 8004398:	b510      	push	{r4, lr}
 800439a:	4604      	mov	r4, r0
 800439c:	f7ff fff0 	bl	8004380 <__sfp_lock_acquire>
 80043a0:	6a23      	ldr	r3, [r4, #32]
 80043a2:	b11b      	cbz	r3, 80043ac <__sinit+0x14>
 80043a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043a8:	f7ff bff0 	b.w	800438c <__sfp_lock_release>
 80043ac:	4b04      	ldr	r3, [pc, #16]	@ (80043c0 <__sinit+0x28>)
 80043ae:	6223      	str	r3, [r4, #32]
 80043b0:	4b04      	ldr	r3, [pc, #16]	@ (80043c4 <__sinit+0x2c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1f5      	bne.n	80043a4 <__sinit+0xc>
 80043b8:	f7ff ffc4 	bl	8004344 <global_stdio_init.part.0>
 80043bc:	e7f2      	b.n	80043a4 <__sinit+0xc>
 80043be:	bf00      	nop
 80043c0:	08004305 	.word	0x08004305
 80043c4:	20000350 	.word	0x20000350

080043c8 <_fwalk_sglue>:
 80043c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043cc:	4607      	mov	r7, r0
 80043ce:	4688      	mov	r8, r1
 80043d0:	4614      	mov	r4, r2
 80043d2:	2600      	movs	r6, #0
 80043d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043d8:	f1b9 0901 	subs.w	r9, r9, #1
 80043dc:	d505      	bpl.n	80043ea <_fwalk_sglue+0x22>
 80043de:	6824      	ldr	r4, [r4, #0]
 80043e0:	2c00      	cmp	r4, #0
 80043e2:	d1f7      	bne.n	80043d4 <_fwalk_sglue+0xc>
 80043e4:	4630      	mov	r0, r6
 80043e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043ea:	89ab      	ldrh	r3, [r5, #12]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d907      	bls.n	8004400 <_fwalk_sglue+0x38>
 80043f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043f4:	3301      	adds	r3, #1
 80043f6:	d003      	beq.n	8004400 <_fwalk_sglue+0x38>
 80043f8:	4629      	mov	r1, r5
 80043fa:	4638      	mov	r0, r7
 80043fc:	47c0      	blx	r8
 80043fe:	4306      	orrs	r6, r0
 8004400:	3568      	adds	r5, #104	@ 0x68
 8004402:	e7e9      	b.n	80043d8 <_fwalk_sglue+0x10>

08004404 <iprintf>:
 8004404:	b40f      	push	{r0, r1, r2, r3}
 8004406:	b507      	push	{r0, r1, r2, lr}
 8004408:	4906      	ldr	r1, [pc, #24]	@ (8004424 <iprintf+0x20>)
 800440a:	ab04      	add	r3, sp, #16
 800440c:	6808      	ldr	r0, [r1, #0]
 800440e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004412:	6881      	ldr	r1, [r0, #8]
 8004414:	9301      	str	r3, [sp, #4]
 8004416:	f000 fb9f 	bl	8004b58 <_vfiprintf_r>
 800441a:	b003      	add	sp, #12
 800441c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004420:	b004      	add	sp, #16
 8004422:	4770      	bx	lr
 8004424:	20000060 	.word	0x20000060

08004428 <_puts_r>:
 8004428:	6a03      	ldr	r3, [r0, #32]
 800442a:	b570      	push	{r4, r5, r6, lr}
 800442c:	6884      	ldr	r4, [r0, #8]
 800442e:	4605      	mov	r5, r0
 8004430:	460e      	mov	r6, r1
 8004432:	b90b      	cbnz	r3, 8004438 <_puts_r+0x10>
 8004434:	f7ff ffb0 	bl	8004398 <__sinit>
 8004438:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800443a:	07db      	lsls	r3, r3, #31
 800443c:	d405      	bmi.n	800444a <_puts_r+0x22>
 800443e:	89a3      	ldrh	r3, [r4, #12]
 8004440:	0598      	lsls	r0, r3, #22
 8004442:	d402      	bmi.n	800444a <_puts_r+0x22>
 8004444:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004446:	f000 fa5a 	bl	80048fe <__retarget_lock_acquire_recursive>
 800444a:	89a3      	ldrh	r3, [r4, #12]
 800444c:	0719      	lsls	r1, r3, #28
 800444e:	d502      	bpl.n	8004456 <_puts_r+0x2e>
 8004450:	6923      	ldr	r3, [r4, #16]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d135      	bne.n	80044c2 <_puts_r+0x9a>
 8004456:	4621      	mov	r1, r4
 8004458:	4628      	mov	r0, r5
 800445a:	f000 f981 	bl	8004760 <__swsetup_r>
 800445e:	b380      	cbz	r0, 80044c2 <_puts_r+0x9a>
 8004460:	f04f 35ff 	mov.w	r5, #4294967295
 8004464:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004466:	07da      	lsls	r2, r3, #31
 8004468:	d405      	bmi.n	8004476 <_puts_r+0x4e>
 800446a:	89a3      	ldrh	r3, [r4, #12]
 800446c:	059b      	lsls	r3, r3, #22
 800446e:	d402      	bmi.n	8004476 <_puts_r+0x4e>
 8004470:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004472:	f000 fa45 	bl	8004900 <__retarget_lock_release_recursive>
 8004476:	4628      	mov	r0, r5
 8004478:	bd70      	pop	{r4, r5, r6, pc}
 800447a:	2b00      	cmp	r3, #0
 800447c:	da04      	bge.n	8004488 <_puts_r+0x60>
 800447e:	69a2      	ldr	r2, [r4, #24]
 8004480:	429a      	cmp	r2, r3
 8004482:	dc17      	bgt.n	80044b4 <_puts_r+0x8c>
 8004484:	290a      	cmp	r1, #10
 8004486:	d015      	beq.n	80044b4 <_puts_r+0x8c>
 8004488:	6823      	ldr	r3, [r4, #0]
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	6022      	str	r2, [r4, #0]
 800448e:	7019      	strb	r1, [r3, #0]
 8004490:	68a3      	ldr	r3, [r4, #8]
 8004492:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004496:	3b01      	subs	r3, #1
 8004498:	60a3      	str	r3, [r4, #8]
 800449a:	2900      	cmp	r1, #0
 800449c:	d1ed      	bne.n	800447a <_puts_r+0x52>
 800449e:	2b00      	cmp	r3, #0
 80044a0:	da11      	bge.n	80044c6 <_puts_r+0x9e>
 80044a2:	4622      	mov	r2, r4
 80044a4:	210a      	movs	r1, #10
 80044a6:	4628      	mov	r0, r5
 80044a8:	f000 f91b 	bl	80046e2 <__swbuf_r>
 80044ac:	3001      	adds	r0, #1
 80044ae:	d0d7      	beq.n	8004460 <_puts_r+0x38>
 80044b0:	250a      	movs	r5, #10
 80044b2:	e7d7      	b.n	8004464 <_puts_r+0x3c>
 80044b4:	4622      	mov	r2, r4
 80044b6:	4628      	mov	r0, r5
 80044b8:	f000 f913 	bl	80046e2 <__swbuf_r>
 80044bc:	3001      	adds	r0, #1
 80044be:	d1e7      	bne.n	8004490 <_puts_r+0x68>
 80044c0:	e7ce      	b.n	8004460 <_puts_r+0x38>
 80044c2:	3e01      	subs	r6, #1
 80044c4:	e7e4      	b.n	8004490 <_puts_r+0x68>
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	1c5a      	adds	r2, r3, #1
 80044ca:	6022      	str	r2, [r4, #0]
 80044cc:	220a      	movs	r2, #10
 80044ce:	701a      	strb	r2, [r3, #0]
 80044d0:	e7ee      	b.n	80044b0 <_puts_r+0x88>
	...

080044d4 <puts>:
 80044d4:	4b02      	ldr	r3, [pc, #8]	@ (80044e0 <puts+0xc>)
 80044d6:	4601      	mov	r1, r0
 80044d8:	6818      	ldr	r0, [r3, #0]
 80044da:	f7ff bfa5 	b.w	8004428 <_puts_r>
 80044de:	bf00      	nop
 80044e0:	20000060 	.word	0x20000060

080044e4 <setbuf>:
 80044e4:	fab1 f281 	clz	r2, r1
 80044e8:	0952      	lsrs	r2, r2, #5
 80044ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80044ee:	0052      	lsls	r2, r2, #1
 80044f0:	f000 b800 	b.w	80044f4 <setvbuf>

080044f4 <setvbuf>:
 80044f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80044f8:	461d      	mov	r5, r3
 80044fa:	4b57      	ldr	r3, [pc, #348]	@ (8004658 <setvbuf+0x164>)
 80044fc:	681f      	ldr	r7, [r3, #0]
 80044fe:	4604      	mov	r4, r0
 8004500:	460e      	mov	r6, r1
 8004502:	4690      	mov	r8, r2
 8004504:	b127      	cbz	r7, 8004510 <setvbuf+0x1c>
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	b913      	cbnz	r3, 8004510 <setvbuf+0x1c>
 800450a:	4638      	mov	r0, r7
 800450c:	f7ff ff44 	bl	8004398 <__sinit>
 8004510:	f1b8 0f02 	cmp.w	r8, #2
 8004514:	d006      	beq.n	8004524 <setvbuf+0x30>
 8004516:	f1b8 0f01 	cmp.w	r8, #1
 800451a:	f200 809a 	bhi.w	8004652 <setvbuf+0x15e>
 800451e:	2d00      	cmp	r5, #0
 8004520:	f2c0 8097 	blt.w	8004652 <setvbuf+0x15e>
 8004524:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004526:	07d9      	lsls	r1, r3, #31
 8004528:	d405      	bmi.n	8004536 <setvbuf+0x42>
 800452a:	89a3      	ldrh	r3, [r4, #12]
 800452c:	059a      	lsls	r2, r3, #22
 800452e:	d402      	bmi.n	8004536 <setvbuf+0x42>
 8004530:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004532:	f000 f9e4 	bl	80048fe <__retarget_lock_acquire_recursive>
 8004536:	4621      	mov	r1, r4
 8004538:	4638      	mov	r0, r7
 800453a:	f000 fe35 	bl	80051a8 <_fflush_r>
 800453e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004540:	b141      	cbz	r1, 8004554 <setvbuf+0x60>
 8004542:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004546:	4299      	cmp	r1, r3
 8004548:	d002      	beq.n	8004550 <setvbuf+0x5c>
 800454a:	4638      	mov	r0, r7
 800454c:	f000 f9da 	bl	8004904 <_free_r>
 8004550:	2300      	movs	r3, #0
 8004552:	6363      	str	r3, [r4, #52]	@ 0x34
 8004554:	2300      	movs	r3, #0
 8004556:	61a3      	str	r3, [r4, #24]
 8004558:	6063      	str	r3, [r4, #4]
 800455a:	89a3      	ldrh	r3, [r4, #12]
 800455c:	061b      	lsls	r3, r3, #24
 800455e:	d503      	bpl.n	8004568 <setvbuf+0x74>
 8004560:	6921      	ldr	r1, [r4, #16]
 8004562:	4638      	mov	r0, r7
 8004564:	f000 f9ce 	bl	8004904 <_free_r>
 8004568:	89a3      	ldrh	r3, [r4, #12]
 800456a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800456e:	f023 0303 	bic.w	r3, r3, #3
 8004572:	f1b8 0f02 	cmp.w	r8, #2
 8004576:	81a3      	strh	r3, [r4, #12]
 8004578:	d061      	beq.n	800463e <setvbuf+0x14a>
 800457a:	ab01      	add	r3, sp, #4
 800457c:	466a      	mov	r2, sp
 800457e:	4621      	mov	r1, r4
 8004580:	4638      	mov	r0, r7
 8004582:	f000 fe39 	bl	80051f8 <__swhatbuf_r>
 8004586:	89a3      	ldrh	r3, [r4, #12]
 8004588:	4318      	orrs	r0, r3
 800458a:	81a0      	strh	r0, [r4, #12]
 800458c:	bb2d      	cbnz	r5, 80045da <setvbuf+0xe6>
 800458e:	9d00      	ldr	r5, [sp, #0]
 8004590:	4628      	mov	r0, r5
 8004592:	f000 fa01 	bl	8004998 <malloc>
 8004596:	4606      	mov	r6, r0
 8004598:	2800      	cmp	r0, #0
 800459a:	d152      	bne.n	8004642 <setvbuf+0x14e>
 800459c:	f8dd 9000 	ldr.w	r9, [sp]
 80045a0:	45a9      	cmp	r9, r5
 80045a2:	d140      	bne.n	8004626 <setvbuf+0x132>
 80045a4:	f04f 35ff 	mov.w	r5, #4294967295
 80045a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045ac:	f043 0202 	orr.w	r2, r3, #2
 80045b0:	81a2      	strh	r2, [r4, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	60a2      	str	r2, [r4, #8]
 80045b6:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80045ba:	6022      	str	r2, [r4, #0]
 80045bc:	6122      	str	r2, [r4, #16]
 80045be:	2201      	movs	r2, #1
 80045c0:	6162      	str	r2, [r4, #20]
 80045c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80045c4:	07d6      	lsls	r6, r2, #31
 80045c6:	d404      	bmi.n	80045d2 <setvbuf+0xde>
 80045c8:	0598      	lsls	r0, r3, #22
 80045ca:	d402      	bmi.n	80045d2 <setvbuf+0xde>
 80045cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045ce:	f000 f997 	bl	8004900 <__retarget_lock_release_recursive>
 80045d2:	4628      	mov	r0, r5
 80045d4:	b003      	add	sp, #12
 80045d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80045da:	2e00      	cmp	r6, #0
 80045dc:	d0d8      	beq.n	8004590 <setvbuf+0x9c>
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	b913      	cbnz	r3, 80045e8 <setvbuf+0xf4>
 80045e2:	4638      	mov	r0, r7
 80045e4:	f7ff fed8 	bl	8004398 <__sinit>
 80045e8:	f1b8 0f01 	cmp.w	r8, #1
 80045ec:	bf08      	it	eq
 80045ee:	89a3      	ldrheq	r3, [r4, #12]
 80045f0:	6026      	str	r6, [r4, #0]
 80045f2:	bf04      	itt	eq
 80045f4:	f043 0301 	orreq.w	r3, r3, #1
 80045f8:	81a3      	strheq	r3, [r4, #12]
 80045fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045fe:	f013 0208 	ands.w	r2, r3, #8
 8004602:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004606:	d01e      	beq.n	8004646 <setvbuf+0x152>
 8004608:	07d9      	lsls	r1, r3, #31
 800460a:	bf41      	itttt	mi
 800460c:	2200      	movmi	r2, #0
 800460e:	426d      	negmi	r5, r5
 8004610:	60a2      	strmi	r2, [r4, #8]
 8004612:	61a5      	strmi	r5, [r4, #24]
 8004614:	bf58      	it	pl
 8004616:	60a5      	strpl	r5, [r4, #8]
 8004618:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800461a:	07d2      	lsls	r2, r2, #31
 800461c:	d401      	bmi.n	8004622 <setvbuf+0x12e>
 800461e:	059b      	lsls	r3, r3, #22
 8004620:	d513      	bpl.n	800464a <setvbuf+0x156>
 8004622:	2500      	movs	r5, #0
 8004624:	e7d5      	b.n	80045d2 <setvbuf+0xde>
 8004626:	4648      	mov	r0, r9
 8004628:	f000 f9b6 	bl	8004998 <malloc>
 800462c:	4606      	mov	r6, r0
 800462e:	2800      	cmp	r0, #0
 8004630:	d0b8      	beq.n	80045a4 <setvbuf+0xb0>
 8004632:	89a3      	ldrh	r3, [r4, #12]
 8004634:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004638:	81a3      	strh	r3, [r4, #12]
 800463a:	464d      	mov	r5, r9
 800463c:	e7cf      	b.n	80045de <setvbuf+0xea>
 800463e:	2500      	movs	r5, #0
 8004640:	e7b2      	b.n	80045a8 <setvbuf+0xb4>
 8004642:	46a9      	mov	r9, r5
 8004644:	e7f5      	b.n	8004632 <setvbuf+0x13e>
 8004646:	60a2      	str	r2, [r4, #8]
 8004648:	e7e6      	b.n	8004618 <setvbuf+0x124>
 800464a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800464c:	f000 f958 	bl	8004900 <__retarget_lock_release_recursive>
 8004650:	e7e7      	b.n	8004622 <setvbuf+0x12e>
 8004652:	f04f 35ff 	mov.w	r5, #4294967295
 8004656:	e7bc      	b.n	80045d2 <setvbuf+0xde>
 8004658:	20000060 	.word	0x20000060

0800465c <__sread>:
 800465c:	b510      	push	{r4, lr}
 800465e:	460c      	mov	r4, r1
 8004660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004664:	f000 f8fc 	bl	8004860 <_read_r>
 8004668:	2800      	cmp	r0, #0
 800466a:	bfab      	itete	ge
 800466c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800466e:	89a3      	ldrhlt	r3, [r4, #12]
 8004670:	181b      	addge	r3, r3, r0
 8004672:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004676:	bfac      	ite	ge
 8004678:	6563      	strge	r3, [r4, #84]	@ 0x54
 800467a:	81a3      	strhlt	r3, [r4, #12]
 800467c:	bd10      	pop	{r4, pc}

0800467e <__swrite>:
 800467e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004682:	461f      	mov	r7, r3
 8004684:	898b      	ldrh	r3, [r1, #12]
 8004686:	05db      	lsls	r3, r3, #23
 8004688:	4605      	mov	r5, r0
 800468a:	460c      	mov	r4, r1
 800468c:	4616      	mov	r6, r2
 800468e:	d505      	bpl.n	800469c <__swrite+0x1e>
 8004690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004694:	2302      	movs	r3, #2
 8004696:	2200      	movs	r2, #0
 8004698:	f000 f8d0 	bl	800483c <_lseek_r>
 800469c:	89a3      	ldrh	r3, [r4, #12]
 800469e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046a6:	81a3      	strh	r3, [r4, #12]
 80046a8:	4632      	mov	r2, r6
 80046aa:	463b      	mov	r3, r7
 80046ac:	4628      	mov	r0, r5
 80046ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046b2:	f000 b8e7 	b.w	8004884 <_write_r>

080046b6 <__sseek>:
 80046b6:	b510      	push	{r4, lr}
 80046b8:	460c      	mov	r4, r1
 80046ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046be:	f000 f8bd 	bl	800483c <_lseek_r>
 80046c2:	1c43      	adds	r3, r0, #1
 80046c4:	89a3      	ldrh	r3, [r4, #12]
 80046c6:	bf15      	itete	ne
 80046c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80046ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80046ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80046d2:	81a3      	strheq	r3, [r4, #12]
 80046d4:	bf18      	it	ne
 80046d6:	81a3      	strhne	r3, [r4, #12]
 80046d8:	bd10      	pop	{r4, pc}

080046da <__sclose>:
 80046da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046de:	f000 b89d 	b.w	800481c <_close_r>

080046e2 <__swbuf_r>:
 80046e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e4:	460e      	mov	r6, r1
 80046e6:	4614      	mov	r4, r2
 80046e8:	4605      	mov	r5, r0
 80046ea:	b118      	cbz	r0, 80046f4 <__swbuf_r+0x12>
 80046ec:	6a03      	ldr	r3, [r0, #32]
 80046ee:	b90b      	cbnz	r3, 80046f4 <__swbuf_r+0x12>
 80046f0:	f7ff fe52 	bl	8004398 <__sinit>
 80046f4:	69a3      	ldr	r3, [r4, #24]
 80046f6:	60a3      	str	r3, [r4, #8]
 80046f8:	89a3      	ldrh	r3, [r4, #12]
 80046fa:	071a      	lsls	r2, r3, #28
 80046fc:	d501      	bpl.n	8004702 <__swbuf_r+0x20>
 80046fe:	6923      	ldr	r3, [r4, #16]
 8004700:	b943      	cbnz	r3, 8004714 <__swbuf_r+0x32>
 8004702:	4621      	mov	r1, r4
 8004704:	4628      	mov	r0, r5
 8004706:	f000 f82b 	bl	8004760 <__swsetup_r>
 800470a:	b118      	cbz	r0, 8004714 <__swbuf_r+0x32>
 800470c:	f04f 37ff 	mov.w	r7, #4294967295
 8004710:	4638      	mov	r0, r7
 8004712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004714:	6823      	ldr	r3, [r4, #0]
 8004716:	6922      	ldr	r2, [r4, #16]
 8004718:	1a98      	subs	r0, r3, r2
 800471a:	6963      	ldr	r3, [r4, #20]
 800471c:	b2f6      	uxtb	r6, r6
 800471e:	4283      	cmp	r3, r0
 8004720:	4637      	mov	r7, r6
 8004722:	dc05      	bgt.n	8004730 <__swbuf_r+0x4e>
 8004724:	4621      	mov	r1, r4
 8004726:	4628      	mov	r0, r5
 8004728:	f000 fd3e 	bl	80051a8 <_fflush_r>
 800472c:	2800      	cmp	r0, #0
 800472e:	d1ed      	bne.n	800470c <__swbuf_r+0x2a>
 8004730:	68a3      	ldr	r3, [r4, #8]
 8004732:	3b01      	subs	r3, #1
 8004734:	60a3      	str	r3, [r4, #8]
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	6022      	str	r2, [r4, #0]
 800473c:	701e      	strb	r6, [r3, #0]
 800473e:	6962      	ldr	r2, [r4, #20]
 8004740:	1c43      	adds	r3, r0, #1
 8004742:	429a      	cmp	r2, r3
 8004744:	d004      	beq.n	8004750 <__swbuf_r+0x6e>
 8004746:	89a3      	ldrh	r3, [r4, #12]
 8004748:	07db      	lsls	r3, r3, #31
 800474a:	d5e1      	bpl.n	8004710 <__swbuf_r+0x2e>
 800474c:	2e0a      	cmp	r6, #10
 800474e:	d1df      	bne.n	8004710 <__swbuf_r+0x2e>
 8004750:	4621      	mov	r1, r4
 8004752:	4628      	mov	r0, r5
 8004754:	f000 fd28 	bl	80051a8 <_fflush_r>
 8004758:	2800      	cmp	r0, #0
 800475a:	d0d9      	beq.n	8004710 <__swbuf_r+0x2e>
 800475c:	e7d6      	b.n	800470c <__swbuf_r+0x2a>
	...

08004760 <__swsetup_r>:
 8004760:	b538      	push	{r3, r4, r5, lr}
 8004762:	4b29      	ldr	r3, [pc, #164]	@ (8004808 <__swsetup_r+0xa8>)
 8004764:	4605      	mov	r5, r0
 8004766:	6818      	ldr	r0, [r3, #0]
 8004768:	460c      	mov	r4, r1
 800476a:	b118      	cbz	r0, 8004774 <__swsetup_r+0x14>
 800476c:	6a03      	ldr	r3, [r0, #32]
 800476e:	b90b      	cbnz	r3, 8004774 <__swsetup_r+0x14>
 8004770:	f7ff fe12 	bl	8004398 <__sinit>
 8004774:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004778:	0719      	lsls	r1, r3, #28
 800477a:	d422      	bmi.n	80047c2 <__swsetup_r+0x62>
 800477c:	06da      	lsls	r2, r3, #27
 800477e:	d407      	bmi.n	8004790 <__swsetup_r+0x30>
 8004780:	2209      	movs	r2, #9
 8004782:	602a      	str	r2, [r5, #0]
 8004784:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004788:	81a3      	strh	r3, [r4, #12]
 800478a:	f04f 30ff 	mov.w	r0, #4294967295
 800478e:	e033      	b.n	80047f8 <__swsetup_r+0x98>
 8004790:	0758      	lsls	r0, r3, #29
 8004792:	d512      	bpl.n	80047ba <__swsetup_r+0x5a>
 8004794:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004796:	b141      	cbz	r1, 80047aa <__swsetup_r+0x4a>
 8004798:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800479c:	4299      	cmp	r1, r3
 800479e:	d002      	beq.n	80047a6 <__swsetup_r+0x46>
 80047a0:	4628      	mov	r0, r5
 80047a2:	f000 f8af 	bl	8004904 <_free_r>
 80047a6:	2300      	movs	r3, #0
 80047a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80047aa:	89a3      	ldrh	r3, [r4, #12]
 80047ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80047b0:	81a3      	strh	r3, [r4, #12]
 80047b2:	2300      	movs	r3, #0
 80047b4:	6063      	str	r3, [r4, #4]
 80047b6:	6923      	ldr	r3, [r4, #16]
 80047b8:	6023      	str	r3, [r4, #0]
 80047ba:	89a3      	ldrh	r3, [r4, #12]
 80047bc:	f043 0308 	orr.w	r3, r3, #8
 80047c0:	81a3      	strh	r3, [r4, #12]
 80047c2:	6923      	ldr	r3, [r4, #16]
 80047c4:	b94b      	cbnz	r3, 80047da <__swsetup_r+0x7a>
 80047c6:	89a3      	ldrh	r3, [r4, #12]
 80047c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80047cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047d0:	d003      	beq.n	80047da <__swsetup_r+0x7a>
 80047d2:	4621      	mov	r1, r4
 80047d4:	4628      	mov	r0, r5
 80047d6:	f000 fd35 	bl	8005244 <__smakebuf_r>
 80047da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047de:	f013 0201 	ands.w	r2, r3, #1
 80047e2:	d00a      	beq.n	80047fa <__swsetup_r+0x9a>
 80047e4:	2200      	movs	r2, #0
 80047e6:	60a2      	str	r2, [r4, #8]
 80047e8:	6962      	ldr	r2, [r4, #20]
 80047ea:	4252      	negs	r2, r2
 80047ec:	61a2      	str	r2, [r4, #24]
 80047ee:	6922      	ldr	r2, [r4, #16]
 80047f0:	b942      	cbnz	r2, 8004804 <__swsetup_r+0xa4>
 80047f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80047f6:	d1c5      	bne.n	8004784 <__swsetup_r+0x24>
 80047f8:	bd38      	pop	{r3, r4, r5, pc}
 80047fa:	0799      	lsls	r1, r3, #30
 80047fc:	bf58      	it	pl
 80047fe:	6962      	ldrpl	r2, [r4, #20]
 8004800:	60a2      	str	r2, [r4, #8]
 8004802:	e7f4      	b.n	80047ee <__swsetup_r+0x8e>
 8004804:	2000      	movs	r0, #0
 8004806:	e7f7      	b.n	80047f8 <__swsetup_r+0x98>
 8004808:	20000060 	.word	0x20000060

0800480c <memset>:
 800480c:	4402      	add	r2, r0
 800480e:	4603      	mov	r3, r0
 8004810:	4293      	cmp	r3, r2
 8004812:	d100      	bne.n	8004816 <memset+0xa>
 8004814:	4770      	bx	lr
 8004816:	f803 1b01 	strb.w	r1, [r3], #1
 800481a:	e7f9      	b.n	8004810 <memset+0x4>

0800481c <_close_r>:
 800481c:	b538      	push	{r3, r4, r5, lr}
 800481e:	4d06      	ldr	r5, [pc, #24]	@ (8004838 <_close_r+0x1c>)
 8004820:	2300      	movs	r3, #0
 8004822:	4604      	mov	r4, r0
 8004824:	4608      	mov	r0, r1
 8004826:	602b      	str	r3, [r5, #0]
 8004828:	f7fc fa8e 	bl	8000d48 <_close>
 800482c:	1c43      	adds	r3, r0, #1
 800482e:	d102      	bne.n	8004836 <_close_r+0x1a>
 8004830:	682b      	ldr	r3, [r5, #0]
 8004832:	b103      	cbz	r3, 8004836 <_close_r+0x1a>
 8004834:	6023      	str	r3, [r4, #0]
 8004836:	bd38      	pop	{r3, r4, r5, pc}
 8004838:	20000354 	.word	0x20000354

0800483c <_lseek_r>:
 800483c:	b538      	push	{r3, r4, r5, lr}
 800483e:	4d07      	ldr	r5, [pc, #28]	@ (800485c <_lseek_r+0x20>)
 8004840:	4604      	mov	r4, r0
 8004842:	4608      	mov	r0, r1
 8004844:	4611      	mov	r1, r2
 8004846:	2200      	movs	r2, #0
 8004848:	602a      	str	r2, [r5, #0]
 800484a:	461a      	mov	r2, r3
 800484c:	f7fc faa3 	bl	8000d96 <_lseek>
 8004850:	1c43      	adds	r3, r0, #1
 8004852:	d102      	bne.n	800485a <_lseek_r+0x1e>
 8004854:	682b      	ldr	r3, [r5, #0]
 8004856:	b103      	cbz	r3, 800485a <_lseek_r+0x1e>
 8004858:	6023      	str	r3, [r4, #0]
 800485a:	bd38      	pop	{r3, r4, r5, pc}
 800485c:	20000354 	.word	0x20000354

08004860 <_read_r>:
 8004860:	b538      	push	{r3, r4, r5, lr}
 8004862:	4d07      	ldr	r5, [pc, #28]	@ (8004880 <_read_r+0x20>)
 8004864:	4604      	mov	r4, r0
 8004866:	4608      	mov	r0, r1
 8004868:	4611      	mov	r1, r2
 800486a:	2200      	movs	r2, #0
 800486c:	602a      	str	r2, [r5, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	f7fc fa31 	bl	8000cd6 <_read>
 8004874:	1c43      	adds	r3, r0, #1
 8004876:	d102      	bne.n	800487e <_read_r+0x1e>
 8004878:	682b      	ldr	r3, [r5, #0]
 800487a:	b103      	cbz	r3, 800487e <_read_r+0x1e>
 800487c:	6023      	str	r3, [r4, #0]
 800487e:	bd38      	pop	{r3, r4, r5, pc}
 8004880:	20000354 	.word	0x20000354

08004884 <_write_r>:
 8004884:	b538      	push	{r3, r4, r5, lr}
 8004886:	4d07      	ldr	r5, [pc, #28]	@ (80048a4 <_write_r+0x20>)
 8004888:	4604      	mov	r4, r0
 800488a:	4608      	mov	r0, r1
 800488c:	4611      	mov	r1, r2
 800488e:	2200      	movs	r2, #0
 8004890:	602a      	str	r2, [r5, #0]
 8004892:	461a      	mov	r2, r3
 8004894:	f7fc fa3c 	bl	8000d10 <_write>
 8004898:	1c43      	adds	r3, r0, #1
 800489a:	d102      	bne.n	80048a2 <_write_r+0x1e>
 800489c:	682b      	ldr	r3, [r5, #0]
 800489e:	b103      	cbz	r3, 80048a2 <_write_r+0x1e>
 80048a0:	6023      	str	r3, [r4, #0]
 80048a2:	bd38      	pop	{r3, r4, r5, pc}
 80048a4:	20000354 	.word	0x20000354

080048a8 <__errno>:
 80048a8:	4b01      	ldr	r3, [pc, #4]	@ (80048b0 <__errno+0x8>)
 80048aa:	6818      	ldr	r0, [r3, #0]
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	20000060 	.word	0x20000060

080048b4 <__libc_init_array>:
 80048b4:	b570      	push	{r4, r5, r6, lr}
 80048b6:	4d0d      	ldr	r5, [pc, #52]	@ (80048ec <__libc_init_array+0x38>)
 80048b8:	4c0d      	ldr	r4, [pc, #52]	@ (80048f0 <__libc_init_array+0x3c>)
 80048ba:	1b64      	subs	r4, r4, r5
 80048bc:	10a4      	asrs	r4, r4, #2
 80048be:	2600      	movs	r6, #0
 80048c0:	42a6      	cmp	r6, r4
 80048c2:	d109      	bne.n	80048d8 <__libc_init_array+0x24>
 80048c4:	4d0b      	ldr	r5, [pc, #44]	@ (80048f4 <__libc_init_array+0x40>)
 80048c6:	4c0c      	ldr	r4, [pc, #48]	@ (80048f8 <__libc_init_array+0x44>)
 80048c8:	f000 fd2a 	bl	8005320 <_init>
 80048cc:	1b64      	subs	r4, r4, r5
 80048ce:	10a4      	asrs	r4, r4, #2
 80048d0:	2600      	movs	r6, #0
 80048d2:	42a6      	cmp	r6, r4
 80048d4:	d105      	bne.n	80048e2 <__libc_init_array+0x2e>
 80048d6:	bd70      	pop	{r4, r5, r6, pc}
 80048d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80048dc:	4798      	blx	r3
 80048de:	3601      	adds	r6, #1
 80048e0:	e7ee      	b.n	80048c0 <__libc_init_array+0xc>
 80048e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80048e6:	4798      	blx	r3
 80048e8:	3601      	adds	r6, #1
 80048ea:	e7f2      	b.n	80048d2 <__libc_init_array+0x1e>
 80048ec:	08005718 	.word	0x08005718
 80048f0:	08005718 	.word	0x08005718
 80048f4:	08005718 	.word	0x08005718
 80048f8:	0800571c 	.word	0x0800571c

080048fc <__retarget_lock_init_recursive>:
 80048fc:	4770      	bx	lr

080048fe <__retarget_lock_acquire_recursive>:
 80048fe:	4770      	bx	lr

08004900 <__retarget_lock_release_recursive>:
 8004900:	4770      	bx	lr
	...

08004904 <_free_r>:
 8004904:	b538      	push	{r3, r4, r5, lr}
 8004906:	4605      	mov	r5, r0
 8004908:	2900      	cmp	r1, #0
 800490a:	d041      	beq.n	8004990 <_free_r+0x8c>
 800490c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004910:	1f0c      	subs	r4, r1, #4
 8004912:	2b00      	cmp	r3, #0
 8004914:	bfb8      	it	lt
 8004916:	18e4      	addlt	r4, r4, r3
 8004918:	f000 f8e8 	bl	8004aec <__malloc_lock>
 800491c:	4a1d      	ldr	r2, [pc, #116]	@ (8004994 <_free_r+0x90>)
 800491e:	6813      	ldr	r3, [r2, #0]
 8004920:	b933      	cbnz	r3, 8004930 <_free_r+0x2c>
 8004922:	6063      	str	r3, [r4, #4]
 8004924:	6014      	str	r4, [r2, #0]
 8004926:	4628      	mov	r0, r5
 8004928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800492c:	f000 b8e4 	b.w	8004af8 <__malloc_unlock>
 8004930:	42a3      	cmp	r3, r4
 8004932:	d908      	bls.n	8004946 <_free_r+0x42>
 8004934:	6820      	ldr	r0, [r4, #0]
 8004936:	1821      	adds	r1, r4, r0
 8004938:	428b      	cmp	r3, r1
 800493a:	bf01      	itttt	eq
 800493c:	6819      	ldreq	r1, [r3, #0]
 800493e:	685b      	ldreq	r3, [r3, #4]
 8004940:	1809      	addeq	r1, r1, r0
 8004942:	6021      	streq	r1, [r4, #0]
 8004944:	e7ed      	b.n	8004922 <_free_r+0x1e>
 8004946:	461a      	mov	r2, r3
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	b10b      	cbz	r3, 8004950 <_free_r+0x4c>
 800494c:	42a3      	cmp	r3, r4
 800494e:	d9fa      	bls.n	8004946 <_free_r+0x42>
 8004950:	6811      	ldr	r1, [r2, #0]
 8004952:	1850      	adds	r0, r2, r1
 8004954:	42a0      	cmp	r0, r4
 8004956:	d10b      	bne.n	8004970 <_free_r+0x6c>
 8004958:	6820      	ldr	r0, [r4, #0]
 800495a:	4401      	add	r1, r0
 800495c:	1850      	adds	r0, r2, r1
 800495e:	4283      	cmp	r3, r0
 8004960:	6011      	str	r1, [r2, #0]
 8004962:	d1e0      	bne.n	8004926 <_free_r+0x22>
 8004964:	6818      	ldr	r0, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	6053      	str	r3, [r2, #4]
 800496a:	4408      	add	r0, r1
 800496c:	6010      	str	r0, [r2, #0]
 800496e:	e7da      	b.n	8004926 <_free_r+0x22>
 8004970:	d902      	bls.n	8004978 <_free_r+0x74>
 8004972:	230c      	movs	r3, #12
 8004974:	602b      	str	r3, [r5, #0]
 8004976:	e7d6      	b.n	8004926 <_free_r+0x22>
 8004978:	6820      	ldr	r0, [r4, #0]
 800497a:	1821      	adds	r1, r4, r0
 800497c:	428b      	cmp	r3, r1
 800497e:	bf04      	itt	eq
 8004980:	6819      	ldreq	r1, [r3, #0]
 8004982:	685b      	ldreq	r3, [r3, #4]
 8004984:	6063      	str	r3, [r4, #4]
 8004986:	bf04      	itt	eq
 8004988:	1809      	addeq	r1, r1, r0
 800498a:	6021      	streq	r1, [r4, #0]
 800498c:	6054      	str	r4, [r2, #4]
 800498e:	e7ca      	b.n	8004926 <_free_r+0x22>
 8004990:	bd38      	pop	{r3, r4, r5, pc}
 8004992:	bf00      	nop
 8004994:	20000360 	.word	0x20000360

08004998 <malloc>:
 8004998:	4b02      	ldr	r3, [pc, #8]	@ (80049a4 <malloc+0xc>)
 800499a:	4601      	mov	r1, r0
 800499c:	6818      	ldr	r0, [r3, #0]
 800499e:	f000 b825 	b.w	80049ec <_malloc_r>
 80049a2:	bf00      	nop
 80049a4:	20000060 	.word	0x20000060

080049a8 <sbrk_aligned>:
 80049a8:	b570      	push	{r4, r5, r6, lr}
 80049aa:	4e0f      	ldr	r6, [pc, #60]	@ (80049e8 <sbrk_aligned+0x40>)
 80049ac:	460c      	mov	r4, r1
 80049ae:	6831      	ldr	r1, [r6, #0]
 80049b0:	4605      	mov	r5, r0
 80049b2:	b911      	cbnz	r1, 80049ba <sbrk_aligned+0x12>
 80049b4:	f000 fca4 	bl	8005300 <_sbrk_r>
 80049b8:	6030      	str	r0, [r6, #0]
 80049ba:	4621      	mov	r1, r4
 80049bc:	4628      	mov	r0, r5
 80049be:	f000 fc9f 	bl	8005300 <_sbrk_r>
 80049c2:	1c43      	adds	r3, r0, #1
 80049c4:	d103      	bne.n	80049ce <sbrk_aligned+0x26>
 80049c6:	f04f 34ff 	mov.w	r4, #4294967295
 80049ca:	4620      	mov	r0, r4
 80049cc:	bd70      	pop	{r4, r5, r6, pc}
 80049ce:	1cc4      	adds	r4, r0, #3
 80049d0:	f024 0403 	bic.w	r4, r4, #3
 80049d4:	42a0      	cmp	r0, r4
 80049d6:	d0f8      	beq.n	80049ca <sbrk_aligned+0x22>
 80049d8:	1a21      	subs	r1, r4, r0
 80049da:	4628      	mov	r0, r5
 80049dc:	f000 fc90 	bl	8005300 <_sbrk_r>
 80049e0:	3001      	adds	r0, #1
 80049e2:	d1f2      	bne.n	80049ca <sbrk_aligned+0x22>
 80049e4:	e7ef      	b.n	80049c6 <sbrk_aligned+0x1e>
 80049e6:	bf00      	nop
 80049e8:	2000035c 	.word	0x2000035c

080049ec <_malloc_r>:
 80049ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049f0:	1ccd      	adds	r5, r1, #3
 80049f2:	f025 0503 	bic.w	r5, r5, #3
 80049f6:	3508      	adds	r5, #8
 80049f8:	2d0c      	cmp	r5, #12
 80049fa:	bf38      	it	cc
 80049fc:	250c      	movcc	r5, #12
 80049fe:	2d00      	cmp	r5, #0
 8004a00:	4606      	mov	r6, r0
 8004a02:	db01      	blt.n	8004a08 <_malloc_r+0x1c>
 8004a04:	42a9      	cmp	r1, r5
 8004a06:	d904      	bls.n	8004a12 <_malloc_r+0x26>
 8004a08:	230c      	movs	r3, #12
 8004a0a:	6033      	str	r3, [r6, #0]
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ae8 <_malloc_r+0xfc>
 8004a16:	f000 f869 	bl	8004aec <__malloc_lock>
 8004a1a:	f8d8 3000 	ldr.w	r3, [r8]
 8004a1e:	461c      	mov	r4, r3
 8004a20:	bb44      	cbnz	r4, 8004a74 <_malloc_r+0x88>
 8004a22:	4629      	mov	r1, r5
 8004a24:	4630      	mov	r0, r6
 8004a26:	f7ff ffbf 	bl	80049a8 <sbrk_aligned>
 8004a2a:	1c43      	adds	r3, r0, #1
 8004a2c:	4604      	mov	r4, r0
 8004a2e:	d158      	bne.n	8004ae2 <_malloc_r+0xf6>
 8004a30:	f8d8 4000 	ldr.w	r4, [r8]
 8004a34:	4627      	mov	r7, r4
 8004a36:	2f00      	cmp	r7, #0
 8004a38:	d143      	bne.n	8004ac2 <_malloc_r+0xd6>
 8004a3a:	2c00      	cmp	r4, #0
 8004a3c:	d04b      	beq.n	8004ad6 <_malloc_r+0xea>
 8004a3e:	6823      	ldr	r3, [r4, #0]
 8004a40:	4639      	mov	r1, r7
 8004a42:	4630      	mov	r0, r6
 8004a44:	eb04 0903 	add.w	r9, r4, r3
 8004a48:	f000 fc5a 	bl	8005300 <_sbrk_r>
 8004a4c:	4581      	cmp	r9, r0
 8004a4e:	d142      	bne.n	8004ad6 <_malloc_r+0xea>
 8004a50:	6821      	ldr	r1, [r4, #0]
 8004a52:	1a6d      	subs	r5, r5, r1
 8004a54:	4629      	mov	r1, r5
 8004a56:	4630      	mov	r0, r6
 8004a58:	f7ff ffa6 	bl	80049a8 <sbrk_aligned>
 8004a5c:	3001      	adds	r0, #1
 8004a5e:	d03a      	beq.n	8004ad6 <_malloc_r+0xea>
 8004a60:	6823      	ldr	r3, [r4, #0]
 8004a62:	442b      	add	r3, r5
 8004a64:	6023      	str	r3, [r4, #0]
 8004a66:	f8d8 3000 	ldr.w	r3, [r8]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	bb62      	cbnz	r2, 8004ac8 <_malloc_r+0xdc>
 8004a6e:	f8c8 7000 	str.w	r7, [r8]
 8004a72:	e00f      	b.n	8004a94 <_malloc_r+0xa8>
 8004a74:	6822      	ldr	r2, [r4, #0]
 8004a76:	1b52      	subs	r2, r2, r5
 8004a78:	d420      	bmi.n	8004abc <_malloc_r+0xd0>
 8004a7a:	2a0b      	cmp	r2, #11
 8004a7c:	d917      	bls.n	8004aae <_malloc_r+0xc2>
 8004a7e:	1961      	adds	r1, r4, r5
 8004a80:	42a3      	cmp	r3, r4
 8004a82:	6025      	str	r5, [r4, #0]
 8004a84:	bf18      	it	ne
 8004a86:	6059      	strne	r1, [r3, #4]
 8004a88:	6863      	ldr	r3, [r4, #4]
 8004a8a:	bf08      	it	eq
 8004a8c:	f8c8 1000 	streq.w	r1, [r8]
 8004a90:	5162      	str	r2, [r4, r5]
 8004a92:	604b      	str	r3, [r1, #4]
 8004a94:	4630      	mov	r0, r6
 8004a96:	f000 f82f 	bl	8004af8 <__malloc_unlock>
 8004a9a:	f104 000b 	add.w	r0, r4, #11
 8004a9e:	1d23      	adds	r3, r4, #4
 8004aa0:	f020 0007 	bic.w	r0, r0, #7
 8004aa4:	1ac2      	subs	r2, r0, r3
 8004aa6:	bf1c      	itt	ne
 8004aa8:	1a1b      	subne	r3, r3, r0
 8004aaa:	50a3      	strne	r3, [r4, r2]
 8004aac:	e7af      	b.n	8004a0e <_malloc_r+0x22>
 8004aae:	6862      	ldr	r2, [r4, #4]
 8004ab0:	42a3      	cmp	r3, r4
 8004ab2:	bf0c      	ite	eq
 8004ab4:	f8c8 2000 	streq.w	r2, [r8]
 8004ab8:	605a      	strne	r2, [r3, #4]
 8004aba:	e7eb      	b.n	8004a94 <_malloc_r+0xa8>
 8004abc:	4623      	mov	r3, r4
 8004abe:	6864      	ldr	r4, [r4, #4]
 8004ac0:	e7ae      	b.n	8004a20 <_malloc_r+0x34>
 8004ac2:	463c      	mov	r4, r7
 8004ac4:	687f      	ldr	r7, [r7, #4]
 8004ac6:	e7b6      	b.n	8004a36 <_malloc_r+0x4a>
 8004ac8:	461a      	mov	r2, r3
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	42a3      	cmp	r3, r4
 8004ace:	d1fb      	bne.n	8004ac8 <_malloc_r+0xdc>
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	6053      	str	r3, [r2, #4]
 8004ad4:	e7de      	b.n	8004a94 <_malloc_r+0xa8>
 8004ad6:	230c      	movs	r3, #12
 8004ad8:	6033      	str	r3, [r6, #0]
 8004ada:	4630      	mov	r0, r6
 8004adc:	f000 f80c 	bl	8004af8 <__malloc_unlock>
 8004ae0:	e794      	b.n	8004a0c <_malloc_r+0x20>
 8004ae2:	6005      	str	r5, [r0, #0]
 8004ae4:	e7d6      	b.n	8004a94 <_malloc_r+0xa8>
 8004ae6:	bf00      	nop
 8004ae8:	20000360 	.word	0x20000360

08004aec <__malloc_lock>:
 8004aec:	4801      	ldr	r0, [pc, #4]	@ (8004af4 <__malloc_lock+0x8>)
 8004aee:	f7ff bf06 	b.w	80048fe <__retarget_lock_acquire_recursive>
 8004af2:	bf00      	nop
 8004af4:	20000358 	.word	0x20000358

08004af8 <__malloc_unlock>:
 8004af8:	4801      	ldr	r0, [pc, #4]	@ (8004b00 <__malloc_unlock+0x8>)
 8004afa:	f7ff bf01 	b.w	8004900 <__retarget_lock_release_recursive>
 8004afe:	bf00      	nop
 8004b00:	20000358 	.word	0x20000358

08004b04 <__sfputc_r>:
 8004b04:	6893      	ldr	r3, [r2, #8]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	b410      	push	{r4}
 8004b0c:	6093      	str	r3, [r2, #8]
 8004b0e:	da08      	bge.n	8004b22 <__sfputc_r+0x1e>
 8004b10:	6994      	ldr	r4, [r2, #24]
 8004b12:	42a3      	cmp	r3, r4
 8004b14:	db01      	blt.n	8004b1a <__sfputc_r+0x16>
 8004b16:	290a      	cmp	r1, #10
 8004b18:	d103      	bne.n	8004b22 <__sfputc_r+0x1e>
 8004b1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b1e:	f7ff bde0 	b.w	80046e2 <__swbuf_r>
 8004b22:	6813      	ldr	r3, [r2, #0]
 8004b24:	1c58      	adds	r0, r3, #1
 8004b26:	6010      	str	r0, [r2, #0]
 8004b28:	7019      	strb	r1, [r3, #0]
 8004b2a:	4608      	mov	r0, r1
 8004b2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <__sfputs_r>:
 8004b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b34:	4606      	mov	r6, r0
 8004b36:	460f      	mov	r7, r1
 8004b38:	4614      	mov	r4, r2
 8004b3a:	18d5      	adds	r5, r2, r3
 8004b3c:	42ac      	cmp	r4, r5
 8004b3e:	d101      	bne.n	8004b44 <__sfputs_r+0x12>
 8004b40:	2000      	movs	r0, #0
 8004b42:	e007      	b.n	8004b54 <__sfputs_r+0x22>
 8004b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b48:	463a      	mov	r2, r7
 8004b4a:	4630      	mov	r0, r6
 8004b4c:	f7ff ffda 	bl	8004b04 <__sfputc_r>
 8004b50:	1c43      	adds	r3, r0, #1
 8004b52:	d1f3      	bne.n	8004b3c <__sfputs_r+0xa>
 8004b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b58 <_vfiprintf_r>:
 8004b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b5c:	460d      	mov	r5, r1
 8004b5e:	b09d      	sub	sp, #116	@ 0x74
 8004b60:	4614      	mov	r4, r2
 8004b62:	4698      	mov	r8, r3
 8004b64:	4606      	mov	r6, r0
 8004b66:	b118      	cbz	r0, 8004b70 <_vfiprintf_r+0x18>
 8004b68:	6a03      	ldr	r3, [r0, #32]
 8004b6a:	b90b      	cbnz	r3, 8004b70 <_vfiprintf_r+0x18>
 8004b6c:	f7ff fc14 	bl	8004398 <__sinit>
 8004b70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b72:	07d9      	lsls	r1, r3, #31
 8004b74:	d405      	bmi.n	8004b82 <_vfiprintf_r+0x2a>
 8004b76:	89ab      	ldrh	r3, [r5, #12]
 8004b78:	059a      	lsls	r2, r3, #22
 8004b7a:	d402      	bmi.n	8004b82 <_vfiprintf_r+0x2a>
 8004b7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b7e:	f7ff febe 	bl	80048fe <__retarget_lock_acquire_recursive>
 8004b82:	89ab      	ldrh	r3, [r5, #12]
 8004b84:	071b      	lsls	r3, r3, #28
 8004b86:	d501      	bpl.n	8004b8c <_vfiprintf_r+0x34>
 8004b88:	692b      	ldr	r3, [r5, #16]
 8004b8a:	b99b      	cbnz	r3, 8004bb4 <_vfiprintf_r+0x5c>
 8004b8c:	4629      	mov	r1, r5
 8004b8e:	4630      	mov	r0, r6
 8004b90:	f7ff fde6 	bl	8004760 <__swsetup_r>
 8004b94:	b170      	cbz	r0, 8004bb4 <_vfiprintf_r+0x5c>
 8004b96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b98:	07dc      	lsls	r4, r3, #31
 8004b9a:	d504      	bpl.n	8004ba6 <_vfiprintf_r+0x4e>
 8004b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba0:	b01d      	add	sp, #116	@ 0x74
 8004ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba6:	89ab      	ldrh	r3, [r5, #12]
 8004ba8:	0598      	lsls	r0, r3, #22
 8004baa:	d4f7      	bmi.n	8004b9c <_vfiprintf_r+0x44>
 8004bac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004bae:	f7ff fea7 	bl	8004900 <__retarget_lock_release_recursive>
 8004bb2:	e7f3      	b.n	8004b9c <_vfiprintf_r+0x44>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bb8:	2320      	movs	r3, #32
 8004bba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004bbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bc2:	2330      	movs	r3, #48	@ 0x30
 8004bc4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004d74 <_vfiprintf_r+0x21c>
 8004bc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004bcc:	f04f 0901 	mov.w	r9, #1
 8004bd0:	4623      	mov	r3, r4
 8004bd2:	469a      	mov	sl, r3
 8004bd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bd8:	b10a      	cbz	r2, 8004bde <_vfiprintf_r+0x86>
 8004bda:	2a25      	cmp	r2, #37	@ 0x25
 8004bdc:	d1f9      	bne.n	8004bd2 <_vfiprintf_r+0x7a>
 8004bde:	ebba 0b04 	subs.w	fp, sl, r4
 8004be2:	d00b      	beq.n	8004bfc <_vfiprintf_r+0xa4>
 8004be4:	465b      	mov	r3, fp
 8004be6:	4622      	mov	r2, r4
 8004be8:	4629      	mov	r1, r5
 8004bea:	4630      	mov	r0, r6
 8004bec:	f7ff ffa1 	bl	8004b32 <__sfputs_r>
 8004bf0:	3001      	adds	r0, #1
 8004bf2:	f000 80a7 	beq.w	8004d44 <_vfiprintf_r+0x1ec>
 8004bf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bf8:	445a      	add	r2, fp
 8004bfa:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 809f 	beq.w	8004d44 <_vfiprintf_r+0x1ec>
 8004c06:	2300      	movs	r3, #0
 8004c08:	f04f 32ff 	mov.w	r2, #4294967295
 8004c0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c10:	f10a 0a01 	add.w	sl, sl, #1
 8004c14:	9304      	str	r3, [sp, #16]
 8004c16:	9307      	str	r3, [sp, #28]
 8004c18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c1e:	4654      	mov	r4, sl
 8004c20:	2205      	movs	r2, #5
 8004c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c26:	4853      	ldr	r0, [pc, #332]	@ (8004d74 <_vfiprintf_r+0x21c>)
 8004c28:	f7fb fb02 	bl	8000230 <memchr>
 8004c2c:	9a04      	ldr	r2, [sp, #16]
 8004c2e:	b9d8      	cbnz	r0, 8004c68 <_vfiprintf_r+0x110>
 8004c30:	06d1      	lsls	r1, r2, #27
 8004c32:	bf44      	itt	mi
 8004c34:	2320      	movmi	r3, #32
 8004c36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c3a:	0713      	lsls	r3, r2, #28
 8004c3c:	bf44      	itt	mi
 8004c3e:	232b      	movmi	r3, #43	@ 0x2b
 8004c40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c44:	f89a 3000 	ldrb.w	r3, [sl]
 8004c48:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c4a:	d015      	beq.n	8004c78 <_vfiprintf_r+0x120>
 8004c4c:	9a07      	ldr	r2, [sp, #28]
 8004c4e:	4654      	mov	r4, sl
 8004c50:	2000      	movs	r0, #0
 8004c52:	f04f 0c0a 	mov.w	ip, #10
 8004c56:	4621      	mov	r1, r4
 8004c58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c5c:	3b30      	subs	r3, #48	@ 0x30
 8004c5e:	2b09      	cmp	r3, #9
 8004c60:	d94b      	bls.n	8004cfa <_vfiprintf_r+0x1a2>
 8004c62:	b1b0      	cbz	r0, 8004c92 <_vfiprintf_r+0x13a>
 8004c64:	9207      	str	r2, [sp, #28]
 8004c66:	e014      	b.n	8004c92 <_vfiprintf_r+0x13a>
 8004c68:	eba0 0308 	sub.w	r3, r0, r8
 8004c6c:	fa09 f303 	lsl.w	r3, r9, r3
 8004c70:	4313      	orrs	r3, r2
 8004c72:	9304      	str	r3, [sp, #16]
 8004c74:	46a2      	mov	sl, r4
 8004c76:	e7d2      	b.n	8004c1e <_vfiprintf_r+0xc6>
 8004c78:	9b03      	ldr	r3, [sp, #12]
 8004c7a:	1d19      	adds	r1, r3, #4
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	9103      	str	r1, [sp, #12]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	bfbb      	ittet	lt
 8004c84:	425b      	neglt	r3, r3
 8004c86:	f042 0202 	orrlt.w	r2, r2, #2
 8004c8a:	9307      	strge	r3, [sp, #28]
 8004c8c:	9307      	strlt	r3, [sp, #28]
 8004c8e:	bfb8      	it	lt
 8004c90:	9204      	strlt	r2, [sp, #16]
 8004c92:	7823      	ldrb	r3, [r4, #0]
 8004c94:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c96:	d10a      	bne.n	8004cae <_vfiprintf_r+0x156>
 8004c98:	7863      	ldrb	r3, [r4, #1]
 8004c9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c9c:	d132      	bne.n	8004d04 <_vfiprintf_r+0x1ac>
 8004c9e:	9b03      	ldr	r3, [sp, #12]
 8004ca0:	1d1a      	adds	r2, r3, #4
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	9203      	str	r2, [sp, #12]
 8004ca6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004caa:	3402      	adds	r4, #2
 8004cac:	9305      	str	r3, [sp, #20]
 8004cae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004d84 <_vfiprintf_r+0x22c>
 8004cb2:	7821      	ldrb	r1, [r4, #0]
 8004cb4:	2203      	movs	r2, #3
 8004cb6:	4650      	mov	r0, sl
 8004cb8:	f7fb faba 	bl	8000230 <memchr>
 8004cbc:	b138      	cbz	r0, 8004cce <_vfiprintf_r+0x176>
 8004cbe:	9b04      	ldr	r3, [sp, #16]
 8004cc0:	eba0 000a 	sub.w	r0, r0, sl
 8004cc4:	2240      	movs	r2, #64	@ 0x40
 8004cc6:	4082      	lsls	r2, r0
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	3401      	adds	r4, #1
 8004ccc:	9304      	str	r3, [sp, #16]
 8004cce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cd2:	4829      	ldr	r0, [pc, #164]	@ (8004d78 <_vfiprintf_r+0x220>)
 8004cd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004cd8:	2206      	movs	r2, #6
 8004cda:	f7fb faa9 	bl	8000230 <memchr>
 8004cde:	2800      	cmp	r0, #0
 8004ce0:	d03f      	beq.n	8004d62 <_vfiprintf_r+0x20a>
 8004ce2:	4b26      	ldr	r3, [pc, #152]	@ (8004d7c <_vfiprintf_r+0x224>)
 8004ce4:	bb1b      	cbnz	r3, 8004d2e <_vfiprintf_r+0x1d6>
 8004ce6:	9b03      	ldr	r3, [sp, #12]
 8004ce8:	3307      	adds	r3, #7
 8004cea:	f023 0307 	bic.w	r3, r3, #7
 8004cee:	3308      	adds	r3, #8
 8004cf0:	9303      	str	r3, [sp, #12]
 8004cf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cf4:	443b      	add	r3, r7
 8004cf6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cf8:	e76a      	b.n	8004bd0 <_vfiprintf_r+0x78>
 8004cfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cfe:	460c      	mov	r4, r1
 8004d00:	2001      	movs	r0, #1
 8004d02:	e7a8      	b.n	8004c56 <_vfiprintf_r+0xfe>
 8004d04:	2300      	movs	r3, #0
 8004d06:	3401      	adds	r4, #1
 8004d08:	9305      	str	r3, [sp, #20]
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	f04f 0c0a 	mov.w	ip, #10
 8004d10:	4620      	mov	r0, r4
 8004d12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d16:	3a30      	subs	r2, #48	@ 0x30
 8004d18:	2a09      	cmp	r2, #9
 8004d1a:	d903      	bls.n	8004d24 <_vfiprintf_r+0x1cc>
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0c6      	beq.n	8004cae <_vfiprintf_r+0x156>
 8004d20:	9105      	str	r1, [sp, #20]
 8004d22:	e7c4      	b.n	8004cae <_vfiprintf_r+0x156>
 8004d24:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d28:	4604      	mov	r4, r0
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e7f0      	b.n	8004d10 <_vfiprintf_r+0x1b8>
 8004d2e:	ab03      	add	r3, sp, #12
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	462a      	mov	r2, r5
 8004d34:	4b12      	ldr	r3, [pc, #72]	@ (8004d80 <_vfiprintf_r+0x228>)
 8004d36:	a904      	add	r1, sp, #16
 8004d38:	4630      	mov	r0, r6
 8004d3a:	f3af 8000 	nop.w
 8004d3e:	4607      	mov	r7, r0
 8004d40:	1c78      	adds	r0, r7, #1
 8004d42:	d1d6      	bne.n	8004cf2 <_vfiprintf_r+0x19a>
 8004d44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d46:	07d9      	lsls	r1, r3, #31
 8004d48:	d405      	bmi.n	8004d56 <_vfiprintf_r+0x1fe>
 8004d4a:	89ab      	ldrh	r3, [r5, #12]
 8004d4c:	059a      	lsls	r2, r3, #22
 8004d4e:	d402      	bmi.n	8004d56 <_vfiprintf_r+0x1fe>
 8004d50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d52:	f7ff fdd5 	bl	8004900 <__retarget_lock_release_recursive>
 8004d56:	89ab      	ldrh	r3, [r5, #12]
 8004d58:	065b      	lsls	r3, r3, #25
 8004d5a:	f53f af1f 	bmi.w	8004b9c <_vfiprintf_r+0x44>
 8004d5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d60:	e71e      	b.n	8004ba0 <_vfiprintf_r+0x48>
 8004d62:	ab03      	add	r3, sp, #12
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	462a      	mov	r2, r5
 8004d68:	4b05      	ldr	r3, [pc, #20]	@ (8004d80 <_vfiprintf_r+0x228>)
 8004d6a:	a904      	add	r1, sp, #16
 8004d6c:	4630      	mov	r0, r6
 8004d6e:	f000 f879 	bl	8004e64 <_printf_i>
 8004d72:	e7e4      	b.n	8004d3e <_vfiprintf_r+0x1e6>
 8004d74:	080056dc 	.word	0x080056dc
 8004d78:	080056e6 	.word	0x080056e6
 8004d7c:	00000000 	.word	0x00000000
 8004d80:	08004b33 	.word	0x08004b33
 8004d84:	080056e2 	.word	0x080056e2

08004d88 <_printf_common>:
 8004d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d8c:	4616      	mov	r6, r2
 8004d8e:	4698      	mov	r8, r3
 8004d90:	688a      	ldr	r2, [r1, #8]
 8004d92:	690b      	ldr	r3, [r1, #16]
 8004d94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	bfb8      	it	lt
 8004d9c:	4613      	movlt	r3, r2
 8004d9e:	6033      	str	r3, [r6, #0]
 8004da0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004da4:	4607      	mov	r7, r0
 8004da6:	460c      	mov	r4, r1
 8004da8:	b10a      	cbz	r2, 8004dae <_printf_common+0x26>
 8004daa:	3301      	adds	r3, #1
 8004dac:	6033      	str	r3, [r6, #0]
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	0699      	lsls	r1, r3, #26
 8004db2:	bf42      	ittt	mi
 8004db4:	6833      	ldrmi	r3, [r6, #0]
 8004db6:	3302      	addmi	r3, #2
 8004db8:	6033      	strmi	r3, [r6, #0]
 8004dba:	6825      	ldr	r5, [r4, #0]
 8004dbc:	f015 0506 	ands.w	r5, r5, #6
 8004dc0:	d106      	bne.n	8004dd0 <_printf_common+0x48>
 8004dc2:	f104 0a19 	add.w	sl, r4, #25
 8004dc6:	68e3      	ldr	r3, [r4, #12]
 8004dc8:	6832      	ldr	r2, [r6, #0]
 8004dca:	1a9b      	subs	r3, r3, r2
 8004dcc:	42ab      	cmp	r3, r5
 8004dce:	dc26      	bgt.n	8004e1e <_printf_common+0x96>
 8004dd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004dd4:	6822      	ldr	r2, [r4, #0]
 8004dd6:	3b00      	subs	r3, #0
 8004dd8:	bf18      	it	ne
 8004dda:	2301      	movne	r3, #1
 8004ddc:	0692      	lsls	r2, r2, #26
 8004dde:	d42b      	bmi.n	8004e38 <_printf_common+0xb0>
 8004de0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004de4:	4641      	mov	r1, r8
 8004de6:	4638      	mov	r0, r7
 8004de8:	47c8      	blx	r9
 8004dea:	3001      	adds	r0, #1
 8004dec:	d01e      	beq.n	8004e2c <_printf_common+0xa4>
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	6922      	ldr	r2, [r4, #16]
 8004df2:	f003 0306 	and.w	r3, r3, #6
 8004df6:	2b04      	cmp	r3, #4
 8004df8:	bf02      	ittt	eq
 8004dfa:	68e5      	ldreq	r5, [r4, #12]
 8004dfc:	6833      	ldreq	r3, [r6, #0]
 8004dfe:	1aed      	subeq	r5, r5, r3
 8004e00:	68a3      	ldr	r3, [r4, #8]
 8004e02:	bf0c      	ite	eq
 8004e04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e08:	2500      	movne	r5, #0
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	bfc4      	itt	gt
 8004e0e:	1a9b      	subgt	r3, r3, r2
 8004e10:	18ed      	addgt	r5, r5, r3
 8004e12:	2600      	movs	r6, #0
 8004e14:	341a      	adds	r4, #26
 8004e16:	42b5      	cmp	r5, r6
 8004e18:	d11a      	bne.n	8004e50 <_printf_common+0xc8>
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	e008      	b.n	8004e30 <_printf_common+0xa8>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	4652      	mov	r2, sl
 8004e22:	4641      	mov	r1, r8
 8004e24:	4638      	mov	r0, r7
 8004e26:	47c8      	blx	r9
 8004e28:	3001      	adds	r0, #1
 8004e2a:	d103      	bne.n	8004e34 <_printf_common+0xac>
 8004e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e34:	3501      	adds	r5, #1
 8004e36:	e7c6      	b.n	8004dc6 <_printf_common+0x3e>
 8004e38:	18e1      	adds	r1, r4, r3
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	2030      	movs	r0, #48	@ 0x30
 8004e3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e42:	4422      	add	r2, r4
 8004e44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e4c:	3302      	adds	r3, #2
 8004e4e:	e7c7      	b.n	8004de0 <_printf_common+0x58>
 8004e50:	2301      	movs	r3, #1
 8004e52:	4622      	mov	r2, r4
 8004e54:	4641      	mov	r1, r8
 8004e56:	4638      	mov	r0, r7
 8004e58:	47c8      	blx	r9
 8004e5a:	3001      	adds	r0, #1
 8004e5c:	d0e6      	beq.n	8004e2c <_printf_common+0xa4>
 8004e5e:	3601      	adds	r6, #1
 8004e60:	e7d9      	b.n	8004e16 <_printf_common+0x8e>
	...

08004e64 <_printf_i>:
 8004e64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e68:	7e0f      	ldrb	r7, [r1, #24]
 8004e6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e6c:	2f78      	cmp	r7, #120	@ 0x78
 8004e6e:	4691      	mov	r9, r2
 8004e70:	4680      	mov	r8, r0
 8004e72:	460c      	mov	r4, r1
 8004e74:	469a      	mov	sl, r3
 8004e76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e7a:	d807      	bhi.n	8004e8c <_printf_i+0x28>
 8004e7c:	2f62      	cmp	r7, #98	@ 0x62
 8004e7e:	d80a      	bhi.n	8004e96 <_printf_i+0x32>
 8004e80:	2f00      	cmp	r7, #0
 8004e82:	f000 80d1 	beq.w	8005028 <_printf_i+0x1c4>
 8004e86:	2f58      	cmp	r7, #88	@ 0x58
 8004e88:	f000 80b8 	beq.w	8004ffc <_printf_i+0x198>
 8004e8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e94:	e03a      	b.n	8004f0c <_printf_i+0xa8>
 8004e96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e9a:	2b15      	cmp	r3, #21
 8004e9c:	d8f6      	bhi.n	8004e8c <_printf_i+0x28>
 8004e9e:	a101      	add	r1, pc, #4	@ (adr r1, 8004ea4 <_printf_i+0x40>)
 8004ea0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ea4:	08004efd 	.word	0x08004efd
 8004ea8:	08004f11 	.word	0x08004f11
 8004eac:	08004e8d 	.word	0x08004e8d
 8004eb0:	08004e8d 	.word	0x08004e8d
 8004eb4:	08004e8d 	.word	0x08004e8d
 8004eb8:	08004e8d 	.word	0x08004e8d
 8004ebc:	08004f11 	.word	0x08004f11
 8004ec0:	08004e8d 	.word	0x08004e8d
 8004ec4:	08004e8d 	.word	0x08004e8d
 8004ec8:	08004e8d 	.word	0x08004e8d
 8004ecc:	08004e8d 	.word	0x08004e8d
 8004ed0:	0800500f 	.word	0x0800500f
 8004ed4:	08004f3b 	.word	0x08004f3b
 8004ed8:	08004fc9 	.word	0x08004fc9
 8004edc:	08004e8d 	.word	0x08004e8d
 8004ee0:	08004e8d 	.word	0x08004e8d
 8004ee4:	08005031 	.word	0x08005031
 8004ee8:	08004e8d 	.word	0x08004e8d
 8004eec:	08004f3b 	.word	0x08004f3b
 8004ef0:	08004e8d 	.word	0x08004e8d
 8004ef4:	08004e8d 	.word	0x08004e8d
 8004ef8:	08004fd1 	.word	0x08004fd1
 8004efc:	6833      	ldr	r3, [r6, #0]
 8004efe:	1d1a      	adds	r2, r3, #4
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6032      	str	r2, [r6, #0]
 8004f04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e09c      	b.n	800504a <_printf_i+0x1e6>
 8004f10:	6833      	ldr	r3, [r6, #0]
 8004f12:	6820      	ldr	r0, [r4, #0]
 8004f14:	1d19      	adds	r1, r3, #4
 8004f16:	6031      	str	r1, [r6, #0]
 8004f18:	0606      	lsls	r6, r0, #24
 8004f1a:	d501      	bpl.n	8004f20 <_printf_i+0xbc>
 8004f1c:	681d      	ldr	r5, [r3, #0]
 8004f1e:	e003      	b.n	8004f28 <_printf_i+0xc4>
 8004f20:	0645      	lsls	r5, r0, #25
 8004f22:	d5fb      	bpl.n	8004f1c <_printf_i+0xb8>
 8004f24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f28:	2d00      	cmp	r5, #0
 8004f2a:	da03      	bge.n	8004f34 <_printf_i+0xd0>
 8004f2c:	232d      	movs	r3, #45	@ 0x2d
 8004f2e:	426d      	negs	r5, r5
 8004f30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f34:	4858      	ldr	r0, [pc, #352]	@ (8005098 <_printf_i+0x234>)
 8004f36:	230a      	movs	r3, #10
 8004f38:	e011      	b.n	8004f5e <_printf_i+0xfa>
 8004f3a:	6821      	ldr	r1, [r4, #0]
 8004f3c:	6833      	ldr	r3, [r6, #0]
 8004f3e:	0608      	lsls	r0, r1, #24
 8004f40:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f44:	d402      	bmi.n	8004f4c <_printf_i+0xe8>
 8004f46:	0649      	lsls	r1, r1, #25
 8004f48:	bf48      	it	mi
 8004f4a:	b2ad      	uxthmi	r5, r5
 8004f4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f4e:	4852      	ldr	r0, [pc, #328]	@ (8005098 <_printf_i+0x234>)
 8004f50:	6033      	str	r3, [r6, #0]
 8004f52:	bf14      	ite	ne
 8004f54:	230a      	movne	r3, #10
 8004f56:	2308      	moveq	r3, #8
 8004f58:	2100      	movs	r1, #0
 8004f5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f5e:	6866      	ldr	r6, [r4, #4]
 8004f60:	60a6      	str	r6, [r4, #8]
 8004f62:	2e00      	cmp	r6, #0
 8004f64:	db05      	blt.n	8004f72 <_printf_i+0x10e>
 8004f66:	6821      	ldr	r1, [r4, #0]
 8004f68:	432e      	orrs	r6, r5
 8004f6a:	f021 0104 	bic.w	r1, r1, #4
 8004f6e:	6021      	str	r1, [r4, #0]
 8004f70:	d04b      	beq.n	800500a <_printf_i+0x1a6>
 8004f72:	4616      	mov	r6, r2
 8004f74:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f78:	fb03 5711 	mls	r7, r3, r1, r5
 8004f7c:	5dc7      	ldrb	r7, [r0, r7]
 8004f7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f82:	462f      	mov	r7, r5
 8004f84:	42bb      	cmp	r3, r7
 8004f86:	460d      	mov	r5, r1
 8004f88:	d9f4      	bls.n	8004f74 <_printf_i+0x110>
 8004f8a:	2b08      	cmp	r3, #8
 8004f8c:	d10b      	bne.n	8004fa6 <_printf_i+0x142>
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	07df      	lsls	r7, r3, #31
 8004f92:	d508      	bpl.n	8004fa6 <_printf_i+0x142>
 8004f94:	6923      	ldr	r3, [r4, #16]
 8004f96:	6861      	ldr	r1, [r4, #4]
 8004f98:	4299      	cmp	r1, r3
 8004f9a:	bfde      	ittt	le
 8004f9c:	2330      	movle	r3, #48	@ 0x30
 8004f9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004fa2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004fa6:	1b92      	subs	r2, r2, r6
 8004fa8:	6122      	str	r2, [r4, #16]
 8004faa:	f8cd a000 	str.w	sl, [sp]
 8004fae:	464b      	mov	r3, r9
 8004fb0:	aa03      	add	r2, sp, #12
 8004fb2:	4621      	mov	r1, r4
 8004fb4:	4640      	mov	r0, r8
 8004fb6:	f7ff fee7 	bl	8004d88 <_printf_common>
 8004fba:	3001      	adds	r0, #1
 8004fbc:	d14a      	bne.n	8005054 <_printf_i+0x1f0>
 8004fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc2:	b004      	add	sp, #16
 8004fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	f043 0320 	orr.w	r3, r3, #32
 8004fce:	6023      	str	r3, [r4, #0]
 8004fd0:	4832      	ldr	r0, [pc, #200]	@ (800509c <_printf_i+0x238>)
 8004fd2:	2778      	movs	r7, #120	@ 0x78
 8004fd4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	6831      	ldr	r1, [r6, #0]
 8004fdc:	061f      	lsls	r7, r3, #24
 8004fde:	f851 5b04 	ldr.w	r5, [r1], #4
 8004fe2:	d402      	bmi.n	8004fea <_printf_i+0x186>
 8004fe4:	065f      	lsls	r7, r3, #25
 8004fe6:	bf48      	it	mi
 8004fe8:	b2ad      	uxthmi	r5, r5
 8004fea:	6031      	str	r1, [r6, #0]
 8004fec:	07d9      	lsls	r1, r3, #31
 8004fee:	bf44      	itt	mi
 8004ff0:	f043 0320 	orrmi.w	r3, r3, #32
 8004ff4:	6023      	strmi	r3, [r4, #0]
 8004ff6:	b11d      	cbz	r5, 8005000 <_printf_i+0x19c>
 8004ff8:	2310      	movs	r3, #16
 8004ffa:	e7ad      	b.n	8004f58 <_printf_i+0xf4>
 8004ffc:	4826      	ldr	r0, [pc, #152]	@ (8005098 <_printf_i+0x234>)
 8004ffe:	e7e9      	b.n	8004fd4 <_printf_i+0x170>
 8005000:	6823      	ldr	r3, [r4, #0]
 8005002:	f023 0320 	bic.w	r3, r3, #32
 8005006:	6023      	str	r3, [r4, #0]
 8005008:	e7f6      	b.n	8004ff8 <_printf_i+0x194>
 800500a:	4616      	mov	r6, r2
 800500c:	e7bd      	b.n	8004f8a <_printf_i+0x126>
 800500e:	6833      	ldr	r3, [r6, #0]
 8005010:	6825      	ldr	r5, [r4, #0]
 8005012:	6961      	ldr	r1, [r4, #20]
 8005014:	1d18      	adds	r0, r3, #4
 8005016:	6030      	str	r0, [r6, #0]
 8005018:	062e      	lsls	r6, r5, #24
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	d501      	bpl.n	8005022 <_printf_i+0x1be>
 800501e:	6019      	str	r1, [r3, #0]
 8005020:	e002      	b.n	8005028 <_printf_i+0x1c4>
 8005022:	0668      	lsls	r0, r5, #25
 8005024:	d5fb      	bpl.n	800501e <_printf_i+0x1ba>
 8005026:	8019      	strh	r1, [r3, #0]
 8005028:	2300      	movs	r3, #0
 800502a:	6123      	str	r3, [r4, #16]
 800502c:	4616      	mov	r6, r2
 800502e:	e7bc      	b.n	8004faa <_printf_i+0x146>
 8005030:	6833      	ldr	r3, [r6, #0]
 8005032:	1d1a      	adds	r2, r3, #4
 8005034:	6032      	str	r2, [r6, #0]
 8005036:	681e      	ldr	r6, [r3, #0]
 8005038:	6862      	ldr	r2, [r4, #4]
 800503a:	2100      	movs	r1, #0
 800503c:	4630      	mov	r0, r6
 800503e:	f7fb f8f7 	bl	8000230 <memchr>
 8005042:	b108      	cbz	r0, 8005048 <_printf_i+0x1e4>
 8005044:	1b80      	subs	r0, r0, r6
 8005046:	6060      	str	r0, [r4, #4]
 8005048:	6863      	ldr	r3, [r4, #4]
 800504a:	6123      	str	r3, [r4, #16]
 800504c:	2300      	movs	r3, #0
 800504e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005052:	e7aa      	b.n	8004faa <_printf_i+0x146>
 8005054:	6923      	ldr	r3, [r4, #16]
 8005056:	4632      	mov	r2, r6
 8005058:	4649      	mov	r1, r9
 800505a:	4640      	mov	r0, r8
 800505c:	47d0      	blx	sl
 800505e:	3001      	adds	r0, #1
 8005060:	d0ad      	beq.n	8004fbe <_printf_i+0x15a>
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	079b      	lsls	r3, r3, #30
 8005066:	d413      	bmi.n	8005090 <_printf_i+0x22c>
 8005068:	68e0      	ldr	r0, [r4, #12]
 800506a:	9b03      	ldr	r3, [sp, #12]
 800506c:	4298      	cmp	r0, r3
 800506e:	bfb8      	it	lt
 8005070:	4618      	movlt	r0, r3
 8005072:	e7a6      	b.n	8004fc2 <_printf_i+0x15e>
 8005074:	2301      	movs	r3, #1
 8005076:	4632      	mov	r2, r6
 8005078:	4649      	mov	r1, r9
 800507a:	4640      	mov	r0, r8
 800507c:	47d0      	blx	sl
 800507e:	3001      	adds	r0, #1
 8005080:	d09d      	beq.n	8004fbe <_printf_i+0x15a>
 8005082:	3501      	adds	r5, #1
 8005084:	68e3      	ldr	r3, [r4, #12]
 8005086:	9903      	ldr	r1, [sp, #12]
 8005088:	1a5b      	subs	r3, r3, r1
 800508a:	42ab      	cmp	r3, r5
 800508c:	dcf2      	bgt.n	8005074 <_printf_i+0x210>
 800508e:	e7eb      	b.n	8005068 <_printf_i+0x204>
 8005090:	2500      	movs	r5, #0
 8005092:	f104 0619 	add.w	r6, r4, #25
 8005096:	e7f5      	b.n	8005084 <_printf_i+0x220>
 8005098:	080056ed 	.word	0x080056ed
 800509c:	080056fe 	.word	0x080056fe

080050a0 <__sflush_r>:
 80050a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80050a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050a8:	0716      	lsls	r6, r2, #28
 80050aa:	4605      	mov	r5, r0
 80050ac:	460c      	mov	r4, r1
 80050ae:	d454      	bmi.n	800515a <__sflush_r+0xba>
 80050b0:	684b      	ldr	r3, [r1, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	dc02      	bgt.n	80050bc <__sflush_r+0x1c>
 80050b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	dd48      	ble.n	800514e <__sflush_r+0xae>
 80050bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80050be:	2e00      	cmp	r6, #0
 80050c0:	d045      	beq.n	800514e <__sflush_r+0xae>
 80050c2:	2300      	movs	r3, #0
 80050c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80050c8:	682f      	ldr	r7, [r5, #0]
 80050ca:	6a21      	ldr	r1, [r4, #32]
 80050cc:	602b      	str	r3, [r5, #0]
 80050ce:	d030      	beq.n	8005132 <__sflush_r+0x92>
 80050d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80050d2:	89a3      	ldrh	r3, [r4, #12]
 80050d4:	0759      	lsls	r1, r3, #29
 80050d6:	d505      	bpl.n	80050e4 <__sflush_r+0x44>
 80050d8:	6863      	ldr	r3, [r4, #4]
 80050da:	1ad2      	subs	r2, r2, r3
 80050dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80050de:	b10b      	cbz	r3, 80050e4 <__sflush_r+0x44>
 80050e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80050e2:	1ad2      	subs	r2, r2, r3
 80050e4:	2300      	movs	r3, #0
 80050e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80050e8:	6a21      	ldr	r1, [r4, #32]
 80050ea:	4628      	mov	r0, r5
 80050ec:	47b0      	blx	r6
 80050ee:	1c43      	adds	r3, r0, #1
 80050f0:	89a3      	ldrh	r3, [r4, #12]
 80050f2:	d106      	bne.n	8005102 <__sflush_r+0x62>
 80050f4:	6829      	ldr	r1, [r5, #0]
 80050f6:	291d      	cmp	r1, #29
 80050f8:	d82b      	bhi.n	8005152 <__sflush_r+0xb2>
 80050fa:	4a2a      	ldr	r2, [pc, #168]	@ (80051a4 <__sflush_r+0x104>)
 80050fc:	40ca      	lsrs	r2, r1
 80050fe:	07d6      	lsls	r6, r2, #31
 8005100:	d527      	bpl.n	8005152 <__sflush_r+0xb2>
 8005102:	2200      	movs	r2, #0
 8005104:	6062      	str	r2, [r4, #4]
 8005106:	04d9      	lsls	r1, r3, #19
 8005108:	6922      	ldr	r2, [r4, #16]
 800510a:	6022      	str	r2, [r4, #0]
 800510c:	d504      	bpl.n	8005118 <__sflush_r+0x78>
 800510e:	1c42      	adds	r2, r0, #1
 8005110:	d101      	bne.n	8005116 <__sflush_r+0x76>
 8005112:	682b      	ldr	r3, [r5, #0]
 8005114:	b903      	cbnz	r3, 8005118 <__sflush_r+0x78>
 8005116:	6560      	str	r0, [r4, #84]	@ 0x54
 8005118:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800511a:	602f      	str	r7, [r5, #0]
 800511c:	b1b9      	cbz	r1, 800514e <__sflush_r+0xae>
 800511e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005122:	4299      	cmp	r1, r3
 8005124:	d002      	beq.n	800512c <__sflush_r+0x8c>
 8005126:	4628      	mov	r0, r5
 8005128:	f7ff fbec 	bl	8004904 <_free_r>
 800512c:	2300      	movs	r3, #0
 800512e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005130:	e00d      	b.n	800514e <__sflush_r+0xae>
 8005132:	2301      	movs	r3, #1
 8005134:	4628      	mov	r0, r5
 8005136:	47b0      	blx	r6
 8005138:	4602      	mov	r2, r0
 800513a:	1c50      	adds	r0, r2, #1
 800513c:	d1c9      	bne.n	80050d2 <__sflush_r+0x32>
 800513e:	682b      	ldr	r3, [r5, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0c6      	beq.n	80050d2 <__sflush_r+0x32>
 8005144:	2b1d      	cmp	r3, #29
 8005146:	d001      	beq.n	800514c <__sflush_r+0xac>
 8005148:	2b16      	cmp	r3, #22
 800514a:	d11e      	bne.n	800518a <__sflush_r+0xea>
 800514c:	602f      	str	r7, [r5, #0]
 800514e:	2000      	movs	r0, #0
 8005150:	e022      	b.n	8005198 <__sflush_r+0xf8>
 8005152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005156:	b21b      	sxth	r3, r3
 8005158:	e01b      	b.n	8005192 <__sflush_r+0xf2>
 800515a:	690f      	ldr	r7, [r1, #16]
 800515c:	2f00      	cmp	r7, #0
 800515e:	d0f6      	beq.n	800514e <__sflush_r+0xae>
 8005160:	0793      	lsls	r3, r2, #30
 8005162:	680e      	ldr	r6, [r1, #0]
 8005164:	bf08      	it	eq
 8005166:	694b      	ldreq	r3, [r1, #20]
 8005168:	600f      	str	r7, [r1, #0]
 800516a:	bf18      	it	ne
 800516c:	2300      	movne	r3, #0
 800516e:	eba6 0807 	sub.w	r8, r6, r7
 8005172:	608b      	str	r3, [r1, #8]
 8005174:	f1b8 0f00 	cmp.w	r8, #0
 8005178:	dde9      	ble.n	800514e <__sflush_r+0xae>
 800517a:	6a21      	ldr	r1, [r4, #32]
 800517c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800517e:	4643      	mov	r3, r8
 8005180:	463a      	mov	r2, r7
 8005182:	4628      	mov	r0, r5
 8005184:	47b0      	blx	r6
 8005186:	2800      	cmp	r0, #0
 8005188:	dc08      	bgt.n	800519c <__sflush_r+0xfc>
 800518a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800518e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005192:	81a3      	strh	r3, [r4, #12]
 8005194:	f04f 30ff 	mov.w	r0, #4294967295
 8005198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800519c:	4407      	add	r7, r0
 800519e:	eba8 0800 	sub.w	r8, r8, r0
 80051a2:	e7e7      	b.n	8005174 <__sflush_r+0xd4>
 80051a4:	20400001 	.word	0x20400001

080051a8 <_fflush_r>:
 80051a8:	b538      	push	{r3, r4, r5, lr}
 80051aa:	690b      	ldr	r3, [r1, #16]
 80051ac:	4605      	mov	r5, r0
 80051ae:	460c      	mov	r4, r1
 80051b0:	b913      	cbnz	r3, 80051b8 <_fflush_r+0x10>
 80051b2:	2500      	movs	r5, #0
 80051b4:	4628      	mov	r0, r5
 80051b6:	bd38      	pop	{r3, r4, r5, pc}
 80051b8:	b118      	cbz	r0, 80051c2 <_fflush_r+0x1a>
 80051ba:	6a03      	ldr	r3, [r0, #32]
 80051bc:	b90b      	cbnz	r3, 80051c2 <_fflush_r+0x1a>
 80051be:	f7ff f8eb 	bl	8004398 <__sinit>
 80051c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0f3      	beq.n	80051b2 <_fflush_r+0xa>
 80051ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80051cc:	07d0      	lsls	r0, r2, #31
 80051ce:	d404      	bmi.n	80051da <_fflush_r+0x32>
 80051d0:	0599      	lsls	r1, r3, #22
 80051d2:	d402      	bmi.n	80051da <_fflush_r+0x32>
 80051d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051d6:	f7ff fb92 	bl	80048fe <__retarget_lock_acquire_recursive>
 80051da:	4628      	mov	r0, r5
 80051dc:	4621      	mov	r1, r4
 80051de:	f7ff ff5f 	bl	80050a0 <__sflush_r>
 80051e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051e4:	07da      	lsls	r2, r3, #31
 80051e6:	4605      	mov	r5, r0
 80051e8:	d4e4      	bmi.n	80051b4 <_fflush_r+0xc>
 80051ea:	89a3      	ldrh	r3, [r4, #12]
 80051ec:	059b      	lsls	r3, r3, #22
 80051ee:	d4e1      	bmi.n	80051b4 <_fflush_r+0xc>
 80051f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051f2:	f7ff fb85 	bl	8004900 <__retarget_lock_release_recursive>
 80051f6:	e7dd      	b.n	80051b4 <_fflush_r+0xc>

080051f8 <__swhatbuf_r>:
 80051f8:	b570      	push	{r4, r5, r6, lr}
 80051fa:	460c      	mov	r4, r1
 80051fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005200:	2900      	cmp	r1, #0
 8005202:	b096      	sub	sp, #88	@ 0x58
 8005204:	4615      	mov	r5, r2
 8005206:	461e      	mov	r6, r3
 8005208:	da0d      	bge.n	8005226 <__swhatbuf_r+0x2e>
 800520a:	89a3      	ldrh	r3, [r4, #12]
 800520c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005210:	f04f 0100 	mov.w	r1, #0
 8005214:	bf14      	ite	ne
 8005216:	2340      	movne	r3, #64	@ 0x40
 8005218:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800521c:	2000      	movs	r0, #0
 800521e:	6031      	str	r1, [r6, #0]
 8005220:	602b      	str	r3, [r5, #0]
 8005222:	b016      	add	sp, #88	@ 0x58
 8005224:	bd70      	pop	{r4, r5, r6, pc}
 8005226:	466a      	mov	r2, sp
 8005228:	f000 f848 	bl	80052bc <_fstat_r>
 800522c:	2800      	cmp	r0, #0
 800522e:	dbec      	blt.n	800520a <__swhatbuf_r+0x12>
 8005230:	9901      	ldr	r1, [sp, #4]
 8005232:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005236:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800523a:	4259      	negs	r1, r3
 800523c:	4159      	adcs	r1, r3
 800523e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005242:	e7eb      	b.n	800521c <__swhatbuf_r+0x24>

08005244 <__smakebuf_r>:
 8005244:	898b      	ldrh	r3, [r1, #12]
 8005246:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005248:	079d      	lsls	r5, r3, #30
 800524a:	4606      	mov	r6, r0
 800524c:	460c      	mov	r4, r1
 800524e:	d507      	bpl.n	8005260 <__smakebuf_r+0x1c>
 8005250:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005254:	6023      	str	r3, [r4, #0]
 8005256:	6123      	str	r3, [r4, #16]
 8005258:	2301      	movs	r3, #1
 800525a:	6163      	str	r3, [r4, #20]
 800525c:	b003      	add	sp, #12
 800525e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005260:	ab01      	add	r3, sp, #4
 8005262:	466a      	mov	r2, sp
 8005264:	f7ff ffc8 	bl	80051f8 <__swhatbuf_r>
 8005268:	9f00      	ldr	r7, [sp, #0]
 800526a:	4605      	mov	r5, r0
 800526c:	4639      	mov	r1, r7
 800526e:	4630      	mov	r0, r6
 8005270:	f7ff fbbc 	bl	80049ec <_malloc_r>
 8005274:	b948      	cbnz	r0, 800528a <__smakebuf_r+0x46>
 8005276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800527a:	059a      	lsls	r2, r3, #22
 800527c:	d4ee      	bmi.n	800525c <__smakebuf_r+0x18>
 800527e:	f023 0303 	bic.w	r3, r3, #3
 8005282:	f043 0302 	orr.w	r3, r3, #2
 8005286:	81a3      	strh	r3, [r4, #12]
 8005288:	e7e2      	b.n	8005250 <__smakebuf_r+0xc>
 800528a:	89a3      	ldrh	r3, [r4, #12]
 800528c:	6020      	str	r0, [r4, #0]
 800528e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005292:	81a3      	strh	r3, [r4, #12]
 8005294:	9b01      	ldr	r3, [sp, #4]
 8005296:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800529a:	b15b      	cbz	r3, 80052b4 <__smakebuf_r+0x70>
 800529c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052a0:	4630      	mov	r0, r6
 80052a2:	f000 f81d 	bl	80052e0 <_isatty_r>
 80052a6:	b128      	cbz	r0, 80052b4 <__smakebuf_r+0x70>
 80052a8:	89a3      	ldrh	r3, [r4, #12]
 80052aa:	f023 0303 	bic.w	r3, r3, #3
 80052ae:	f043 0301 	orr.w	r3, r3, #1
 80052b2:	81a3      	strh	r3, [r4, #12]
 80052b4:	89a3      	ldrh	r3, [r4, #12]
 80052b6:	431d      	orrs	r5, r3
 80052b8:	81a5      	strh	r5, [r4, #12]
 80052ba:	e7cf      	b.n	800525c <__smakebuf_r+0x18>

080052bc <_fstat_r>:
 80052bc:	b538      	push	{r3, r4, r5, lr}
 80052be:	4d07      	ldr	r5, [pc, #28]	@ (80052dc <_fstat_r+0x20>)
 80052c0:	2300      	movs	r3, #0
 80052c2:	4604      	mov	r4, r0
 80052c4:	4608      	mov	r0, r1
 80052c6:	4611      	mov	r1, r2
 80052c8:	602b      	str	r3, [r5, #0]
 80052ca:	f7fb fd49 	bl	8000d60 <_fstat>
 80052ce:	1c43      	adds	r3, r0, #1
 80052d0:	d102      	bne.n	80052d8 <_fstat_r+0x1c>
 80052d2:	682b      	ldr	r3, [r5, #0]
 80052d4:	b103      	cbz	r3, 80052d8 <_fstat_r+0x1c>
 80052d6:	6023      	str	r3, [r4, #0]
 80052d8:	bd38      	pop	{r3, r4, r5, pc}
 80052da:	bf00      	nop
 80052dc:	20000354 	.word	0x20000354

080052e0 <_isatty_r>:
 80052e0:	b538      	push	{r3, r4, r5, lr}
 80052e2:	4d06      	ldr	r5, [pc, #24]	@ (80052fc <_isatty_r+0x1c>)
 80052e4:	2300      	movs	r3, #0
 80052e6:	4604      	mov	r4, r0
 80052e8:	4608      	mov	r0, r1
 80052ea:	602b      	str	r3, [r5, #0]
 80052ec:	f7fb fd48 	bl	8000d80 <_isatty>
 80052f0:	1c43      	adds	r3, r0, #1
 80052f2:	d102      	bne.n	80052fa <_isatty_r+0x1a>
 80052f4:	682b      	ldr	r3, [r5, #0]
 80052f6:	b103      	cbz	r3, 80052fa <_isatty_r+0x1a>
 80052f8:	6023      	str	r3, [r4, #0]
 80052fa:	bd38      	pop	{r3, r4, r5, pc}
 80052fc:	20000354 	.word	0x20000354

08005300 <_sbrk_r>:
 8005300:	b538      	push	{r3, r4, r5, lr}
 8005302:	4d06      	ldr	r5, [pc, #24]	@ (800531c <_sbrk_r+0x1c>)
 8005304:	2300      	movs	r3, #0
 8005306:	4604      	mov	r4, r0
 8005308:	4608      	mov	r0, r1
 800530a:	602b      	str	r3, [r5, #0]
 800530c:	f7fb fd50 	bl	8000db0 <_sbrk>
 8005310:	1c43      	adds	r3, r0, #1
 8005312:	d102      	bne.n	800531a <_sbrk_r+0x1a>
 8005314:	682b      	ldr	r3, [r5, #0]
 8005316:	b103      	cbz	r3, 800531a <_sbrk_r+0x1a>
 8005318:	6023      	str	r3, [r4, #0]
 800531a:	bd38      	pop	{r3, r4, r5, pc}
 800531c:	20000354 	.word	0x20000354

08005320 <_init>:
 8005320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005322:	bf00      	nop
 8005324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005326:	bc08      	pop	{r3}
 8005328:	469e      	mov	lr, r3
 800532a:	4770      	bx	lr

0800532c <_fini>:
 800532c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532e:	bf00      	nop
 8005330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005332:	bc08      	pop	{r3}
 8005334:	469e      	mov	lr, r3
 8005336:	4770      	bx	lr
